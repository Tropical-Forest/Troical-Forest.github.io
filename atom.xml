<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tropical-Forest</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tropical-forest.github.io/"/>
  <updated>2022-07-20T04:01:55.300Z</updated>
  <id>https://tropical-forest.github.io/</id>
  
  <author>
    <name>Tropical-Forest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据库的基本操作</title>
    <link href="https://tropical-forest.github.io/2022/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://tropical-forest.github.io/2022/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2022-07-20T03:51:49.000Z</published>
    <updated>2022-07-20T04:01:55.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本表的定义、删除和修改"><a href="#基本表的定义、删除和修改" class="headerlink" title="基本表的定义、删除和修改"></a>基本表的定义、删除和修改</h2><h3 id="定义基本表"><a href="#定义基本表" class="headerlink" title="定义基本表"></a>定义基本表</h3><p>1、建立一个“学生”表Student</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">(</span><br><span class="line">Sno CHAR(9) PRIMARY KEY,</span><br><span class="line">Sname CHAR(20) UNIQUE,</span><br><span class="line">Ssex CHAR(2),</span><br><span class="line">Sage SMALLINT,</span><br><span class="line">Sdept CHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>2、建立一个课程表Course</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table Course</span><br><span class="line">(</span><br><span class="line">    Cno char(4) primary key,</span><br><span class="line">    Cname char(40) not null,</span><br><span class="line">    Cpno char(4),</span><br><span class="line">    Ccredit smallint,</span><br><span class="line">    foreign key(Cpno) references Course(Cno)&#x2F;* Cpno是外码，被参照表是Course，被参照列为Cno *&#x2F;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>3、建立学习选课表SC </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table SC</span><br><span class="line">(</span><br><span class="line">Sno char(9),</span><br><span class="line">    Cno char(4),</span><br><span class="line">    Grade smallint,</span><br><span class="line">    primary key(Sno,Cno),</span><br><span class="line">    foreign key(Sno) references Student(Sno),</span><br><span class="line">    foreign key(Cno) references Course(Cno)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改基本表"><a href="#修改基本表" class="headerlink" title="修改基本表"></a>修改基本表</h3><p>1、向Student表增加“入学时间”列，其数据类型为日期型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table Student add S_entrance date;</span><br></pre></td></tr></table></figure><p>2、将年龄的数据类型由字符型(假设原来的数据类型为字符型)改为整数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table Student alter column Sage int;</span><br></pre></td></tr></table></figure><p>3、增加课程名称必须取唯一值的约束条件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table Course add unique(Cname);</span><br></pre></td></tr></table></figure><h3 id="删除基本表"><a href="#删除基本表" class="headerlink" title="删除基本表"></a>删除基本表</h3><p>1、删除Student表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drop table Student</span><br><span class="line">drop table Student restrict</span><br><span class="line">drop table Student cascade</span><br><span class="line">若选择resttrict，则该表的删除是有限制条件的。欲删除的基本表不能被其他表的约束条件所应有，不能有视图，不能有触发器，不能有存储过程或函数。如果存在这些依赖该表的对象，则此表不能被删除。</span><br><span class="line">若选择cascade，则该表的删除没有限制条件。在删除基本表的同时，相关的依赖对象，例如视图，都将被一起删除。</span><br></pre></td></tr></table></figure><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="1、选择表中的若干列"><a href="#1、选择表中的若干列" class="headerlink" title="1、选择表中的若干列"></a>1、选择表中的若干列</h4><p>（1）查询指定列</p><ul><li><p>查询全体学生的学号与姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select Sno,Sname</span><br><span class="line">from Student;</span><br></pre></td></tr></table></figure></li><li><p>查询全体学生的姓名、学号、所在系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sno,Sdept from Student;</span><br></pre></td></tr></table></figure></li></ul><p>​    (2)查询全部列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Student;</span><br></pre></td></tr></table></figure><p>（3）查询经过计算得值</p><ul><li><p>查询全体学生的姓名及其出生年份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select Sname, 2014-Sage</span><br><span class="line">from Student;</span><br></pre></td></tr></table></figure></li></ul><ul><li>查询全体学生的姓名、出生年份和所在的院系，要求用最小写字母表示系名。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select Sname NAME,&#39;Year of Birth:&#39; BIRTH, 2014-Sage BIRTHDAY,LOWER(sdept) DEPARTMENT</span><br><span class="line">from Student;</span><br></pre></td></tr></table></figure><h4 id="2、选择表中的若干元组"><a href="#2、选择表中的若干元组" class="headerlink" title="2、选择表中的若干元组"></a>2、选择表中的若干元组</h4><h4 id="（1）消除取消重复的行"><a href="#（1）消除取消重复的行" class="headerlink" title="（1）消除取消重复的行"></a>（1）消除取消重复的行</h4><ul><li><p>查询选修了课程的学生学号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct Sno from SC;  &#x2F;*distinct关键字的作用是去掉结果的重复行*&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h4 id="（2）查询满足条件的元组"><a href="#（2）查询满足条件的元组" class="headerlink" title="（2）查询满足条件的元组"></a>（2）查询满足条件的元组</h4><p>查询满足指定条件的元组可以通过where子句实现。where子句常用的查询条件如下表所示：</p><div class="table-container"><table><thead><tr><th>查询条件</th><th>谓词</th></tr></thead><tbody><tr><td>比较</td><td>=，&gt;,&lt;,&gt;=,&lt;=,!=,&lt;&gt;,!&gt;,!&lt;,</td></tr><tr><td>确定范围</td><td>between and, not between and</td></tr><tr><td>确定集合</td><td>in, not in</td></tr><tr><td>字符匹配</td><td>like, not like</td></tr><tr><td>空值</td><td>is null, is not null</td></tr><tr><td>多重条件（逻辑运算）</td><td>and, or, not</td></tr></tbody></table></div><ul><li><h5 id="比较大小"><a href="#比较大小" class="headerlink" title="比较大小"></a>比较大小</h5><ul><li><p>查询计算机科学系全体学生的名单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname from Student where Sdept &#x3D; &#39;CS&#39;;</span><br></pre></td></tr></table></figure></li><li><p>查询所有年龄在20岁以下的学生姓名及其年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sage from Student where Sage&lt;20;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>查询考试成绩不及格的学生的学号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct Sno from SC where Grade&lt;60;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h5 id="确定范围"><a href="#确定范围" class="headerlink" title="确定范围"></a>确定范围</h5><ul><li><p>查询年龄在20-23岁（包括20岁和23岁）之间的的学生姓名、系别和年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sdept,Sage from Student where Sage between 20 and 23;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>查询年龄不在20-23岁之间的学生姓名、系别和年龄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sdept,Sage from Student where Sage not between 20 and 23;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h5 id="确定集合"><a href="#确定集合" class="headerlink" title="确定集合"></a>确定集合</h5><ul><li><p>查询计算机科学系（CS）、数学系（MA）和信息系（IS）学生的姓名和性别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Ssex from Student where Sdept in(&#39;CS&#39;,&#39;MA&#39;,&#39;IS&#39;);</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>查询既不属于计算机科学系、数学系，也不是信息系的学生的姓名和性别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Ssex from Student where Sdept not in(&#39;CS&#39;,&#39;MA&#39;,&#39;IS&#39;);</span><br></pre></td></tr></table></figure></li></ul><ul><li><h5 id="字符匹配"><a href="#字符匹配" class="headerlink" title="字符匹配"></a>字符匹配</h5><p>通配符%和_</p><p>%（百分号）代表任意长度（长度可以为0）的字符串。</p><p>_(下划线)代表任意单个字符</p><ul><li><p>查询学号为201215121的学生的详细情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Student where Sno like &#39;201215121&#39;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>查询所有姓刘的学生的姓名、学号和性别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sno,Ssex from Student where Sname like &#39;刘%&#39;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查询新“欧阳”且全名为三个汉字的学生的姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname from Student where Sname like &#39;欧阳_&#39;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查询所有不姓刘的学生的姓名、学号和性别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sno from Ssex from Student where Sname not like &#39;刘%&#39;;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查询DB_Disign课程的课程号和学分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Cno,Ccredit from Cource where Cname like &#39;DB\_Design&#39; ESCAPE &#39;\&#39;;</span><br></pre></td></tr></table></figure><p>ESCAPE ‘\‘  表示”\“为换码字符。这样匹配串中紧跟在”\“后面的字符”<em>“不再具有通配符的含义，转义为普通的”_</em>“字符</p></li></ul><ul><li><h5 id="涉及空值的查询"><a href="#涉及空值的查询" class="headerlink" title="涉及空值的查询"></a>涉及空值的查询</h5><ul><li><p>查询缺少成绩的学生的学号和相应的课程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sno,Cno from SC where Grade is null &#x2F;*注意这里的is不能用等号代替*&#x2F;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>查所有成绩的学生学号和课程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sno,Cno from SC where Grade is not null;</span><br></pre></td></tr></table></figure></li></ul><ul><li><h5 id="多重条件查询"><a href="#多重条件查询" class="headerlink" title="多重条件查询"></a>多重条件查询</h5><ul><li><p>查询所有计算机科学系的年龄在20岁以下的学生姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sname from Student where Sdept &#x3D; &#39;CS&#39; and Sage</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3、order-by子句"><a href="#3、order-by子句" class="headerlink" title="3、order by子句"></a>3、order by子句</h4><p>用户可以用order by子句对查询结果按照一个或多个属性列的升序（ASC）或降序（DESC）排列，默认值为升序</p><p>（1）查询选修了3号课程的学生的学号及其成绩，查询结果按分数的降序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Sno,Grade from SC where Cno&#x3D;&#39;3&#39; order by Grade DESC;</span><br></pre></td></tr></table></figure><p>（2）查询全体学生情况，查询结果按所在系的系好升序排列，同一系中的学生按年龄降序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Student order by Sdept,Sage DESC;</span><br></pre></td></tr></table></figure><h4 id="4、聚集函数"><a href="#4、聚集函数" class="headerlink" title="4、聚集函数"></a>4、聚集函数</h4><p>为了进一步方便用户，增强检索功能，sql提供了许多聚集函数，主要有：</p><p>count(*)</p><p>count([distinct | all] &lt;列名&gt;) 统计个数</p><p>sum([distinct | all] &lt;列名&gt;) 计算总和</p><p>avg([distinct | all] &lt;列名&gt;) 求平均值</p><p>max([distinct | all] &lt;列名&gt;) 求最大值</p><p>min([distinct | all] &lt;列名&gt;) 求最小值</p><p>如果指定distinct短语，则表示在计算时要取消指定列中的重复值。如果不指定distinct短语或指定all短语（all为默认值），则表示不取消重复值。</p><p>（1）查询学生总人数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from Student;</span><br></pre></td></tr></table></figure><p>（2）查询选修了课程的学生人数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(distinct Sno) from SC;</span><br></pre></td></tr></table></figure><p>（3）计算选修了1号课程的学生平均成绩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(Grade) from SC where Cno &#x3D; &#39;1&#39;;</span><br></pre></td></tr></table></figure><p>（4）查询选修1号课程的学生最高分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(Grade) from SC where Cno &#x3D; &#39;1&#39;;</span><br></pre></td></tr></table></figure><p>（5）查询学生201215012选修课程的总学分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(Ccredit) from SC,Cource where Sno&#x3D;&#39;201215012&#39; and SC.Cno &#x3D; Cource.Cno</span><br></pre></td></tr></table></figure><p>当集聚函数遇到空值时，除了count（*）外，都跳过空值而只处理非空值</p><h4 id="5、group-by子句"><a href="#5、group-by子句" class="headerlink" title="5、group by子句"></a>5、group by子句</h4><p>group by子句将查询结果按某一列或多列的值分组，值相等的为一组。</p><p>分组后集聚函数将作用于每一个组，即每一个组都有一个函数值</p><p>（1）求各个课程号及相应的选课人数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Cno,count(Sno) from SC group by Cno;</span><br></pre></td></tr></table></figure><p>该语句对查询结果按Cno分组，所有具有相同Cno值得元组为一组，然后对每一组作用集聚函数count进行计算，以求得该组的学生人数。如果分组后还要按一定的条件进行筛选，最终只输出满足指定条件的组，则可以使用having短语指定筛选条件。</p><p>（2）查询选修了三门以上课程的学生学号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select Sno from SC group by Sno </span><br><span class="line">having count(*)&gt;3;</span><br></pre></td></tr></table></figure><p>（3）查询平均成绩大于等于90分的学生学号和平均成绩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select Sno,avg(Grade) from SC group by Sno</span><br><span class="line">having avg(Grade) &gt;&#x3D; 90;</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="1、等值与非等值连接查询"><a href="#1、等值与非等值连接查询" class="headerlink" title="1、等值与非等值连接查询"></a>1、等值与非等值连接查询</h4><ul><li><p>查询每一个学生及其选修课程的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select Student.*,SC.* from Student,SC where Student.Sno &#x3D; SC.Sno;</span><br></pre></td></tr></table></figure></li><li><p>查询选修2号课程且成绩在90分以上的所有学生的学号和姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select Student.Sno,Sname</span><br><span class="line">from Student,SC</span><br><span class="line">where Student.Sno &#x3D; Sc.Sno and</span><br><span class="line">SC.Cno  &#x3D; &#39;2&#39; and SC.Grade &gt;90;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、自身连接"><a href="#2、自身连接" class="headerlink" title="2、自身连接"></a>2、自身连接</h4><ul><li><p>查询每一门课的间接选修课（即选修课的选修课）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select first.Cno,second.Cpno</span><br><span class="line">from Couse first,Couse second</span><br><span class="line">where first.Cpno&#x3D;second.Cno;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、外连接"><a href="#3、外连接" class="headerlink" title="3、外连接"></a>3、外连接</h4><h4 id="4、多表连接"><a href="#4、多表连接" class="headerlink" title="4、多表连接"></a>4、多表连接</h4><h3 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h3><p>​    在sql语言中，一个select-from-where语句称为一个查询块。将一个查询块嵌套在另一个查询块的where子句或having短语的条件中的查询称为嵌套查询。</p><p>SQL语言允许多层嵌套查询，即一个子查询中还可以嵌套其他子查询。需要特别注意的是，子查询的select语句不能使用order by子句，order by子句只能对最终查询结果排序。</p><h4 id="1、带有IN谓词的子查询"><a href="#1、带有IN谓词的子查询" class="headerlink" title="1、带有IN谓词的子查询"></a>1、带有IN谓词的子查询</h4><ul><li><p>查询与“刘晨”在用一个系学习的学生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select Sno,Sname,Sdept</span><br><span class="line">from Student</span><br><span class="line">where Sdept in</span><br><span class="line">(</span><br><span class="line">select Sdept from Student where Sname&#x3D;&#39;刘晨&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h4 id="2、带有比较运算符的子查询"><a href="#2、带有比较运算符的子查询" class="headerlink" title="2、带有比较运算符的子查询"></a>2、带有比较运算符的子查询</h4><ul><li><p>找出每个学生超过他自己选修课程平均成绩的课程号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select Sno,Cno</span><br><span class="line">from SC x</span><br><span class="line">where Grade &gt;&#x3D;(</span><br><span class="line">select avg(Grade) from SC y where y.Sno &#x3D; x.Sno</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h4 id="3、带有any（some）或all谓词的子查询"><a href="#3、带有any（some）或all谓词的子查询" class="headerlink" title="3、带有any（some）或all谓词的子查询"></a>3、带有any（some）或all谓词的子查询</h4><ul><li><p>查询非计算机科学系中比计算机科学系任意一个学生年龄小的学生姓名和年龄。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage&lt;any(</span><br><span class="line">select sage from Student where Sdept &#x3D; &#39;CC&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>查询非计算机科学系中比计算机科学系所有学生年龄小的学生姓名和年龄。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select Sname,Sage</span><br><span class="line">from Student</span><br><span class="line">where Sage&lt;all(</span><br><span class="line">select sage from Student where Sdept &#x3D; &#39;CC&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、带有exists谓词的子查询"><a href="#4、带有exists谓词的子查询" class="headerlink" title="4、带有exists谓词的子查询"></a>4、带有exists谓词的子查询</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本表的定义、删除和修改&quot;&gt;&lt;a href=&quot;#基本表的定义、删除和修改&quot; class=&quot;headerlink&quot; title=&quot;基本表的定义、删除和修改&quot;&gt;&lt;/a&gt;基本表的定义、删除和修改&lt;/h2&gt;&lt;h3 id=&quot;定义基本表&quot;&gt;&lt;a href=&quot;#定义基本表&quot; c
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://tropical-forest.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://tropical-forest.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题</title>
    <link href="https://tropical-forest.github.io/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://tropical-forest.github.io/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2022-07-19T02:47:12.000Z</published>
    <updated>2022-07-22T05:06:13.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="1、java的8大基本数据类型"><a href="#1、java的8大基本数据类型" class="headerlink" title="1、java的8大基本数据类型"></a>1、java的8大基本数据类型</h2><p>名称      byte     short     int     long    float    double    char     boolean</p><p>大小    1            2            4        8               4         8</p><p>初始值   0         0            0        0            0.0        0.0                                false</p><h2 id="2、Java的三大特性"><a href="#2、Java的三大特性" class="headerlink" title="2、Java的三大特性"></a>2、Java的三大特性</h2><p>1)封装：隐藏内部功能的具体实现，只保留和外部交流数据的接口。例如汽车与发动机。</p><p>不必知道发动机的实现原理，只需要使用汽车给予的接口，插入钥匙</p><p>2）继承：一个对象可以从它的父类继承所有的通用的属性和方法，并在无需重新编写原来的类的情况下对这些功能进行扩展；最大的好处是实现代码的高效重用</p><p>3）多态：同一个动作作用于不同的对象所产生不同的行为。</p><h2 id="3、面向对象"><a href="#3、面向对象" class="headerlink" title="3、面向对象"></a>3、面向对象</h2><p>1）面向对象的核心，就是类和对象，java中的面向对象的思想：万物皆对象</p><p>2）类：是对一类事务的描述，是抽象的、看不见、摸不着</p><p>3）对象：是实际存在的该类事物的每个个体，也称为实例，是具体的</p><p>4）所以面向对象程序设计的重点是类的设计，而不是对象的设计。</p><p>5）类是对象的描述，对象是类的实例化</p><p>6）类不占内存，对象才占内存</p><h2 id="4、Java的特点"><a href="#4、Java的特点" class="headerlink" title="4、Java的特点"></a>4、Java的特点</h2><p>1）Java是面向对象的</p><p>2）跨平台性，一次编译，到处运行</p><p>3）多线程</p><p>4）Java有垃圾回收机制，简化开发</p><h2 id="5、JVM和字节码"><a href="#5、JVM和字节码" class="headerlink" title="5、JVM和字节码"></a>5、JVM和字节码</h2><p>JVM: Java虚拟机是运行Java字节码的虚拟机</p><p>JVM有针对不同系统的特定实现，目的是使用相同的字节码，它们都会给出相同的结果（一次编译，到处运行）</p><p>字节码：在Java中，JVM可以理解的代码就叫做字节码（即扩展名为.class的文件),它不面向任何特定的处理器，只面向虚拟机。Java语言通过字节码的方式，一定程度上解决了传统解释型语言执行效率低下的问题，同时又保留了解释型语言可移植的特点，所以Java程序运行时比较高效</p><h2 id="6、JDK与JRE"><a href="#6、JDK与JRE" class="headerlink" title="6、JDK与JRE"></a>6、JDK与JRE</h2><p>JDK: 是Java Development Kit，它是功能齐全的java SDK，它拥有JRE所拥有的一些，还有编译器和工具。它能够创建和编译程序。</p><p>JRE:是Java运行环境，它是运行已编译java程序所需的所有内容的集合，包括Java虚拟机，java类库。但是它不能用于创建新程序。</p><h2 id="7、StringBuilder和StringBuffer的区别"><a href="#7、StringBuilder和StringBuffer的区别" class="headerlink" title="7、StringBuilder和StringBuffer的区别"></a>7、StringBuilder和StringBuffer的区别</h2><p>1、它们都是可变长度的字符串</p><p>2、StringBuffer    线程安全    效率低</p><p>3、StringBuilder    线程不安全    效率高</p><h2 id="8、简单介绍下多态、重载、重写"><a href="#8、简单介绍下多态、重载、重写" class="headerlink" title="8、简单介绍下多态、重载、重写"></a>8、简单介绍下多态、重载、重写</h2><p>多态：是指同一个方法调用由于对象的不同可能会产生不同的行为</p><p>重载：是指一个类中可以定义多个方法名相同，但参数不同的方法。调用时，会根据不同的参数自动匹配对应的方法。</p><p>重写：必须存在继承关系，</p><p>重写的方法、返回值类型、参数列表必须与父类的方法保持一致</p><p>子类的访问修饰符不能低于父类方法的访问修饰符</p><h2 id="9、自动装箱和拆箱"><a href="#9、自动装箱和拆箱" class="headerlink" title="9、自动装箱和拆箱"></a>9、自动装箱和拆箱</h2><p>装箱：将基本类型用它们对应的引用类型包装起来；</p><p>拆箱：将包装类型转换为基本数据类型；</p><h2 id="10、String能被继承吗？"><a href="#10、String能被继承吗？" class="headerlink" title="10、String能被继承吗？"></a>10、String能被继承吗？</h2><p>public final class String implements java.io.Serializable, Comparable<String>, CharSequence</String></p><p>不能，他是被final修饰的。</p><p>底层是由数组实现，数组长度不可变</p><h2 id="11、简单介绍一下statis关键字"><a href="#11、简单介绍一下statis关键字" class="headerlink" title="11、简单介绍一下statis关键字"></a>11、简单介绍一下statis关键字</h2><p>static标记的变量或方法由整个类（所有实例）共享，可不必创建该类对象而直接使用；</p><p>static成员也称为类成员变量或静态变量</p><p>随着类的加载而加载</p><p>修饰属性：</p><p>​    无论创建多少次对象，都会去共享一个静态属性，存在静态域中和类同一级别</p><p>修饰方法：</p><p>也是存在于静态域中，可以使用类名.方法名去访问</p><p>静态方法只能访问静态成员，如果是非静态的，应该通过实例化对象的方式</p><p>静态方法不能以任何方式引用this关键字</p><h2 id="12、super和this"><a href="#12、super和this" class="headerlink" title="12、super和this"></a>12、super和this</h2><p>this: 1、当成员变量和局部变量重名，用关键字this来区分</p><p>2、this代表当前对象，this就是所存函数所属对象的引用</p><p>3、this（参数列表），调用本类中重载的构造函数，必须放在第一行</p><p>super：1、使用super调用父类的成员方法和属性</p><p>2、可以从子类构造方法中调用父类的构造方法，必须放在第一行</p><h2 id="13、equals和"><a href="#13、equals和" class="headerlink" title="13、equals和=="></a>13、equals和==</h2><p>==：基本数据类型比较的是值得大小</p><p>引用类型比较的是内存地址</p><p>equals：默认比较是否是用一个对象</p><p>例如String、Date等类对equals方法进行了重写的话，比较的是所指向的对象的内容</p><h2 id="14、关于常量池"><a href="#14、关于常量池" class="headerlink" title="14、关于常量池"></a>14、关于常量池</h2><p>当创建String类型的对象时，JVM先回在常量池中查找是否已经存在，如果已存在，就把它赋给当前引用。如果没有，就会在常量池中重新创建一个String对象。</p><h2 id="15、抽象类与接口"><a href="#15、抽象类与接口" class="headerlink" title="15、抽象类与接口"></a>15、抽象类与接口</h2><p>抽象类：</p><p>1、首先有构造方法</p><p>2、含有抽象方法的类必须被声明为抽象类</p><p>3、抽象类不能被实例化，子类必须重写父类的抽象方法</p><p>4、abstract不能修饰属性、构造器、private、static、final</p><p>5、一般类中不能定义抽象方法；抽象类中可以有抽象方法，也可以有非抽象方法；</p><p>6、抽象方法只有方法声明；没有方法实现；</p><p>接口：</p><p>1、特殊的抽象类</p><p>2、接口中包含的方法都是抽象方法，没有方法体</p><p>3、实现接口的类必须实现接口的全部方法</p><p>4、属性：private static final, 方法; public abstract</p><p>区别：</p><p>1、抽象类有构造器，接口没有</p><p>2、关键字不同</p><p>3、抽象类可以有非抽象方法，接口只能有抽象方法</p><p>4、抽象类可以定义static方法，接口不行</p><h2 id="16、Java中的比较器（Comparable、Comparator）"><a href="#16、Java中的比较器（Comparable、Comparator）" class="headerlink" title="16、Java中的比较器（Comparable、Comparator）"></a>16、Java中的比较器（Comparable、Comparator）</h2><p>1、这两个都是接口。</p><p>内部比较器：Comparable</p><p>外部比较器：Comparator</p><p>2、排序规则实现的方法不同</p><p>Comparable接口的方法：compareTo（object o）</p><p>Comparator接口的方法： compare（T o1， T  o2）</p><p>3、Comparable接口用于在类的设计中使用；设计初期，就实现这个接口，指定排序方式</p><p>Comparator接口用于类设计已经完成，根据需求新建排序类实现排序</p><h2 id="17、Java中的栈和堆"><a href="#17、Java中的栈和堆" class="headerlink" title="17、Java中的栈和堆"></a>17、Java中的栈和堆</h2><p>一、Java中的变量在内存中的分配</p><p>1、类变量（static）：在程序加载时系统就为它在堆中开辟了内存，堆中的内存地址存在在栈中</p><p>2、实例变量：当使用new时，使在堆中开辟相应的内存空间。当实例变量的引用丢失后，被GC列入可回收名单。</p><p>3、局部变量：当执行到它的时候，在栈中开辟内存，当局部变量一旦脱离作用域，内存立即释放。</p><p>二、堆内存用来存放由new创建的对象和数组，由GC来管理，然后在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存中的首地址</p><p>栈中这个变量就成了数组或对象的引用变量</p><p>三、总结</p><p>基本数据类型，局部变量都是存放在栈内存中，用完就消失，没有默认初始化值</p><p>new创建的实例化对象及数组，是存放在堆内存中的，用完之后靠GC不定期自动消除</p><p>堆内存中所有实体都有内存地址值，有默认初始化值；实体不再被指向时，GC自动消除</p><p>局部变量：存储在战争，必须显示的赋值</p><p>成员变量：存储在堆中，有默认初始值</p><h2 id="18、final、finally、finalize"><a href="#18、final、finally、finalize" class="headerlink" title="18、final、finally、finalize"></a>18、final、finally、finalize</h2><p>final: 1、修饰变量：被声明为final的变量必须在声明时给出变量的初始值，而在以后的引用中只能读取。</p><p>2、final声明方法：方法不能被重写</p><p>3、修饰类：不能被继承</p><p>finally：在异常处理类中作为一个必定会执行的语句块。</p><p>finalize：：java技术允许使用finalize方法在垃圾收集器对象从内存中清除出去之前做必要的清理工作</p><h2 id="19、数组和链表的区别"><a href="#19、数组和链表的区别" class="headerlink" title="19、数组和链表的区别"></a>19、数组和链表的区别</h2><p>1、存储位置上：数组逻辑上相邻的元素在物理存储位置上也相邻，而链表不一定；</p><p>2、存储空间上：数组是连续的一段内存空间，链表存放的内存空间可以使连续的，也可以使不连续的</p><p>3、长度可变性：数组长度一旦声明不可变，链表的长度是按照实际需求进行分配</p><p>数组的优点：随机范围性强，查找速度快</p><p>链表的优点：插入删除效率高</p><h2 id="20、为什么提出集合框架"><a href="#20、为什么提出集合框架" class="headerlink" title="20、为什么提出集合框架"></a>20、为什么提出集合框架</h2><p>数组的优点：1、长度不可变；2、存放对象的个数不确定</p><p>数组的缺陷：1、插入和删除效率低；2、可能浪费内存；3、必须有足够的内存空间；4、数组大小固定</p><p>链表的优点：1、插入删除速度快；2、内存利用率高；3.可扩展</p><p>链表的缺点：1、不能随机查找，必须从第一个开始便利，查找效率低</p><h2 id="21、集合的概述以及底层数据结构"><a href="#21、集合的概述以及底层数据结构" class="headerlink" title="21、集合的概述以及底层数据结构"></a>21、集合的概述以及底层数据结构</h2><ul><li>Collection接口<ul><li>List有序的 可重复的<ul><li>ArrayList：Object数组</li><li>LinkedList：双向链表（JDK1.6之前为循环链表，JDK1.7取消了循环）</li><li>Vector：Object数组</li></ul></li><li>Set 存储无序的 不可重复<ul><li>HashSet：基于HashMap实现的，底层采用HashMap来保存元素</li><li>LinkedHashSet：基于LinkedHashMap实现</li><li>TreeSet：红黑树（自平衡的排序二叉树）</li></ul></li></ul></li><li>Map接口key-value键值对<ul><li>HashMap： JDK8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是为了解决哈希冲突而存在的。JDK8以后在解决哈希冲突时有了较大得变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</li><li>LinkedHashMap：继承自HashMap，所以它的底层乃然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，LinkedHashMap在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关的逻辑</li><li>TreeMap：红黑树</li><li>HashTable:数组+链表组成的，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的</li></ul></li></ul><h2 id="22、并发与并行"><a href="#22、并发与并行" class="headerlink" title="22、并发与并行"></a>22、并发与并行</h2><p>并发：是指同一个时间段内多个任务同时都在执行，并且都没有执行结束。并发任务强调在一个时间段内同时执行，而一个时间段有多个单位时间累积而成，所以说并发的多个任务在单位时间内不一定同时在执行。</p><p>并行：是说在单位时间内多个任务同时在执行。</p><p>在多线程编程实践中，线程的个数往往多于CPU的个数，所以一般都称为多线程并发编程而不是多线程并行编程</p><h2 id="23、sleep和wait的区别"><a href="#23、sleep和wait的区别" class="headerlink" title="23、sleep和wait的区别"></a>23、sleep和wait的区别</h2><p>sleep()方法是线程类Thread的静态方法，让调用线程进入睡眠状态，让出执行机会给其他线程，等到休眠时间结束后，线程进入就绪状态和其他线程一起竞争cpu的执行时间。</p><p>因为sleep（）是static静态的方法，它不能改变对象的机锁，当一个synchronized快中调用了sleep（）方法，线程虽然进入休眠，但是对象的机锁没有被释放，其他线程依然无法访问这个对象。</p><p>wait（）是Object类的方法，当一个线程执行到wait方法时，它就会进入到一个和该线程相关的等待池，同时释放对象的机锁，使得其他线程能够访问，可以通过notify、notifyAll方法来唤醒等待的线程。</p><h2 id="24、线程的生命周期"><a href="#24、线程的生命周期" class="headerlink" title="24、线程的生命周期"></a>24、线程的生命周期</h2><p>新建-》就绪-》运行-》阻塞-》死亡</p><h2 id="25、什么是线程、进程"><a href="#25、什么是线程、进程" class="headerlink" title="25、什么是线程、进程"></a>25、什么是线程、进程</h2><p>进程：是程序的一次执行，是具有一定独立功能的程序关于某个数据集合上的一次运动活动，是操作系统资源分配和调度的最小单位</p><p>线程：是操作系统能够进行运算调度的最小单位，它包含在进程之中，是进程中实际运作单位。</p><p>两者关系：进程是指程序执行时的一个实例，线程是进程的一个实体；</p><p>线程必定也只属于一个进程，而进程可以拥有多个而且至少拥有一个线程</p><h2 id="26、线程和进程的区别"><a href="#26、线程和进程的区别" class="headerlink" title="26、线程和进程的区别"></a>26、线程和进程的区别</h2><p>进程：</p><ul><li>拥有独立的堆栈空间和数据端，系统开销大</li><li>由于进程之间是独立的特点，使得进程的安全性比较高，有独立的地址空间、一个进程崩溃，不影响其他进程</li><li>进程的通信机制相对复杂，比如管道、信号、消息队列、套接字等</li></ul><p>线程：</p><ul><li>线程拥有独立的堆栈空间，但是共享数据段，它们彼此之间使用相同的地址空间，比进程开销小</li><li>线程是一个进程中不同的执行路径 一个线程的死亡就等于整个进程的死亡</li><li>通信相对方便</li></ul><h2 id="27、图解进程线程"><a href="#27、图解进程线程" class="headerlink" title="27、图解进程线程"></a>27、图解进程线程</h2><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220719223512677.png" alt="image-20220719223512677"></p><p>从上图可以看出：一个进程中可以有多个线程，多个线程共享进程的堆和方法区资源，但是每个线程有自己的程序计数器、虚拟机栈和本地方法栈。</p><h2 id="28、什么是线程安全、为什么提出线程安全、如何实现？"><a href="#28、什么是线程安全、为什么提出线程安全、如何实现？" class="headerlink" title="28、什么是线程安全、为什么提出线程安全、如何实现？"></a>28、什么是线程安全、为什么提出线程安全、如何实现？</h2><p>当一个线程在操作共享资源时，未执行完毕的情况下，其他线程参与进来，导致共享资源出现安全问题</p><p>方式一：同步代码块</p><p>synchronized（同步监视器）{</p><p>​    同步的代码</p><p>}</p><p>同步监视器：可以由任何对象来承担，针对于实现的方式可以用对象，也可以采用this关键字。对于继承方式只能采用静态的对象。</p><p>方式二：同步方法</p><p>确保当中一个线程执行此方法时，其他线程等待知道当前线程执行完</p><h2 id="29、Thread类中的start（）和run（）方法有什么区别？"><a href="#29、Thread类中的start（）和run（）方法有什么区别？" class="headerlink" title="29、Thread类中的start（）和run（）方法有什么区别？"></a>29、Thread类中的start（）和run（）方法有什么区别？</h2><p>start（）方法被启动新创建的线程，而且start（）内部调用了run方法，这和直接调用run（）方法的效果不一样。</p><p>当你调用run（）方法的时候，只会是在原来的线程中调用，没有新的线程启动；start（）方法才会启动新线程</p><h2 id="30、Java中notify和notifyAll有什么区别？"><a href="#30、Java中notify和notifyAll有什么区别？" class="headerlink" title="30、Java中notify和notifyAll有什么区别？"></a>30、Java中notify和notifyAll有什么区别？</h2><p>notify（）方法不能唤醒某个具体的线程，所以只有一个线程在等待的时候它才有用武之地</p><p>而notifyAll（）方法唤醒所有线程并允许它们争夺锁确保了至少有一个线程能继续运行</p><h2 id="31、泛型是什么？为什么使用？"><a href="#31、泛型是什么？为什么使用？" class="headerlink" title="31、泛型是什么？为什么使用？"></a>31、泛型是什么？为什么使用？</h2><p>简单的说是一种标签，不确定的类型，用户使用的时候确定类型，是JDK1.5出现的新特性，用于解决安全问题，是一种安全机制。</p><p>好处：</p><ul><li>将运行时期会可能出现的异常转移到编译期</li><li>提高了安全性</li><li>避免了强制类型转换的麻烦</li></ul><h2 id="32、概述反射和序列化"><a href="#32、概述反射和序列化" class="headerlink" title="32、概述反射和序列化"></a>32、概述反射和序列化</h2><p>反射：</p><p>Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p><p>对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制；</p><p>序列化：</p><p>序列化可以理解成把对象转换为容易传输的格式的过程。</p><h2 id="33、序列化的好处？"><a href="#33、序列化的好处？" class="headerlink" title="33、序列化的好处？"></a>33、序列化的好处？</h2><p>方便保存对象。因为对象不能保存，所以可以序列化，将其保存。</p><h2 id="34、使用JDBC的过程"><a href="#34、使用JDBC的过程" class="headerlink" title="34、使用JDBC的过程"></a>34、使用JDBC的过程</h2><p>1、加载JDBC驱动程序</p><p>class.forName(“com.mysql.jdbc.Driver”);</p><p>2、提供JDBC连接的URL</p><p>jdbc:myql://localhost:3306/test?useUnicode=true&amp;chracterEncoding=utf-8;</p><p>3、创建数据库的连接</p><p>Connection con = DriverManager.getConnection(url, userrname, password)</p><p>4、实现PreparedStatement</p><p>PreparedStatement pastmt = con.prepareStatement(sql);</p><p>5、执行SQL语句</p><p>6、处理结果</p><p>7、关闭JDBC对象</p><h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><h2 id="1、什么是集合"><a href="#1、什么是集合" class="headerlink" title="1、什么是集合"></a>1、什么是集合</h2><ul><li>集合就是一个放数据的容器，准确的说是放数据对象引用的容器</li><li>集合类存放的都是对象的引用，而不是对象的本身</li><li>集合类型主要有3种：set（集）、list（列表）和map（映射）</li></ul><h2 id="2、集合的特点"><a href="#2、集合的特点" class="headerlink" title="2、集合的特点"></a>2、集合的特点</h2><p>集合的特点主要有如下两点：</p><ul><li>集合用于存储对象的容器，对象是用来封装数据，对象多了也需要存储集中式管理</li><li>和数组对比对象的大小不确定。因为集合是可变长度的。数组需要提前定义大小。</li></ul><h2 id="3、集合和数组的区别"><a href="#3、集合和数组的区别" class="headerlink" title="3、集合和数组的区别"></a>3、集合和数组的区别</h2><ul><li>数组是固定长度的；集合是可变长度的</li><li>数组可以存储基本数据类型，也可以存储引用数据类型；集合只能存储引用数据类型。</li><li>数组存储的元素必须是同一个数据类型；集合存储的对象可以是不同数据类型。</li></ul><h2 id="4、使用集合框架的好处"><a href="#4、使用集合框架的好处" class="headerlink" title="4、使用集合框架的好处"></a>4、使用集合框架的好处</h2><p>1、容量自增长</p><p>2、提供了高性能的数据结构和算法，使编码更轻松，提高了程序速度和质量</p><p>3、可以方便地扩展或改写集合，提高代码复用性和可操作性。</p><p>4、通过使用JDK自带的集合类，可以降低维护和学习新API成本。</p><h2 id="5、常用的集合类有哪些？"><a href="#5、常用的集合类有哪些？" class="headerlink" title="5、常用的集合类有哪些？"></a>5、常用的集合类有哪些？</h2><p>Map接口和Collection接口是所有集合框架的父接口：</p><ul><li>Collection接口的子接口包括：Set接口和List接口</li><li>Map接口的实现类主要有：HashMap、TreeMap、HashTable、ConcurrentHashMap以及Properties等</li><li>Set接口的实现类主要有：HashSet、TreeSet、LinkedHashSet等</li><li>List接口的实现类主要有：ArrayList、LinkedList、Stack以及Vector等</li></ul><h2 id="6、List、Set、Map三者的区别？"><a href="#6、List、Set、Map三者的区别？" class="headerlink" title="6、List、Set、Map三者的区别？"></a>6、List、Set、Map三者的区别？</h2><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220721095251345.png" alt="image-20220721095251345"></p><ul><li>Java容器分为Collection和Map两大类。Collection集合的子接口有Set、List、Queue三种子接口。我们比较常用的是Set、List，Map接口不是Collection的子接口</li><li>Collection集合主要有List和Set两大接口<ul><li>List： 一个有序（元素存入集合的顺序和取出的顺序一致）容器，元素可以重复，可以插入多个null元素，元素都有索引。常用的实现类有ArrayList、LinkedList和Vector。</li><li>Set：一个无序（存入和取出的顺序有可能不一致）容器，不可用存储重复元素，只允许一个null元素，必须保证元素唯一性。Set接口常用的实现类是HashSet、LinkedHashSet、TreeSet</li></ul></li><li>Map是一个键值对集合，存储键、值和之间的映射。key无序，唯一；value不要求有序，允许重复。Map没有继承雨collection接口。从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。<ul><li>Map的常用实现类：HashMap、ConcurrentHashMap、HashTable、TreeMap、LinkedHashMap</li></ul></li></ul><h2 id="7、集合框架底层数据结构"><a href="#7、集合框架底层数据结构" class="headerlink" title="7、集合框架底层数据结构"></a>7、集合框架底层数据结构</h2><ul><li><p>Collection</p><p>1.List</p><ul><li>ArrayList：Object数组</li><li>Vector： Object数组</li><li>LinkedList：  双向链表(JDK1.6之前为循环链表，JDK1.7取消了循环)</li></ul><p>2.Set</p><ul><li>HashSet（无序、唯一）：基于HashMap实现的，底层采用HashMap来保存元素</li><li>LinkedHashSet：LinkedHashSet继承于HashSet，并且其内部是通过LinkedHashMap来实现的。有点类似于我们之前说的LinkedHashMap其内部基于HashMap实现一样，不过还是有一点点区别的。</li><li>TreeSet（有序、唯一）：红黑树（自平衡的排序二叉树）</li></ul></li><li><p>Map</p><ul><li>HashMap：JDK1.8之前HashMap由数组+链表组成的，数组是HashMap的主体，链表则是为了解决哈希冲突而存在的（拉链法解决冲突），JDK1.8以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为8）时，将链表转化为红黑树，以减少搜索时间</li><li>LinkedHashMap：LinkedHashMap继承自HashMap，所有它的底层结构仍然是基于拉链式散列结构即由数组+链表或红黑树组成。另外，LinkedHashMap在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</li><li>HashTable：数组+链表组成的，数组是HashTable的主体，链表则是为了解决哈希冲突而存在的</li><li>TreeMap：红黑树（自平衡的排序二叉树）</li></ul></li></ul><h2 id="8、哪些集合类是线程安全的？"><a href="#8、哪些集合类是线程安全的？" class="headerlink" title="8、哪些集合类是线程安全的？"></a>8、哪些集合类是线程安全的？</h2><ul><li>Vector：就比ArrayList多了个synchronized（线程安全），因为效率低，现在已经不太建议使用。</li><li>hashTable: 就比HashMap多了个synchronized（线程安全），不建议使用</li><li>ConcurrentHashMap: 是Java5中支持高并发、高吞吐量的线程安全HashMap实现类。它由Segment数组结构和Hashentry数组结构组成。Segment的结构和HashMap类似，是一种数组和链表结构；一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素；每个Segment守护者一个HashEntry数组里的元素，当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁（推荐使用）</li></ul><h2 id="9、Java集合的快速失败机制”fail-fast“？"><a href="#9、Java集合的快速失败机制”fail-fast“？" class="headerlink" title="9、Java集合的快速失败机制”fail-fast“？"></a>9、Java集合的快速失败机制”fail-fast“？</h2><ul><li><p>是java集合的一种错误检测机制，当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制</p></li><li><p>例如：假设存在两个线程（线程1、线程2)，线程1通过Iterator在遍历集合A中的元素，在某个时候线程2修改了结合A的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出ConcurrentModificationException异常，从而产生fail-fast机制。</p></li><li><p>原因：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个modCount变量，集合在被遍历期如果内容发生变化，就会改变modCount的值。每当迭代器使用hashNext（）遍历下一个元素之前，都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历</p></li><li><p>解决方法：</p><p>1、在遍历过程中，所有涉及到改变modCount值的地方全部加上synchronized。</p><p>2、使用CopyOnWriteArrayList来替换ArrayList</p></li></ul><h2 id="10、怎么确保一个集合不能被修改？"><a href="#10、怎么确保一个集合不能被修改？" class="headerlink" title="10、怎么确保一个集合不能被修改？"></a>10、怎么确保一个集合不能被修改？</h2><ul><li><p>可以使用Collection.unmodififiableCollection(Collection c)方法来创建一个只读集合，这样改变集合的任何操作都会抛出java.lang.unsupportedOperationException异常。</p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list. add(<span class="string">"x"</span>);</span><br><span class="line">Collection&lt;String&gt; clist = Collections. unmodifiableCollection(list);</span><br><span class="line">clist. add(<span class="string">"y"</span>); <span class="comment">// 运行时此行报错</span></span><br><span class="line">System. out. println(list. size());</span><br></pre></td></tr></table></figure></li></ul><h2 id="11、迭代器-Iterator-是什么？"><a href="#11、迭代器-Iterator-是什么？" class="headerlink" title="11、迭代器 Iterator 是什么？"></a>11、迭代器 Iterator 是什么？</h2><ul><li><p>可以方便的对容器内的元素进行遍历</p></li><li><p>Iterator 接口提供遍历任何Collection的接口。我们可以从一个Collection中使用迭代器方法来获取迭代器实例。迭代器取代了java集合框架中的Enumeration，迭代器运行调用者在迭代过程中移除元素。</p></li><li>因为所有Collection接口继承了Iterator迭代器</li></ul><h2 id="12、Iterator-怎么使用？有什么特点？"><a href="#12、Iterator-怎么使用？有什么特点？" class="headerlink" title="12、Iterator 怎么使用？有什么特点？"></a>12、Iterator 怎么使用？有什么特点？</h2><p>Iterator 使用代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Iterator&lt;String&gt; it = list. iterator();</span><br><span class="line"><span class="keyword">while</span>(it. hasNext())&#123;</span><br><span class="line">String obj = it. next();</span><br><span class="line">System. out. println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator 的特点是只能单向遍历，但是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出ConcurrentModifificationException异常。</p><h2 id="13、如何边遍历边移除Collection中的元素？"><a href="#13、如何边遍历边移除Collection中的元素？" class="headerlink" title="13、如何边遍历边移除Collection中的元素？"></a>13、如何边遍历边移除Collection中的元素？</h2><ul><li><p>边遍历边修改Collection的唯一正确方式是使用Iterator.remove（）方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    it.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一种最常见的错误代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Integer i: list)&#123;</span><br><span class="line">    list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行以上错误代码会报ConcurrentModificationException异常，这是因为当使用foreach（for（integer i:list））语句时，会自动生成一个Iterator来遍历该list。但同时该list正在被Iterator。remove（）修改。java一般不允许一个线程在遍历Collection时另一个线程修改它。</li></ul><h2 id="14、Iterator-和-ListIterator有什么区别"><a href="#14、Iterator-和-ListIterator有什么区别" class="headerlink" title="14、Iterator 和 ListIterator有什么区别"></a>14、Iterator 和 ListIterator有什么区别</h2><ul><li>Iterator 可以遍历Set 和 List集合， 而ListIterator只能遍历List</li><li>Iterator 只能单向遍历，而ListIterator可以双向遍历。</li><li>ListIterator 实现Iterator接口，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。</li></ul><h2 id="15、遍历一个List有哪些不同的方式？每种方法的实现原理是什么？Java中List遍历的最佳实践是什么？"><a href="#15、遍历一个List有哪些不同的方式？每种方法的实现原理是什么？Java中List遍历的最佳实践是什么？" class="headerlink" title="15、遍历一个List有哪些不同的方式？每种方法的实现原理是什么？Java中List遍历的最佳实践是什么？"></a>15、遍历一个List有哪些不同的方式？每种方法的实现原理是什么？Java中List遍历的最佳实践是什么？</h2><ul><li><p>遍历方式有以下几种：</p><ul><li>for循环遍历，基于计数器。在集合外部维护一个计数器，然后依次读取每一个位置的元素，当读取到最后一个元素后停止。</li><li>迭代器遍历，Iterator。Iterator 是面向对象的一个设计模式，目的是屏蔽不同数据集合的特点，统一遍历集合的接口。Java在Collection中支持Iterator模式</li><li>foreach 循环遍历。foreach内部也是采用Iterator的方式实现。使用时不需要显式声明Iterator或计数器。优点是代码简洁，不易出错；缺点是只能做简单的遍历，不能在遍历过程中操作数据集合，例如删除、替换。</li></ul></li><li><p>最佳实践：Java Collections框架中提供了一个RandomAccess接口，用来标记List实现是否支持Random Access。</p><ul><li>如果一个数据集合实现了该接口，就意味着它支持Random Access，按位置读取元素的平均时间复杂度为O（1），如ArrayList。</li><li>如果没有实现该接口，表示不支持Random Access，如LInkedList</li><li>推荐的做法就是，支持Random Access的列表可用for循环遍历，否则建议使用Iterator 或 foreach遍历</li></ul></li></ul><h2 id="16、说一下-ArrayList-的优缺点？"><a href="#16、说一下-ArrayList-的优缺点？" class="headerlink" title="16、说一下 ArrayList 的优缺点？"></a>16、说一下 ArrayList 的优缺点？</h2><ul><li>ArrayList的优点如下：<ul><li>ArrayList 底层以数组实现，是一种随机访问模式。ArrayList 实现了 RandomAccess接口，因此查找的时候非常快。</li><li>ArrayList在顺序添加一个元素的时候非常方便。</li></ul></li><li>ArrayList的缺点如下：<ul><li>删除元素的时候，需要做一次元素复制操作。如果要复制的元素很多，那么就会比较耗费性能。</li><li>插入元素的时候，也需要做一次元素复制操作，缺点同上。</li></ul></li><li>ArrayList比价适合顺序添加、随机访问的场景。</li></ul><h2 id="17、如何实现数组和List之间的转换？"><a href="#17、如何实现数组和List之间的转换？" class="headerlink" title="17、如何实现数组和List之间的转换？"></a>17、如何实现数组和List之间的转换？</h2><ul><li>数组转List： 使用Arrays.asList(array)进行转换。</li><li>List转数组： 使用List自带的toArray（）方法。</li></ul><h2 id="18、ArrayList-和-LinkedList-的区别是什么？"><a href="#18、ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="18、ArrayList 和 LinkedList 的区别是什么？"></a>18、ArrayList 和 LinkedList 的区别是什么？</h2><ul><li>数据结构实现：ArrayList是动态数组的数据结构实现，而LinkedList是双向链表的数据结构实现。</li><li>随机访问效率： ArrayList比LinkedList在随机访问的时候效率要高，因为LinkedList是线程的数据存储方式，所以需要移动指针从前往后依次查找。</li><li>增加和删除效率： 在非收尾的增加和删除操作，LinkedList要比ArrayList效率要高，因为ArrayList增删操作要影响数组内其他数据的下标。</li><li>内存空间占用： LinkedList 比 ArrayList更占内存，因为LinkedList的节点除了存储数据，还存储两个引用，一个执行前一个元素，一个指向后一个元素。</li><li>线程安全： ArrayList 和LInkedList都是不同步的，也就是不保证线程安全；</li><li>综合来说，在需要频繁读取集合中的元素时，更推荐使用ArrayList，而在插入和删除操作较多时，更推荐使用LinkedList。</li><li>LinkedList的双向链表也叫双链表，是链表的一种，它的每一个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。</li></ul><h2 id="19、ArrayList-和-Vector-的区别是什么？"><a href="#19、ArrayList-和-Vector-的区别是什么？" class="headerlink" title="19、ArrayList 和 Vector 的区别是什么？"></a>19、ArrayList 和 Vector 的区别是什么？</h2><ul><li>这两个类都实现了List接口，它们都是有序集合<ul><li>线程安全： Vector使用了synchronized来实现线程同步，是线程安全的，而ArrayList是非线程安全的</li><li>性能： ArrayList 在性能方面要优于Vector</li><li>扩容： ArrayList 和 Vector都会根据实际的需要动态的调整容量，只不过在Vector扩容每次会增加一倍，而ArrayList只会增加50%。</li></ul></li><li>Vector类的所有方法都是同步的。可以由两个线程安全的访问一个vector对象、但是一个线程访问Vector的话代码要在同步操作上耗费大量的时间。</li><li>ArrayList不是同步的，所以在不需要保证线程安全时建议使用ArrayList。</li></ul><h2 id="20、插入数据时，ArrayList、LinkedList、Vector谁的速度较快？阐述ArrayList、Vector、LinkedList的存储性能和特性？"><a href="#20、插入数据时，ArrayList、LinkedList、Vector谁的速度较快？阐述ArrayList、Vector、LinkedList的存储性能和特性？" class="headerlink" title="20、插入数据时，ArrayList、LinkedList、Vector谁的速度较快？阐述ArrayList、Vector、LinkedList的存储性能和特性？"></a>20、插入数据时，ArrayList、LinkedList、Vector谁的速度较快？阐述ArrayList、Vector、LinkedList的存储性能和特性？</h2><ul><li>ArrayList和Vector底层的实现都是使用数组方式存储数据。数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素的移动等内存操作，所以索引数据快而插入数据慢。</li><li>Vector中的方法由于加了synchronized修饰，因此Vector是线程安全容器，但性能上较ArrayList差。</li><li>LinkedList使用双向链表实现存储，按序号索引数据需要进行向前或后遍历，但插入数据时只需要记录当前项的前后项即可，所以LInkedList插入速度较快。</li></ul><h2 id="21、多线程场景如何使用ArrayList？"><a href="#21、多线程场景如何使用ArrayList？" class="headerlink" title="21、多线程场景如何使用ArrayList？"></a>21、多线程场景如何使用ArrayList？</h2><ul><li>ArrayList不是线程安全的，如果遇到多线程场景，可以通过Collections的synchronizedList方法将其转换成线程安全的容器后再使用。</li></ul><h2 id="22、为什么ArrayList的elementData-加上-transient修饰？"><a href="#22、为什么ArrayList的elementData-加上-transient修饰？" class="headerlink" title="22、为什么ArrayList的elementData 加上 transient修饰？"></a>22、为什么ArrayList的elementData 加上 transient修饰？</h2><ul><li>ArrayList实现了Serializable接口，这意味着ArrayList支持序列化。transient的作用是说不希望elementData数组被序列化，重写了writeObject实现。</li><li>每次序列化时，先调用defaultWriteObject（）方法序列化ArrayList中的非transient元素，然后遍历elementData，只序列化已存入的元素，这样既加快了序列化的速度，又减少了序列化之后的文件大小。</li></ul><h2 id="23、List和Set的区别？"><a href="#23、List和Set的区别？" class="headerlink" title="23、List和Set的区别？"></a>23、List和Set的区别？</h2><h2 id="24、说一下HashSet的实现原理？"><a href="#24、说一下HashSet的实现原理？" class="headerlink" title="24、说一下HashSet的实现原理？"></a>24、说一下HashSet的实现原理？</h2><ul><li>HashSet 是基于HashMap实现的，HashSet的值存放与HashMap的key上，HashMap的value统一为present，因此HashSet的实现比较简单，相关HashSet的操作，基本上都是直接调用底层HashMap的相关方法来完成，HashSet不允许重复值</li></ul><h2 id="25、HashSet如何检查重复？HashSet是如何保证数据不可重复的？"><a href="#25、HashSet如何检查重复？HashSet是如何保证数据不可重复的？" class="headerlink" title="25、HashSet如何检查重复？HashSet是如何保证数据不可重复的？"></a>25、HashSet如何检查重复？HashSet是如何保证数据不可重复的？</h2><ul><li>向HashSet 中add（）元素时，判断元素是否存在的依据，不仅要比较hash值，同时还要结合equles（）方法比较。</li><li>HashSet中的add（）方法会使用HashMa的put方法</li><li>HashMap的key是唯一的，由源码可以看出HashSet添加进去的值就是作为HashMap的key，并且在HashMap中如果k/v相同时，会用新的V覆盖旧的V，然后返回旧的V。所以不会重复（hashMap比较key是否相等是先比较hashcode再比较equals）。</li></ul><h2 id="26、HashSet-和HashMap的区别"><a href="#26、HashSet-和HashMap的区别" class="headerlink" title="26、HashSet 和HashMap的区别"></a>26、HashSet 和HashMap的区别</h2><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220721150706066.png" alt="image-20220721150706066"></p><h2 id="27、什么是Hash算法"><a href="#27、什么是Hash算法" class="headerlink" title="27、什么是Hash算法"></a>27、什么是Hash算法</h2><ul><li>哈希算法是指把任意长度的二进制映射为固定长度的较小的二进制，这个较小的二进制值叫做哈希值</li></ul><h2 id="28、什么是链表"><a href="#28、什么是链表" class="headerlink" title="28、什么是链表"></a>28、什么是链表</h2><h2 id="29、说一下HashMap的实现原理？"><a href="#29、说一下HashMap的实现原理？" class="headerlink" title="29、说一下HashMap的实现原理？"></a>29、说一下HashMap的实现原理？</h2><ul><li>HashMap概述： HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键，此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</li><li>HashMap的数据结构：在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两种基本结构来构造的，hashMap也不例外。HashMap实际上是一个“链表散列的数据结构，即数组和链表的结合体</li><li>HashMap基于Hash算法实现的<ul><li>当我们往HashMap中put元素时，利用key的hashCode重新hash计算出当前对象的元素在数组中的下标</li><li>存储时，如果出现hash值相同的key，此时有两种情况<ul><li>如果key相同，则覆盖原始值</li><li>如果key不相同，则将当前的key-value放入链表中</li></ul></li><li>获取是，直接找到hash值对应的下标，在进一步判断key是否相同，从而找到对应值</li><li>理解了以上过程就不难明白hashMap是如何解决hash冲突的问题核心就是持有了数组的存储方式，然后将冲突的key的对象放入链表中，一旦发现冲突就在链表中做进一步的对比。</li></ul></li><li>需要注意jdk1.8中对HashMap的实现做了优化，当链表的节点数据超过8个以后，该链表会转为红黑树来提高查询效率，从原来的o（n)到O（logn）</li></ul><h2 id="30、HashMap在JDK1-7和JDK1-8中有哪些不同？hashmap的底层实现？"><a href="#30、HashMap在JDK1-7和JDK1-8中有哪些不同？hashmap的底层实现？" class="headerlink" title="30、HashMap在JDK1.7和JDK1.8中有哪些不同？hashmap的底层实现？"></a>30、HashMap在JDK1.7和JDK1.8中有哪些不同？hashmap的底层实现？</h2><ul><li>jdk1.8主要解决或优化了以下问题：<ul><li>resize扩容优化</li><li>引入了红黑树，目的是避免单条链表过长而影响效率，红黑树算法</li><li>解决了多线程死循环问题，但仍然是非线程安全的，多线程时可能会造成数据丢失问题。</li></ul></li></ul><h2 id="31、什么是红黑树？"><a href="#31、什么是红黑树？" class="headerlink" title="31、什么是红黑树？"></a>31、什么是红黑树？</h2><h2 id="32、HashMap的put方法的具体流程？"><a href="#32、HashMap的put方法的具体流程？" class="headerlink" title="32、HashMap的put方法的具体流程？"></a>32、HashMap的put方法的具体流程？</h2><h2 id="33、HashMap的扩容操作时怎么实现的？"><a href="#33、HashMap的扩容操作时怎么实现的？" class="headerlink" title="33、HashMap的扩容操作时怎么实现的？"></a>33、HashMap的扩容操作时怎么实现的？</h2><p>1、在jdk.8中，resize方法是在hashmap中的键值对大于阈值时或者初始化时，就调用resize方法进行扩容；</p><p>2、每次扩展的时候，都是扩展2倍</p><p>3、扩展后Node对象的位置要么在原来位置，要么移动到原偏移量两倍的位置。</p><h2 id="34、HashMap是怎么解决哈希冲突的？"><a href="#34、HashMap是怎么解决哈希冲突的？" class="headerlink" title="34、HashMap是怎么解决哈希冲突的？"></a>34、HashMap是怎么解决哈希冲突的？</h2><p>什么是哈希？</p><ul><li>Hash，一般翻译为“散列”，也有直接音译为“哈希”的，hash就是使用哈希算法是指把任意长度的二进制映射为固定长度的较小的二进制值，这个较小的二进制值叫做哈希值。</li></ul><p>什么是哈希冲突？</p><ul><li>当两个不同的输入值，根据同一散列函数计算出相同的散列值的现象，我们就把它叫做碰撞。</li></ul><p>总结解决哈希冲突方法：</p><ul><li>链表法就是将相同hash值的对象组织成一个链表放在hash值对应的槽位；</li><li>开放地址法是通过一个探测算法，当某个槽位已经被占据的情况下继续查找下一个可以使用的槽位。</li></ul><h2 id="35、能否使用任何类作为Map的key？"><a href="#35、能否使用任何类作为Map的key？" class="headerlink" title="35、能否使用任何类作为Map的key？"></a>35、能否使用任何类作为Map的key？</h2><p>可以使用任何类作为Map的key，然而在使用之前，需要考虑以下几点：</p><ul><li>如果类重写了equals（）方法，也应该重写hashCode方法</li><li>类的所有实例需要遵循与equals（）和hashcode()相关的规则</li><li>如果一个类没有使用equals（），不应该在hashcode()中使用它。</li><li>用户自定义key类最佳实践是使之为不可变得，这样hashCode（）值被缓存起来，拥有更好的性能。不可变的类也可以确保hashCode（）和equals（）在未来不会改变，这样就会解决与可变相关的问题了。</li></ul><h2 id="36、为什么hashMap中String、Interger这样的包装类适合作为K？"><a href="#36、为什么hashMap中String、Interger这样的包装类适合作为K？" class="headerlink" title="36、为什么hashMap中String、Interger这样的包装类适合作为K？"></a>36、为什么hashMap中String、Interger这样的包装类适合作为K？</h2><p>String、Integer等包装类的特性能够保证hash值的不可更改性和计算准确性，能够有效的减少Hash碰撞的几率</p><p>​    都是final类型，即不可变性，保证key的不可更改性，不会存在获取hash值不同的情况下</p><p>​    内部已重写了equals（）、hashCode（）等方法，遵守了HashMap内部的规范，不容易出现hash值计算错误的情况。</p><h2 id="37、如果使用Object作为HashMapd的Key，应该怎么办？"><a href="#37、如果使用Object作为HashMapd的Key，应该怎么办？" class="headerlink" title="37、如果使用Object作为HashMapd的Key，应该怎么办？"></a>37、如果使用Object作为HashMapd的Key，应该怎么办？</h2><p>重写hashCode（）和equals（）方法</p><p>1、重写hashCode（）是因为计算存储数据的存储位置，需要注意不用试图从散列码计算中排除一个对象的关键部分啦提高性能，这样虽然能更快但可能会导致更多的hash碰撞。</p><p>2、重写equals（）方法，需要遵守自反性、对称性、传递性、一致性以及对于任何非null的引用值x，x.equals（null）必须返回false的这几个特性，目的是为了保证key在哈希表中的唯一性</p><p>38、HashMap为什么不直接使用hashcode()处理后的哈希值直接作为table的下标？</p><ul><li>hashCode（）方法返回的是int整数类型，其范围是约有40亿个映射空间，而HashMap的容量服务是在16-2^30，hashMap通常情况下是取不到最大值的，并且设备上也难以提供这么多的存储空间，从而导致通过hashCode（）计算出的哈希值可能不在数组大小范围内，进而无法匹配存储位置。</li><li>那怎么解决？<ul><li>HashMap自己实现了自己的hash方法，通过两次扰动使得它自己的哈希值高低位自行进行异或运算，降低哈希碰撞概率也使得数据分布平均。</li><li>在保证数组长度为2的幂次方的时候，使用hash（）运算之后的值与预算来获取数组下标的方式进行存储，这样一来是比取余操作更加有效率，二来也是因为只有数组长度为2次幂时，h&amp;(length-1)才等于h%length，三来解决了哈希值与数组大小范围不匹配的问题。</li></ul></li></ul><h2 id="39、HashMap的长度为什么是2的幂次方？"><a href="#39、HashMap的长度为什么是2的幂次方？" class="headerlink" title="39、HashMap的长度为什么是2的幂次方？"></a>39、HashMap的长度为什么是2的幂次方？</h2><ul><li>为了能让HashMap存取高效，尽量较少碰撞，也就是尽量把数据分配均匀，每个链表/红黑树长度大致相同。这个实现就是把数据存到哪个链表/红黑树中的算法</li><li>hash%length = hash&amp;(length-1) 前提是length是2的n次方</li></ul><h2 id="40、HashMap与HashTabe有什么区别？"><a href="#40、HashMap与HashTabe有什么区别？" class="headerlink" title="40、HashMap与HashTabe有什么区别？"></a>40、HashMap与HashTabe有什么区别？</h2><p>1、线程安全：HashMap是非线程安全的，HashTable是线程安全；HashTable内部的方法基本都经过synchronized修饰。（如果你要保证线程安全的话就使用ConcurrentHashMap）；</p><p>2、效率：因为线程安全的问题，HashMap要比HashTable效率高一些。另外，HashTable基本被淘汰，不要在代码中使用它；</p><p>3、对Null key和Null value的支持：HashMap 中，null 可以作为键，这样的键只有一个，可以有一个或多个键所对应的值为 null。但是在 HashTable 中 put 进的键值只要有一个 null，直接抛NullPointerException。</p><p>4、初始容量大小和每次扩容容量大小的不同；</p><p>5、创建时如果不指定容量初始值，Hashtable 默认的初始大小为11，之后每次扩充，容量变为原来的2n+1。HashMap 默认的初始化大小为16。之后每次扩充，容量变为原来的2倍。</p><p>6、创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为2的幂次方大小。也就是说 HashMap 总是使用2的幂作为哈希表的大小，后面会介绍到为什么是2的幂次方。</p><p>7、底层数据结构：JDK1.8以后的HashMap在解决哈希冲突时有了较大的变化，当链表长度大于阈值时，将链表转化为红黑树，以减少搜索时间。HashTable没有这样的机制</p><p>8、推荐使用：推荐在单线程环境下使用HashMap替代，如果需要多线程使用则用ConcurrentHashMap替代</p><h2 id="41、什么是TreeMap？"><a href="#41、什么是TreeMap？" class="headerlink" title="41、什么是TreeMap？"></a>41、什么是TreeMap？</h2><ul><li>TreeMap是一个有的key-value集合，它是通过红黑树实现的</li><li>TreeMap基于红黑树实现。该映射根据其键的自然顺序进行排序，或者根据创建映射时提供的Comparator进行排序，具体取决于使用的构造方法。</li><li>TreeMap是线程非同步的。</li></ul><h2 id="42、如何决定使用HashMap还是TreeMap？"><a href="#42、如何决定使用HashMap还是TreeMap？" class="headerlink" title="42、如何决定使用HashMap还是TreeMap？"></a>42、如何决定使用HashMap还是TreeMap？</h2><ul><li>对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向hashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历</li></ul><h2 id="43、HashMap和ConcurrentHashMap的区别"><a href="#43、HashMap和ConcurrentHashMap的区别" class="headerlink" title="43、HashMap和ConcurrentHashMap的区别"></a>43、HashMap和ConcurrentHashMap的区别</h2><p>1、ConcurrentHashMap对整个数组进行了分割分段（Segment），然后在每一个分段上都用lock锁进行保护，相对于HashTable的synchronized锁的粒度更精细了一些，并发性能更好，而HashMap没有锁机制，不是线程安全的。（JDK1.8之后ConcurrentHashMap启用了一种全新的方式实现，利用CAS算法）</p><p>2、HashMap的键值对允许有null，但是concurrentHashMap都不允许。</p><h2 id="44、ConcurrentHashMap-和-HashTable的区别？"><a href="#44、ConcurrentHashMap-和-HashTable的区别？" class="headerlink" title="44、ConcurrentHashMap 和 HashTable的区别？"></a>44、ConcurrentHashMap 和 HashTable的区别？</h2><ul><li>ConcurrentHashMap 和 HashTable的区别主要体现在实现线程安全的方式上不同。<ul><li>底层数据结构：JDK1.7的ConcurrentHashMap底层采用分段的数组+链表实现，JDK1.8采用的数据结构跟HashMap1.8的结构一样，数组+链表/红黑树.HashTable和JDK1.8之前的HashMap的底层数据结构类似都是采用数组+链表的形式，数组是HashMap的主体，链表则是主要为了解决哈希冲突而存在的。</li><li>实现线程安全的方式<ul><li>在JDK1.7的时候，ConcurrentHashMap（分段锁）对整个数组进行了分割分段，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。到了JDK1.8的时候已经摈弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用synchronized和CAS来操作。整个看起来就像是优化过且线程安全的HashMap，虽然JDK1.8中还能看到Segment的数据结构，但是已经简化了属性，只是为了兼容旧版本；</li><li>HashTable（同一把锁）：使用synchronized来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用put添加元素，另一个线程不能使用put添加元素，也不能使用get，竞争会越来越激烈。</li></ul></li></ul></li></ul><h2 id="45、ConcurrentHashMap底层具体实现知道吗？实现原理是什么？"><a href="#45、ConcurrentHashMap底层具体实现知道吗？实现原理是什么？" class="headerlink" title="45、ConcurrentHashMap底层具体实现知道吗？实现原理是什么？"></a>45、ConcurrentHashMap底层具体实现知道吗？实现原理是什么？</h2><h2 id="46、Array-和-ArrayList有何区别？"><a href="#46、Array-和-ArrayList有何区别？" class="headerlink" title="46、Array 和 ArrayList有何区别？"></a>46、Array 和 ArrayList有何区别？</h2><ul><li>Array 可以存储基本数据类型和对象，ArrayList 只能存储对象。</li><li>Array是指定固定大小的，而ArrayList大小是自动扩展的</li><li>Array内置方法没有ArrayList多，比如addAll、removeAll、iteration等方法只有ArrayList有</li></ul><h2 id="47、如何实现ArrayList-和-List之间的转换？"><a href="#47、如何实现ArrayList-和-List之间的转换？" class="headerlink" title="47、如何实现ArrayList 和 List之间的转换？"></a>47、如何实现ArrayList 和 List之间的转换？</h2><ul><li>Array 转 List。Arrays.asList(array)</li><li>List 转 Array：List的toArray（）方法</li></ul><h2 id="48、comparable-和-comparator的区别？"><a href="#48、comparable-和-comparator的区别？" class="headerlink" title="48、comparable 和 comparator的区别？"></a>48、comparable 和 comparator的区别？</h2><p>已经在其他问题处答</p><h2 id="49、Collection-和-Collections有什么区别？"><a href="#49、Collection-和-Collections有什么区别？" class="headerlink" title="49、Collection 和 Collections有什么区别？"></a>49、Collection 和 Collections有什么区别？</h2><ul><li>Collection是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在java类库中有很多具体的实现。Collection接口的意义是为了各种具体的集合提供了最大化的统一操作方式，其直接继承接口有List和Set</li><li>Collections则是集合类的一个工具类/帮助类,其中提供了一系列静态方法，用于对集合元素进行排序、搜索以及线程安全等各种操作。</li></ul><h2 id="50、TreeMap-和-TreeSet-在排序时如何比较元素？Collections-工具类中的-sort-方法如何比较元素？"><a href="#50、TreeMap-和-TreeSet-在排序时如何比较元素？Collections-工具类中的-sort-方法如何比较元素？" class="headerlink" title="50、TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？"></a>50、TreeMap 和 TreeSet 在排序时如何比较元素？Collections 工具类中的 sort()方法如何比较元素？</h2><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220721221916087.png" alt="image-20220721221916087"></p><h2 id="51、Collection-和-Collections有什么区别"><a href="#51、Collection-和-Collections有什么区别" class="headerlink" title="51、Collection 和 Collections有什么区别"></a>51、Collection 和 Collections有什么区别</h2><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><p>1、什么情况下会发生栈内存溢出。</p><p>思路：描述栈定义。再描述为什么溢出，再说明一下相关配置参数。ok的话可以给面试官手写一个栈溢出的demo</p><p>答案：</p><ul><li>栈是线程私有的，它的生命周期与线程相同，每个方法在执行的时候都会创建一个栈帧，用来存储局部变量表，操作数栈，动态链接，方法出口等信息。局部变量表又包含基本数据类型，对象引用类型</li><li>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常，方法递归调用产生这种结果。</li><li>如果java虚拟机栈可以动态扩展，并且扩展的动作已经尝试过，但是无法申请到足够的内存去完成扩展，或者在新建立线程的时候没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将抛出一个OutOfMemory异常，（线程启动太多）</li><li>参数-Xss去调整JVM的大小</li></ul><p>2、详解JVM内存模型.</p><h1 id="数据库篇"><a href="#数据库篇" class="headerlink" title="数据库篇"></a>数据库篇</h1><h2 id="1、数据库的基本操作"><a href="#1、数据库的基本操作" class="headerlink" title="1、数据库的基本操作"></a>1、数据库的基本操作</h2><p>见如下连接</p><p><a href="http://tropicalforest.top/2022/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#more" target="_blank" rel="noopener">http://tropicalforest.top/2022/07/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/#more</a></p><h2 id="2、Mysql底层采用什么数据结构来存储数据"><a href="#2、Mysql底层采用什么数据结构来存储数据" class="headerlink" title="2、Mysql底层采用什么数据结构来存储数据"></a>2、Mysql底层采用什么数据结构来存储数据</h2><p>B-树、平衡树</p><h2 id="3、分页所用的关键字"><a href="#3、分页所用的关键字" class="headerlink" title="3、分页所用的关键字"></a>3、分页所用的关键字</h2><p>MySql：</p><p>mysql中使用 LIMIT</p><p>select * from students limit 0,10 从第0条开始查，一共查询10条记录</p><h2 id="4、SQL实现数据表的复制"><a href="#4、SQL实现数据表的复制" class="headerlink" title="4、SQL实现数据表的复制"></a>4、SQL实现数据表的复制</h2><p>select into from 和 insert into select.</p><p>两种主要区别：</p><p>select into from要求目标表不存在，因为在插入时会自动创建</p><p>insert into select 要求目标表存在</p><p>两种的语法：</p><p>select  value1, value2 into  table2 from table1</p><p>insert into table2(field1,field2) select value1, value2 from table1</p><h2 id="5、什么是事务？"><a href="#5、什么是事务？" class="headerlink" title="5、什么是事务？"></a>5、什么是事务？</h2><p>事务是并发控制的基本单位。所谓事务，它是一个操作序列，这些操作要么都执行，要么都不执行，它是一个不可分割的工作单位。</p><h2 id="6、事务的四大特性？"><a href="#6、事务的四大特性？" class="headerlink" title="6、事务的四大特性？"></a>6、事务的四大特性？</h2><ul><li>原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态</li><li>隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ul><h2 id="7、什么是存储过程"><a href="#7、什么是存储过程" class="headerlink" title="7、什么是存储过程"></a>7、什么是存储过程</h2><p>存储过程可以说是一个记录集，也可以认为是一个方法，它是有一些SQL语句组成的代码块，</p><p>这些SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用它即可。</p><h2 id="9、简单介绍一下触发器？"><a href="#9、简单介绍一下触发器？" class="headerlink" title="9、简单介绍一下触发器？"></a>9、简单介绍一下触发器？</h2><p>触发器是由insert、update和delete等事件来触发某种特定操作。</p><p>满足触发器的触发条件时，数据库系统就会执行触发器中定义的程序语句。这样做可以保证某些操作之间的一致性。</p><p>例如：在执行完一条语句时，触发查询所有，保证信息完整性</p><h2 id="10、什么是E-R图"><a href="#10、什么是E-R图" class="headerlink" title="10、什么是E-R图"></a>10、什么是E-R图</h2><p>E-R图中包含了实体、关系和属性3中基本成分；</p><p>通常用矩形表示实体，用连接相关实体的菱形框表示关系，用椭圆形或圆角矩形表示实体的属性，并用直线把实体及其属性连接其他。</p><p>三中联系：</p><p>1:1</p><p>1：N</p><p>M:N</p><h2 id="11、什么是外连接、内连接？"><a href="#11、什么是外连接、内连接？" class="headerlink" title="11、什么是外连接、内连接？"></a>11、什么是外连接、内连接？</h2><p>内连接：根据连接条件只保留两个表中有对应数据的记录</p><p>外连接：当一个表中记录在另一个表中没有记录时，会生成一条与NULL值对应的记录</p><h2 id="12、什么是索引？有什么用？"><a href="#12、什么是索引？有什么用？" class="headerlink" title="12、什么是索引？有什么用？"></a>12、什么是索引？有什么用？</h2><p>索引相当于目录，可以更加方便地用于查询</p><h2 id="13、范式"><a href="#13、范式" class="headerlink" title="13、范式"></a>13、范式</h2><ul><li>第一范式（<strong>确保每列保持原子性</strong>）<ul><li>第一范式（1NF）要求数据库表的每一个列都是不可分割的基本数据项，同一列中不能有多个值。</li><li>若某一列有多个值，可以将该列单独拆分成一个实体，新实体和原实体间是一对多的关系。</li><li>在任何一个关系数据库中，第一范式是对关系模式的基本要求，不满足第一范式的数据库就不是关系数据库</li></ul></li><li>第二范式<strong>(确保表中的每列都和主键相关)</strong><ul><li>满足第二范式（2NF）必须先满足第一范式（1NF）</li><li>第二范式要求实体中每一行的所有非属性都必须完全依赖于主键；即非主属性必须完全依赖于主键</li><li>完全依赖：主键可能由多个属性构成，完全依赖要求不允许存在非主属性依赖于主键中的某一部分属性。若存在哪个非主属性依赖于主键中的一部分属性，那么要讲发生部分依赖的这一组属性单独新建一个实体，并且在旧实体中用外键与新实体关联，并且新实体与旧实体是一对多的关系。</li></ul></li><li>第三范式<strong>(确保每列都和主键列直接相关,而不是间接相关)</strong><ul><li>满足第三范式（3NF）必须先满足第二范式（2NF）</li><li>第三范式要求：实体中的属性不能是其他实体中非主属性。因为这样会出现冗余。即属性不依赖与其他非主属性。</li><li>如果一个实体中出现其他实体的非主属性，可以将这两个实体用外键关联，而不是将另一张表的非主属性直接写在当前表中。</li></ul></li></ul><h1 id="数据结构篇"><a href="#数据结构篇" class="headerlink" title="数据结构篇"></a>数据结构篇</h1><h2 id="1、二分查找算法"><a href="#1、二分查找算法" class="headerlink" title="1、二分查找算法"></a>1、二分查找算法</h2><p>二分查找算法，该方法中有三个变量，分别是low,high,mid.分别表示二分查找的最小、中间和最大的数据索引。通过一个while循环来查找数据，要查找的数据大于中间位置的数据时，即最大索引位置不变，最小索引位置变为上次循环中间位置+1；要查找的数据小于中间位置的数据时，即最小索引位置不变，最大索引位置变为上次循环位置-1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> []array, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> high = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        mid = (high - low)/<span class="number">2</span> + low;</span><br><span class="line">        <span class="keyword">if</span>(array[mid] == a)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a&gt;array[mid])&#123;</span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            high = mid-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、冒泡排序算法"><a href="#2、冒泡排序算法" class="headerlink" title="2、冒泡排序算法"></a>2、冒泡排序算法</h2><p>冒泡排序算法是一种较为简单的排序算法，它在重复访问要排序的元素列时，会依次比较相邻的两个元素，如果左边的元素大于右边的元素，就将二者交换位置，如此重复，直到没有相邻的元素需要交换位置，这时该列表的元素排序完成。</p><p>该算法名称的由来是越大的元素会经过交换慢慢“浮”到数组的顶端，就如同水的气泡最终会上浮到顶端一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">    <span class="comment">//外层循环控制排序趟数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length -<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//内层循环控制每一趟排序次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr(j+<span class="number">1</span>))&#123;</span><br><span class="line">                  <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">             arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                  arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、插入排序算法"><a href="#3、插入排序算法" class="headerlink" title="3、插入排序算法"></a>3、插入排序算法</h2><p>插入排序算法是一种简单、直观且稳定的排序算法。如果要在一个已排好序的数据序列中插入一个数据，但要求此数据序列在插入数据后乃然有序，就要用到插入排序法。</p><p>插入排序的基本思路是将一个数据插入已经排好序的序列中，从而得到一个新的有序数据，该算法适用于数据量较少的序列的排序，是稳定地排序方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span> arr[])&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="comment">//插入的数</span></span><br><span class="line">        <span class="keyword">int</span> insertVal = arr[i];</span><br><span class="line">        <span class="comment">//被插入的位置（准备和前一个数进行比较）</span></span><br><span class="line">        <span class="keyword">int</span> index = i-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//如果插入的数比被插入的数小</span></span><br><span class="line">        <span class="keyword">while</span>(index&gt;=<span class="number">0</span> &amp;&amp; insertVal&lt;arr[index])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//则将arr[index]向后运动</span></span><br><span class="line">            arr[index+<span class="number">1</span>] = arr[index];</span><br><span class="line">            <span class="comment">//将index向前运动</span></span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将插入的数放在合适的位置</span></span><br><span class="line">        arr[index+<span class="number">1</span>]=insertVal;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、快速排序算法"><a href="#4、快速排序算法" class="headerlink" title="4、快速排序算法"></a>4、快速排序算法</h2><p>快速排序是对冒泡排序的一种改造，通过一趟排序将要排序的数据序列分成独立的两部分，其中一部分的所有数据比另一部分的所有数据都要小，然后按此方法对两部分数据分别进行快速排序，整个排序过程递归进行，最终使整个数据序列变成有序的数据序列。</p><p>快速排序算法的原理</p><p>快速排序算法的原理：选择一个关键值作为基准值（一般选择第一个元素为基准值元素），将比基准值大的值的都放在右边的序列中，将比基准值小的都放在左边的序列中。具体的循环过程如下。</p><p>（1）从后向前比较，用基准值和最后一个值进行比较。如果比基准值小，则交换位置；如果比基准值大，则继续比较下一个值，直到找到第1个比基准值小的值才交换位置。</p><p>（2）在从后向前找到第1个比基准值小的值并交换位置后，从前往后开始比较，如果有比基准值大的，则交换位置；如果没有，则继续比较下一个，知道找到第1个比基准值大的值才交换位置。</p><p>（3）重复执行以上过程，直到从前向后比较的索引大于从后向前比较的索引，则结束一次循环。这是对于基准值来说，左右两边都是有序的数据序列。</p><p>（4）重复循环以上过程，分别比较左右两边的序列，直到整个数据序列有效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low, <span class="keyword">int</span> high)&#123;</span><br><span class="line">    <span class="keyword">int</span> start = low;<span class="comment">//从前向后的比较的索引</span></span><br><span class="line">    <span class="keyword">int</span> end = high;<span class="comment">//从后向前比较的索引</span></span><br><span class="line">    <span class="keyword">int</span> key = arr[low];<span class="comment">//基准值</span></span><br><span class="line">    <span class="keyword">while</span>(end&gt;start)&#123;</span><br><span class="line">        <span class="comment">//从后向前比较</span></span><br><span class="line">        <span class="keyword">while</span>(end&gt;start &amp;&amp; arr[end]&gt;=key)</span><br><span class="line">            end--;</span><br><span class="line">        <span class="comment">//如果没有比基准值小的，则比较下一个，直到有比基准值小的，则交换为位置，然后又从前向后比较</span></span><br><span class="line">        <span class="keyword">if</span>(arr[end]&lt;=key)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[end];</span><br><span class="line">            arr[end] = arr[start];</span><br><span class="line">            arr[start] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从前向后比较</span></span><br><span class="line">          <span class="keyword">while</span>(end&gt;start &amp;&amp; arr[start]&lt;=key)</span><br><span class="line">            start++;</span><br><span class="line">        <span class="comment">//如果没有比基准值大的，则比较下一个，直到有比基准值大的，则交换为位置</span></span><br><span class="line">        <span class="keyword">if</span>(arr[start]&gt;=key)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此时第1次循环比较结束，基准值的位置已经确定，左边的值都比基准值小。</span></span><br><span class="line">        <span class="comment">//右边的值都比基准值大，都是两边的顺序还有可能不一样，接着进行下面的递归调用。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归左边序列，从第1个索引位置到“基准值索引-1”</span></span><br><span class="line">    <span class="keyword">if</span>(start&gt;low) quickSort(arr,low,start-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//递归右边序列，从“基准值索引+1”到最后一个位置</span></span><br><span class="line">    <span class="keyword">if</span>(end&lt;high) quickSort(arr,end+<span class="number">1</span>,high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、希尔排序算法"><a href="#5、希尔排序算法" class="headerlink" title="5、希尔排序算法"></a>5、希尔排序算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">## 6、归并排序算法</span><br><span class="line"></span><br><span class="line">```java</span><br></pre></td></tr></table></figure><h2 id="7、桶排序算法"><a href="#7、桶排序算法" class="headerlink" title="7、桶排序算法"></a>7、桶排序算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">## 8、基数排序算法</span><br><span class="line"></span><br><span class="line">```java</span><br></pre></td></tr></table></figure><h2 id="9、什么是红黑树？"><a href="#9、什么是红黑树？" class="headerlink" title="9、什么是红黑树？"></a>9、什么是红黑树？</h2><p>红黑树，Red-Black Tree 「RBT」是一个自平衡(不是绝对的平衡)的二叉查找树(BST)。</p><p>前面讲到红黑树能自平衡，它靠的是什么？</p><blockquote><p>三种操作：左旋、右旋和变色。</p></blockquote><p>，都是在进行插入和删除操作时通过特定操作保持二叉查找树的平衡，从而获得较高的查找性能。 </p><p>红黑树的性质（规则）</p><p>红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：</p><blockquote><p> <em>性质1：每个节点要么是黑色，要么是红色。</em></p><p>  <em>性质2：根节点是黑色。</em>  </p><p><em>性质3：每个叶子节点（NIL）是黑色。</em> </p><p> <strong><em>性质4：每个红色结点的两个子结点一定都是黑色。</em></strong></p><p>  <strong><em>性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。（保证这棵树尽量是平衡的。）</em></strong></p></blockquote><h1 id="计算机网络篇"><a href="#计算机网络篇" class="headerlink" title="计算机网络篇"></a>计算机网络篇</h1><h2 id="1、TCP和UDP"><a href="#1、TCP和UDP" class="headerlink" title="1、TCP和UDP"></a>1、TCP和UDP</h2><p>TCP：面向有连接的，三次握手机制；传输的数据大小无限制；安全可靠协议；效率低，区分客户端和服务器</p><p>UDP：是面向无连接的，发送的数据是通过数据报包的形式，不超过64k；不安全协议，效率高；不区分客户端和服务器。</p><h2 id="2、三次握手-四次挥手？"><a href="#2、三次握手-四次挥手？" class="headerlink" title="2、三次握手 四次挥手？"></a>2、三次握手 四次挥手？</h2><p><a href="https://blog.csdn.net/qq_53847859/article/details/124110476?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-124110476-blog-78226816.pc_relevant_sortByStrongTime&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-124110476-blog-78226816.pc_relevant_sortByStrongTime&amp;utm_relevant_index=1" target="_blank" rel="noopener">https://blog.csdn.net/qq_53847859/article/details/124110476?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-124110476-blog-78226816.pc_relevant_sortByStrongTime&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-124110476-blog-78226816.pc_relevant_sortByStrongTime&amp;utm_relevant_index=1</a></p><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220720165611455.png" alt="image-20220720165611455"></p><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220720165628961.png" alt="image-20220720165628961"></p><h2 id="3、网络的七层协议？"><a href="#3、网络的七层协议？" class="headerlink" title="3、网络的七层协议？"></a>3、网络的七层协议？</h2><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220720170041060.png" alt="image-20220720170041060"></p><div class="table-container"><table><thead><tr><th style="text-align:left">OSI中的层</th><th style="text-align:left">功能</th><th style="text-align:left">TCP/IP协议族</th></tr></thead><tbody><tr><td style="text-align:left">应用层</td><td style="text-align:left">文件传输、电子邮件、文件服务等</td><td style="text-align:left">TFTP、HTTP、FTP、SMTP、DNS、Telnet、SNMP</td></tr><tr><td style="text-align:left">表示层</td><td style="text-align:left">数据格式化、代码转换、数据加密</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">会话层</td><td style="text-align:left">解除或建立与别的结点的联系</td><td style="text-align:left">无</td></tr><tr><td style="text-align:left">传输层</td><td style="text-align:left">提供端对端的接口</td><td style="text-align:left">TCP、UDP</td></tr><tr><td style="text-align:left">网络层</td><td style="text-align:left">为数据包选择路由</td><td style="text-align:left">IP、ICMP、OSPF、BGP、ARP、RARP</td></tr><tr><td style="text-align:left">数据链路层</td><td style="text-align:left">传输有地址的帧以及错误检测功能</td><td style="text-align:left">SLIP、CSLIP、PPP、MTU、ARP、RARP</td></tr><tr><td style="text-align:left">物理层</td><td style="text-align:left">以二进制数据形式在屋里媒体上传输数据</td><td style="text-align:left">ISO2110、IEEE802、IEEE802.2</td></tr></tbody></table></div><h2 id="4、当在浏览器输入栏按下回车会发生什么"><a href="#4、当在浏览器输入栏按下回车会发生什么" class="headerlink" title="4、当在浏览器输入栏按下回车会发生什么"></a>4、当在浏览器输入栏按下回车会发生什么</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>回车键按下后，浏览器会对输入的地址数据进行解析</span><br><span class="line"><span class="number">2.</span>进行DNS（域名服务器 UDP的）递归查询</span><br><span class="line"><span class="number">3.</span>使用套接字进行数据访问</span><br><span class="line"><span class="number">4.</span>建立TCP连接（三次握手）</span><br><span class="line"><span class="number">5.</span>浏览器处理数据</span><br></pre></td></tr></table></figure><h2 id="5、邮件服务器之间传送邮件通常使用什么协议，它们分别使用哪个端口，简述其功能。"><a href="#5、邮件服务器之间传送邮件通常使用什么协议，它们分别使用哪个端口，简述其功能。" class="headerlink" title="5、邮件服务器之间传送邮件通常使用什么协议，它们分别使用哪个端口，简述其功能。"></a>5、邮件服务器之间传送邮件通常使用什么协议，它们分别使用哪个端口，简述其功能。</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">邮件服务器之间常用邮件协议 SMTP POP3 IMAP。</span><br><span class="line"><span class="quote">&gt; SMTP:的一个重要特点是它能够在传送中接力传送邮件，即邮件可以通过不同网络上的主机接力式传送。工作在两种情况下：一是电子邮件从客户机传输到服务器；二是从某一个服务器传输到另一个服务器。SMTP是个请求/响应协议，它监听25号端口，用于接收用户的Mail请求，并与远端Mail服务器建立SMTP连接。</span></span><br><span class="line"><span class="quote">&gt; POP3:仍采用Client/Server工作模式，当客户机需要服务时，客户端的软件将与POP3服务器建立TCP连接，此后要经过POP3协议的三种工作状态，首先是认证过程，确认客户机提供的用户名和密码，在认证通过后便转入处理状态，在此状态下用户可收取自己的邮件或做邮件的删除，在完成响应的操作后客户机便发出quit命令，此后便进入更新状态，将做删除标记的邮件从服务器端删除掉,到此为止整个POP过程完成。</span></span><br><span class="line"><span class="quote">&gt; IMAP:主要提供的是通过Internet获取信息的一种协议。IMAP像POP那样提供了方便的邮件下载服务，让用户能进行离线阅读，但IMAP能完成的却远远不只这些。IMAP提供的摘要浏览功能可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定</span></span><br></pre></td></tr></table></figure><h1 id="web篇"><a href="#web篇" class="headerlink" title="web篇"></a>web篇</h1><h2 id="1、表单中post和get的区别？"><a href="#1、表单中post和get的区别？" class="headerlink" title="1、表单中post和get的区别？"></a>1、表单中post和get的区别？</h2><p>get：</p><p>​    1、不能传递敏感数据</p><p>​    2、不能传递大量的数据，每次只能传递1024B</p><p>​    3、不能上传附件</p><p>post：</p><p>​    1、相对安全</p><p>​    2、可以上传海量数据</p><p>​    3、可以上传附件</p><h2 id="2、什么是Ajax，好处是什么"><a href="#2、什么是Ajax，好处是什么" class="headerlink" title="2、什么是Ajax，好处是什么"></a>2、什么是Ajax，好处是什么</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。</span><br><span class="line">这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</span><br></pre></td></tr></table></figure><h2 id="3、九大内置对象"><a href="#3、九大内置对象" class="headerlink" title="3、九大内置对象"></a>3、九大内置对象</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter out 输出服务器响应的输出流对象；</span><br><span class="line">Object<span class="built_in"> page </span> JSP页面本身；</span><br><span class="line">PageContext pageContext  通过该对象可以获取其他对象；</span><br><span class="line">HttpServletRequest request  封装客户端的请求，其中包含来自GET或POST请求的参数；</span><br><span class="line">HttpServletResponse response  封装服务器对客户端的响应；</span><br><span class="line">HttpSession session  封装用户会话的对象；</span><br><span class="line">ServletContext application  封装服务器运行环境的对象--全局变量；</span><br><span class="line">Exception exception  封装页面抛出异常的对象；</span><br><span class="line">ServletConfig<span class="built_in"> config </span> Web应用的配置对象。</span><br></pre></td></tr></table></figure><h2 id="4、转发-Forward-和重定向-Redirect-的区别"><a href="#4、转发-Forward-和重定向-Redirect-的区别" class="headerlink" title="4、转发(Forward)和重定向(Redirect)的区别"></a>4、转发(Forward)和重定向(Redirect)的区别</h2><blockquote><p><strong>转发是服务器行为，重定向是客户端行为</strong>。<br><strong>转发</strong>（Forward） 通过RequestDispatcher对象的forward（HttpServletRequest request,HttpServletResponse response）方法实现的。RequestDispatcher可以通过HttpServletRequest 的getRequestDispatcher()方法获得。例如下面的代码就是跳转到success.jsp页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(<span class="string">"success.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><p><strong>重定向</strong>（Redirect） 是利用服务器返回的状态码来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过 HttpServletResponse 的 setStatus(int status) 方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。</p></blockquote><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">从地址栏显示来说</span><br><span class="line">forward是服务器请求资源,服务器直接访问目标地址的URL,把URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器不知道服务器发送的内容从哪里来的,所以地址栏还是原来的地址. </span><br><span class="line">redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</span><br><span class="line"></span><br><span class="line">从数据共享来说</span><br><span class="line"><span class="symbol">forward:</span>转发页面和转发到的页面可以共享request里面的数据.</span><br><span class="line"><span class="symbol">redirect:</span>不能共享数据.</span><br><span class="line"></span><br><span class="line">从运用地方来说</span><br><span class="line"><span class="symbol">forward:</span>一般用于用户登陆的时候,根据角色转发到相应的模块. </span><br><span class="line"><span class="symbol">redirect:</span>一般用于用户注销登陆时返回主页面和跳转到其它的网站等</span><br><span class="line"></span><br><span class="line">从效率来说</span><br><span class="line"><span class="symbol">forward:</span>高. </span><br><span class="line"><span class="symbol">redirect:</span>低.</span><br></pre></td></tr></table></figure><h2 id="5、cookie和session"><a href="#5、cookie和session" class="headerlink" title="5、cookie和session"></a>5、cookie和session</h2><p><strong><em>cookie</em></strong>：浏览器A访问服务器的时候，服务器就给这个A一个id，浏览器会将这个id <strong>保存到本地</strong> cookie中；由web服务器在http响应头中附带给浏览器；一旦浏览器保存了cookie 每次访问web服务器时，都会在http请求头中将cookie <strong>回传给web服务器</strong><br><strong><em>session</em></strong>：采用的是在服务端保持Http状态信息的方案(<strong>保存在服务端</strong>)；当服务端需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否包含了一个session标识(即JSESSIONID)；在服务端的session对象的内容，可以访问到，这些变量信息是存在服务器的中的。</p><h2 id="6、你了解监听器吗？"><a href="#6、你了解监听器吗？" class="headerlink" title="6、你了解监听器吗？"></a>6、你了解监听器吗？</h2><p><strong>监听器</strong>是一个专门用于对其他对象身上发生的事件或状态改变进行监听和相应处理的对象，当被监视的对象发生情况时，立即采取相应的行动。<br>java的事件监听机制<br>1、事件监听涉及到三个组件：<strong>事件源</strong>、<strong>事件对象</strong>、<strong>事件监听器</strong>。<br>2、当事件源上发生某一个动作时，它会调用事件监听器的一个方法，并在调用该方法时把事件对象传递进去，<br>开发人员在监听器中通过事件对象，就可以拿到事件源，从而对事件源进行操作。</p><h1 id="框架篇"><a href="#框架篇" class="headerlink" title="框架篇"></a>框架篇</h1><h2 id="1、什么是ORM"><a href="#1、什么是ORM" class="headerlink" title="1、什么是ORM"></a>1、什么是ORM</h2><p>对象关系映射（Object Relational Mapping）模式是一种为了解决面向对象与关系数据库存在的互不匹配的技术；</p><p>简单的说，ORM是通过使用描述对象和数据库之间的映射的元数据，将程序中的对象自动持久化到关系数据库中。</p><h2 id="2、MyBatis默认用什么做日志管理"><a href="#2、MyBatis默认用什么做日志管理" class="headerlink" title="2、MyBatis默认用什么做日志管理"></a>2、MyBatis默认用什么做日志管理</h2><p>log4j</p><h2 id="3、MyBatis动态代理？"><a href="#3、MyBatis动态代理？" class="headerlink" title="3、MyBatis动态代理？"></a>3、MyBatis动态代理？</h2><p>开发者只需声明mapp接口（类似dao接口），无需声明实现类，而由mybatis框架通过创建接口的代理对象，就和实现类类似。需要按照一点的规范来开发接口和映射文件。</p><p>动态代理规则：</p><p>1、映射文件的mapper.xml的名称要和接口的名称一致</p><p>2、映射文件的namspace是接口的全路径</p><p>3、映射文件的sql statement的id是接口的方法名称</p><p>4、映射文件的输入参数类型和接口方法的参数类型一致</p><p>5、映射文件的输出结果和接口方法1的返回类型一致</p><h2 id="4、MyBatis输入输出类型"><a href="#4、MyBatis输入输出类型" class="headerlink" title="4、MyBatis输入输出类型"></a>4、MyBatis输入输出类型</h2><p>输入输出支持类型：</p><p>输入：parameterType支持的类型：java简单类型、hashmap、自定义pojo对象</p><p>输出：resultType：支持的类型：java简单类型、hashmap、自定义pojo对象</p><p>注意：封装的自定义pojo对象的要求：对象的属性名和数据库表的字段名一一对应</p><p>输出2：resultMap：</p><p>1、可以解决对象属性名和数据库字段名不一致的问题</p><p>2、还可以做一对一和一对多</p><h2 id="5、resultMap的使用"><a href="#5、resultMap的使用" class="headerlink" title="5、resultMap的使用"></a>5、resultMap的使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"order"</span> <span class="attr">id</span>=<span class="string">"orderResultMap"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义主键 ,非常重要。如果是多个字段,则定义多个id --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- property：主键在pojo中的属性名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- column：主键在数据库中的列名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 定义普通属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userId"</span> <span class="attr">column</span>=<span class="string">"user_id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"number"</span> <span class="attr">column</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、简单介绍Spring</p><p>spring是一个轻量级的控制反转和面向切面编程的容器框架</p><p>1、轻量级：spring大小和开销都是轻量级的</p><p>2、非入侵：一般在程序开发中，不需要引入spring包</p><p>3、控制反转（IOC）：对对象的创建权力交给容器</p><p>4、面向切面编程（AOP）：基于代理的 可以将核心业务和系统服务分开</p><p>7、Spring的两大特性</p><p>1、控制反转（IOC）：</p><p>把对象的创建、销毁的权利交给容器框架，由容器来管理对象的生命周期；</p><p>ioc不是新的技术，只是一种思想或理念，。可以实现松耦合</p><p>ioc包括依赖注入和依赖查找</p><p>DI（依赖注入）：就是在spring实例化对象的时候，由容器来设置这些对象的属性值</p><p>2、面向切面编程（AOP）：</p><p>采用横向抽取机制，把分散在各个方法中的相同代码抽取出来</p><p>然后在编译期或者是在运行时再把这些代码应用到所需要执行的地方</p><p>通知（Advice）：aop在切点上执行的增强处理</p><p>切点（Pointcut）：就是带有通知的连接点</p><p>切面（Aspect）：通常上就是一个类，里面定义了通知和切点</p><p>AOP=通知+切点</p><p>3、什么是MVC</p><p>MVC全名是Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写。</p><p>Model（模型）是应用程序中用于处理应用程序数据逻辑的部分。通常模型对象负责在数据库中存取数据</p><p>View（视图）是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的</p><p>Controller（控制器）是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据</p><p>4、SpringMVC的工作流程</p><p><img src="/2022/07/19/Java%E9%9D%A2%E8%AF%95%E9%A2%98/Users\刘培永\AppData\Roaming\Typora\typora-user-images\image-20220721083752673.png" alt="image-20220721083752673"></p><blockquote><p>1、客户端发送url到前端控制器（DispatherServlet）</p><p>2、前端控制器把请求url发送给处理器映射器HandlerMapping</p><p>3、处理器映射器根据url来查找处理器Handler，并返回给前端控制器</p><p>4、前端控制器调用处理器适配器去执行处理器，传递需要执行的处理器信息</p><p>5、处理器适配器执行处理器</p><p>6、处理器返回一个ModelAndView对象</p><p>7、适配器返回ModelAndView给前端控制器</p><p>8、前端控制器调用视图解析器去解析视图</p><p>9、视图解析器把逻辑视图解析为真正的视图并且返回给前端控制器</p><p>10、前端控制器对视图进行数据渲染、构建DOM树</p><p>11、把页面返回给客户端</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h1&gt;&lt;h2 id=&quot;1、java的8大基本数据类型&quot;&gt;&lt;a href=&quot;#1、java的8大基本数据类型&quot; class
      
    
    </summary>
    
    
      <category term="面试" scheme="https://tropical-forest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试题" scheme="https://tropical-forest.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>项目总结-在线教育项目</title>
    <link href="https://tropical-forest.github.io/2022/07/19/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE/"/>
    <id>https://tropical-forest.github.io/2022/07/19/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE/</id>
    <published>2022-07-19T02:43:53.000Z</published>
    <updated>2022-07-19T02:46:16.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、项目描述"><a href="#1、项目描述" class="headerlink" title="1、项目描述"></a>1、项目描述</h2><p>● 项目总体介绍： 在线教育项目采用B2C商业模式，使用微服务架构，项目采用前后端分离开发<br>● 项目功能模块: 在线教育项目分为前台系统和后台系统<br>     前台系统包含： 首页数据显示、课程列表和详情、课程支付、课程视频播放，微信登录、微信支付<br>     等等<br>    后台系统包含： 权限管理、课程管理、统计分析、课程分类管理等等<br>● 项目涉及技术：<br>  因为项目采用前后端分离开发<br>  前端技术包含： vue、elment-ui、nuxt等等<br>  后端技术包含： SpringBoot、SpringCloud等等<br>  第三方技术包含： 阿里云OSS、视频点播、短信服务等等</p><h2 id="2、企业中项目的开发流程"><a href="#2、企业中项目的开发流程" class="headerlink" title="2、企业中项目的开发流程"></a>2、企业中项目的开发流程</h2><p>一个中大型项目的开发流程</p><p>1、需求调研（产品经理）</p><p>2、需求评审（产品/设计/前端/后端/测试/运营）</p><p>3、立项（项目经理、品管）</p><p>4、UI设计</p><p>5、开发</p><ul><li>架构、数据库设计、API文档、MOCK数据、开发、单元测试</li><li>前端</li><li>后端</li></ul><p>6、前端后端联调</p><p>7、项目提测：黑盒白盒、压力测试（qps）  loadrunner</p><p>8、bug修改</p><p>9、回归测试</p><p>10、运维和部署上线</p><p>11、灰度发布</p><p>12、全量发布</p><p>13、维护和运营</p><h2 id="3、系统中都有那些角色？数据库是怎么设计的？"><a href="#3、系统中都有那些角色？数据库是怎么设计的？" class="headerlink" title="3、系统中都有那些角色？数据库是怎么设计的？"></a>3、系统中都有那些角色？数据库是怎么设计的？</h2><p>前台：会员（学员）</p><p>后台：系统管理员、运营人员</p><p>后台分库，每个微服务一个独立的数据库，使用了分布式id生成器</p><h2 id="4、视频点播是怎么实现的（流媒体你们是怎么实现的）"><a href="#4、视频点播是怎么实现的（流媒体你们是怎么实现的）" class="headerlink" title="4、视频点播是怎么实现的（流媒体你们是怎么实现的）"></a>4、视频点播是怎么实现的（流媒体你们是怎么实现的）</h2><p>我们直接接入了阿里云的云视频点播。云平台上的功能包括视频上传、转码、加密、智能审核、监控统计等。</p><p>还包括视频播放功能，阿里云还提供了一个视频播放器。</p><h2 id="5、前后端联调经常遇到的问题："><a href="#5、前后端联调经常遇到的问题：" class="headerlink" title="5、前后端联调经常遇到的问题："></a>5、前后端联调经常遇到的问题：</h2><p>   1、请求方式post、get</p><p>   2、json、x-wwww-form-urlencoded混乱的错误</p><p>   3、后台必要的参数，前端省略了</p><p>   4、数据类型不匹配</p><p>   5、空指针异常</p><p>   6、分布式系统中分布式id生成器生成的id 长度过大（19个字符长度的整数），js无法解析（js智能解析16个长度：2的53次幂）</p><p>​     id策略改成 ID_WORKER_STR</p><h2 id="6、前后端分离项目中的跨域问题是如何解决的"><a href="#6、前后端分离项目中的跨域问题是如何解决的" class="headerlink" title="6、前后端分离项目中的跨域问题是如何解决的"></a>6、前后端分离项目中的跨域问题是如何解决的</h2><p>后端服务器配置：我们的项目中是通过Spring注解解决跨域的 @CrossOrigin</p><p>也可以使用nginx反向代理、httpClient、网关</p><h2 id="7、说说你做了哪个部分、遇到了什么问题、怎么解决的"><a href="#7、说说你做了哪个部分、遇到了什么问题、怎么解决的" class="headerlink" title="7、说说你做了哪个部分、遇到了什么问题、怎么解决的"></a>7、说说你做了哪个部分、遇到了什么问题、怎么解决的</h2><p>问题1：</p><p>分布式id生成器在前端无法处理，总是在后三位进行四舍五入。</p><p>分布式id生成器生成的id是19个字符的长度，前端javascript脚本对整数的处理能力只有2的53次方，也就是最多只能处理16个字符</p><p>解决的方案是把id在程序中设置成了字符串的性质</p><h2 id="8、分布式系统的id生成策略"><a href="#8、分布式系统的id生成策略" class="headerlink" title="8、分布式系统的id生成策略"></a>8、分布式系统的id生成策略</h2><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html" target="_blank" rel="noopener">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><h2 id="9、分布式系统的CAP原理"><a href="#9、分布式系统的CAP原理" class="headerlink" title="9、分布式系统的CAP原理"></a>9、分布式系统的CAP原理</h2><p><strong>CAP定理：</strong></p><p>指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可同时获得。</p><p> 一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（所有节点在同一时间的数据完全一致，越多节点，数据同步越耗时）</p><p>可用性（A）：负载过大后，集群整体是否还能响应客户端的读写请求。（服务一直可用，而且是正常响应时间）</p><p>分区容错性（P）：分区容错性，就是高可用性，一个节点崩了，并不影响其它的节点（100个节点，挂了几个，不影响服务，越多机器越好）</p><p><strong>CA 满足的情况下，P不能满足的原因：</strong></p><p>数据同步(C)需要时间，也要正常的时间内响应(A)，那么机器数量就要少，所以P就不满足</p><p><strong>CP 满足的情况下，A不能满足的原因：</strong></p><p>数据同步(C)需要时间, 机器数量也多(P)，但是同步数据需要时间，所以不能再正常时间内响应，所以A就不满足</p><p><strong>AP 满足的情况下，C不能满足的原因：</strong></p><p>机器数量也多(P)，正常的时间内响应(A)，那么数据就不能及时同步到其他节点，所以C不满足</p><p><strong>注册中心选择的原则：</strong></p><p>Zookeeper：CP设计，保证了一致性，集群搭建的时候，某个节点失效，则会进行选举行的leader，或者半数以上节点不可用，则无法提供服务，因此可用性没法满足</p><p>Eureka：AP原则，无主从节点，一个节点挂了，自动切换其他节点可以使用，去中心化</p><p><strong>结论：</strong></p><p>分布式系统中P,肯定要满足，所以我们只能在一致性和可用性之间进行权衡</p><p>如果要求一致性，则选择zookeeper，如金融行业</p><p>如果要求可用性，则Eureka，如教育、电商系统</p><p>没有最好的选择，最好的选择是根据业务场景来进行架构设计</p><h2 id="10、前端渲染和后端渲染有什么区别"><a href="#10、前端渲染和后端渲染有什么区别" class="headerlink" title="10、前端渲染和后端渲染有什么区别"></a>10、<strong>前端渲染和后端渲染有什么区别</strong></h2><p>前端渲染是返回json给前端，通过javascript将数据绑定到页面上</p><p>后端渲染是在服务器端将页面生成直接发送给服务器，有利于SEO的优化</p><h2 id="11、能画一下系统架构图吗"><a href="#11、能画一下系统架构图吗" class="headerlink" title="11、能画一下系统架构图吗"></a><strong>11、能画一下系统架构图吗</strong></h2><p><img src="/2022/07/19/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE/image-20220718153924013.png" alt="image-20220718153924013"></p><h2 id="12、B2C模式是什么，你还了解其他商业模式吗？"><a href="#12、B2C模式是什么，你还了解其他商业模式吗？" class="headerlink" title="12、B2C模式是什么，你还了解其他商业模式吗？"></a>12、B2C模式是什么，你还了解其他商业模式吗？</h2><p>   Business To Customer 会员模式，商家到用户，这种模式是自己制作大量自有版权的视频，放在自有平台上，让用户按月付费或者按年付费。 这种模式简单，快速，只要专心录制大量视频即可快速发展，其曾因为 lynda 的天价融资而 大热。但在中国由于版权保护意识不强，教育内容易于复制，有海量的免费资源的竞争对手众多等原因，难以取得像样的现金流。</p><p>代表网站：慕课网</p><p>其他商业模式有：C2C（平台模式，即用户到用户）B2B2C(商家到商家到用户，平台链接第三方教育机构和用户，平台一般不直接提供课程内容)、O2O模式（Online To Offline 线上到线下）</p><h2 id="13、微服务架构？"><a href="#13、微服务架构？" class="headerlink" title="13、微服务架构？"></a>13、微服务架构？</h2><p>微服务架构是一种软件开发的架构，把大型软件分解成多个独立的组件，其中每个组件都是一个服务，组件间都是互相独立的。一个微服务就是一个独立的进程。</p><h2 id="14、课程支付是如何实现的？"><a href="#14、课程支付是如何实现的？" class="headerlink" title="14、课程支付是如何实现的？"></a>14、课程支付是如何实现的？</h2><p>课程分为收费课程和免费课程，免费课程可以直接观看，收费课程需要支付才能观看。</p><p>与课程支付相关的数据库是：订单表和支付日志表</p><p>点击立即购买，会生成订单，订单表里会生成一条记录，</p><p>点击去支付，会生成支付二维码，扫描二维码去支付，会生成一条支付日志</p><p>课程支付需要完成的接口：</p><p>1、生成订单的接口</p><p>2、根据订单id查询订单信息</p><p>3、生成微信支付的二维码</p><p>4、查询订单支付状态接口</p><h2 id="15、你用过远程调用吗？项目中如何使用远程调用？"><a href="#15、你用过远程调用吗？项目中如何使用远程调用？" class="headerlink" title="15、你用过远程调用吗？项目中如何使用远程调用？"></a>15、你用过远程调用吗？项目中如何使用远程调用？</h2><p>1、引入依赖</p><p> <code>&lt;dependency&gt;</code><br>            <code>&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</code><br>            <code>&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</code><br>   &lt;/dependency&gt;`</p><p>2、主启动类上添加注解</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure><p>3、写远程调用接口，@FeignClient</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Component</span></span><br><span class="line"><span class="variable">@FeignClient</span>(<span class="string">"service-ucenter"</span>)</span><br><span class="line">public interface UcenterClient &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户id获取用户信息</span></span><br><span class="line">    <span class="variable">@PostMapping</span>(<span class="string">"/educenter/member/getUserInfoOrder/&#123;id&#125;"</span>)</span><br><span class="line">    public UcenterMemberOrder getUserInfoOrder(<span class="variable">@PathVariable</span>(<span class="string">"id"</span>) String id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16、微信支付如何实现？"><a href="#16、微信支付如何实现？" class="headerlink" title="16、微信支付如何实现？"></a>16、微信支付如何实现？</h2><p>1、生成微信支付二维码接口</p><p>2、获取支付状态接口</p><p>关键的必填信息就几个：<br><strong>公众号ID、商户号、随机字符串、签名、商品描述、商户订单号、标价金额、终端ip、通知地址、交易类型。</strong></p><h2 id="17、阿里云OSS是什么？"><a href="#17、阿里云OSS是什么？" class="headerlink" title="17、阿里云OSS是什么？"></a>17、阿里云OSS是什么？</h2><p>阿里云对象存储OSS（Object Storage Service）为您提供基于网络的数据存取服务。使用OSS，您可以通过网络随时存储和调用包括文本、图片、音视频在内的各类数据文件。</p><h2 id="18、权限管理如何实现？"><a href="#18、权限管理如何实现？" class="headerlink" title="18、权限管理如何实现？"></a>18、权限管理如何实现？</h2><p><strong>不同角色的用户登录后台管理系统拥有不同的菜单权限与功能权限，**</strong>权限管理包含三个功能模块：菜单管理、角色管理和用户管理**</p><p><img src="/2022/07/19/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93-%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE/image-20220719100146619.png" alt="image-20220719100146619"></p><p>权限管理有5张数据表，分别是权限表、角色表、用户表、角色权限表、用户角色表</p><h2 id="19、登录模块如何实现？"><a href="#19、登录模块如何实现？" class="headerlink" title="19、登录模块如何实现？"></a>19、登录模块如何实现？</h2><p>有两种登录模式，一种是账号和密码，另一种是微信扫描登录</p><p>单点登录，</p><p>微信扫码登录： 需要微信开发平台账号id、密钥、重定向</p><h2 id="20、统计分析模块如何实现？"><a href="#20、统计分析模块如何实现？" class="headerlink" title="20、统计分析模块如何实现？"></a>20、统计分析模块如何实现？</h2><p>使用Echart实现，</p><h2 id="21、定时器如何实现？"><a href="#21、定时器如何实现？" class="headerlink" title="21、定时器如何实现？"></a>21、定时器如何实现？</h2><p>使用cron表达式实现，Cron表达式是一个具有时间含义的字符串，字符串以5~6个空格隔开，分为6~7个域</p><h2 id="22、NUXT是什么？"><a href="#22、NUXT是什么？" class="headerlink" title="22、NUXT是什么？"></a>22、NUXT是什么？</h2><p>Nuxt.js 是一个基于 Vue.js 的第三方开源服务端渲染应用框架，它可以帮我们轻松的使用 Vue.js 技术栈实现同构应用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1、项目描述&quot;&gt;&lt;a href=&quot;#1、项目描述&quot; class=&quot;headerlink&quot; title=&quot;1、项目描述&quot;&gt;&lt;/a&gt;1、项目描述&lt;/h2&gt;&lt;p&gt;● 项目总体介绍： 在线教育项目采用B2C商业模式，使用微服务架构，项目采用前后端分离开发&lt;br&gt;● 项目功
      
    
    </summary>
    
    
      <category term="项目" scheme="https://tropical-forest.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="在线教育项目" scheme="https://tropical-forest.github.io/tags/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux切换jdk版本</title>
    <link href="https://tropical-forest.github.io/2022/07/13/Linux%E5%88%87%E6%8D%A2jdk%E7%89%88%E6%9C%AC/"/>
    <id>https://tropical-forest.github.io/2022/07/13/Linux%E5%88%87%E6%8D%A2jdk%E7%89%88%E6%9C%AC/</id>
    <published>2022-07-13T09:47:47.000Z</published>
    <updated>2022-07-13T23:36:21.867Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux上安装jdk已经写在其他博客上，这里不再赘述</p><p>查看版本，发现并不是新安装的jdk版本，使用命令更改当前系统使用的jdk版本，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives --config java</span><br><span class="line">没有新安装的1.8.1版本jdk，需要使用命令将新安装的jdk放入到java bin中，</span><br><span class="line">update-alternatives --install /usr/bin/java java /usr/local/jdk1.8.0_181/bin/java 4</span><br><span class="line">执行java -version查看java版本，已成功修改</span><br></pre></td></tr></table></figure><p><img src="/2022/07/13/Linux%E5%88%87%E6%8D%A2jdk%E7%89%88%E6%9C%AC/image-20220713175037549.png" alt="image-20220713175037549"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Linux上安装jdk已经写在其他博客上，这里不再赘述&lt;/p&gt;
&lt;p&gt;查看版本，发现并不是新安装的jdk版本，使用命令更改当前系统使用的jdk版本，执行：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://tropical-forest.github.io/categories/Linux/"/>
    
    
      <category term="jdk版本切换" scheme="https://tropical-forest.github.io/tags/jdk%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Linux的使用</title>
    <link href="https://tropical-forest.github.io/2022/07/11/Linux%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://tropical-forest.github.io/2022/07/11/Linux%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-11T09:09:20.000Z</published>
    <updated>2022-07-14T07:55:19.017Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="删除文件、文件夹"><a href="#删除文件、文件夹" class="headerlink" title="删除文件、文件夹"></a>删除文件、文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm  test.java  直接删除</span><br><span class="line">rm -i test.java   交互式删除</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f test.java   避免交互式操作，自动回答y</span><br><span class="line">rm -r  user/      递归删除目录下所有的文件和子目录</span><br></pre></td></tr></table></figure><h3 id="查看Linux系统版本"><a href="#查看Linux系统版本" class="headerlink" title="查看Linux系统版本"></a>查看Linux系统版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure><p><img src="/2022/07/11/Linux%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220711213354661.png" alt="image-20220711213354661"></p><h3 id="软件包管理工具"><a href="#软件包管理工具" class="headerlink" title="软件包管理工具"></a>软件包管理工具</h3><p>rpm    ——- centos</p><p>apt  ———— ubuntu</p><p>例如·:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm install vim  centos上下载vim</span><br><span class="line">apt install vim  ubuntu上下载vim</span><br></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep jenkins    查看jenkins进程，这里的jenkins可替换为其他软件名称</span><br></pre></td></tr></table></figure><h3 id="解压命令"><a href="#解压命令" class="headerlink" title="解压命令"></a><strong>解压命令</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf XXXXXX.tar.gz</span><br></pre></td></tr></table></figure><h3 id="服务相关命令："><a href="#服务相关命令：" class="headerlink" title="服务相关命令："></a>服务相关命令：</h3><p>查看当前所有服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service --status-all</span><br></pre></td></tr></table></figure><p>查看指定的服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service --status-all | grep redis</span><br></pre></td></tr></table></figure><p>*grep: 在文件中查看匹配的行</p><p>| ： 管道符</p><p><strong>开启当前服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">service 服务名 start</span></span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure><p>关闭当前服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">service 服务名 stop</span></span><br><span class="line">service nginx stop</span><br></pre></td></tr></table></figure><p>重启当前服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">service 服务名 restart</span></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><p>查看服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">service 服务名 status</span></span><br><span class="line">service nginx status</span><br></pre></td></tr></table></figure><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><h3 id="1、Linux安装jdk"><a href="#1、Linux安装jdk" class="headerlink" title="1、Linux安装jdk"></a>1、Linux安装jdk</h3><p>第一步：上传或下载安装包</p><p>cd/usr/local</p><p>jdk-8u202-linux-x64.tar.gz</p><p>第二步：解压安装包</p><p>tar -zxvf jdk-8u202-linux-x64.tar.gz</p><p>第三步：建立软连接</p><p>ln -s /usr/local/jdk1.8.0_202/ /usr/local/jdk</p><p>第四步：修改环境变量</p><p>vim /etc/profile</p><p>export JAVA_HOME=/usr/local/jdk</p><p>export JRE_HOME=$JAVA_HOME/jre</p><p>export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib</p><p>export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</p><p>通过命令source /etc/profile让profile文件立即生效</p><p>source /etc/profile</p><p>第五步、测试是否安装成功</p><p>②、使用java -version，出现版本</p><h3 id="2、Linux安装maven"><a href="#2、Linux安装maven" class="headerlink" title="2、Linux安装maven"></a>2、Linux安装maven</h3><p>第一步：上传或下载安装包</p><p>cd/usr/local</p><p>apache-maven-3.8.6-bin.tar.gz</p><p>第二步：解压安装包</p><p>tar -zxvf apache-maven-3.8.6-bin.tar.gz</p><p>第三步：建立软连接</p><p>ln -s /usr/local/apache-maven-3.8.6/ /usr/local/maven</p><p>第四步：修改环境变量</p><p>vim /etc/profile</p><p>export MAVEN_HOME=/usr/local/maven</p><p>export PATH=$PATH:$MAVEN_HOME/bin</p><p>通过命令source /etc/profile让profile文件立即生效</p><p>source /etc/profile</p><p>第五步、测试是否安装成功</p><p>mvn –v</p><h3 id="3、Linux安装git"><a href="#3、Linux安装git" class="headerlink" title="3、Linux安装git"></a>3、Linux安装git</h3><p>yum -y install git</p><h3 id="4、Linux安装Docker"><a href="#4、Linux安装Docker" class="headerlink" title="4、Linux安装Docker"></a>4、Linux安装Docker</h3><p>参考文档：</p><p><a href="https://help.aliyun.com/document_detail/60742.html?spm=a2c4g.11174283.6.548.24c14541ssYFIZ" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/60742.html?spm=a2c4g.11174283.6.548.24c14541ssYFIZ</a></p><p>第一步：安装必要的一些系统工具</p><p>yum install -y yum-utils device-mapper-persistent-data lvm2</p><p>第二步：添加软件源信息</p><p>yum-config-manager —add-repo <a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></p><p>第三步：更新并安装Docker-CE</p><p>yum makecache fast</p><p>yum -y install docker-ce</p><p>第四步：开启Docker服务</p><p>service docker start</p><p>第五步、测试是否安装成功</p><p>docker -v</p><p>推荐 <a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">https://www.runoob.com/docker/ubuntu-docker-install.html</a> 下的自动安装命令</p><p>一键安装命令：</p><p>使用官方安装脚本自动安装</p><p>安装命令如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="keyword">https</span>://<span class="built_in">get</span>.docker.com | bash -s docker <span class="comment">--mirror Aliyun</span></span><br></pre></td></tr></table></figure><p>也可以使用国内 daocloud 一键安装命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL http<span class="variable">s:</span>//<span class="built_in">get</span>.daocloud.io/docker | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h2&gt;&lt;h3 id=&quot;删除文件、文件夹&quot;&gt;&lt;a href=&quot;#删除文件、文件夹&quot; class=&quot;headerlink&quot; title=&quot;删
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://tropical-forest.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://tropical-forest.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker的使用</title>
    <link href="https://tropical-forest.github.io/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://tropical-forest.github.io/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-07T03:29:20.000Z</published>
    <updated>2022-07-11T14:15:40.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h2><p>Docker是一个开源的应用容器引擎，基于Go语言。</p><p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><h2 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h2><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707093147019.png" alt="image-20220707093147019"></p><h2 id="Docker的优点"><a href="#Docker的优点" class="headerlink" title="Docker的优点"></a>Docker的优点</h2><ol><li>快速，一致地交行您的应用程序</li><li>响应式部署和扩展</li><li>在同一硬件上运行更多工作负载</li></ol><h2 id="容器的使用"><a href="#容器的使用" class="headerlink" title="容器的使用"></a>容器的使用</h2><h3 id="查看所有的容器命令如下："><a href="#查看所有的容器命令如下：" class="headerlink" title="查看所有的容器命令如下："></a><strong>查看所有的容器命令如下：</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看所有运行的容器命令："><a href="#查看所有运行的容器命令：" class="headerlink" title="查看所有运行的容器命令："></a>查看所有运行的容器命令：</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><h3 id="获取镜像："><a href="#获取镜像：" class="headerlink" title="获取镜像："></a><strong>获取镜像</strong>：</h3><p>如果我们本地没有 ubuntu镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">ubuntu</span><span class="selector-pseudo">:latest</span></span><br></pre></td></tr></table></figure><h3 id="启动容器："><a href="#启动容器：" class="headerlink" title="启动容器："></a><strong>启动容器：</strong></h3><p>以下命令使用ubuntu镜像启动一个容器，参数为以命令行模式进入该容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>如果需要在后台运行，则：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-test -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p>开机自启动或者取消自启动:</p><p>开机自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.容器创建时：</span><br><span class="line">docker run --restart=always .....</span><br><span class="line">2、容器启动时：</span><br><span class="line">docker update --restart=always xxx</span><br></pre></td></tr></table></figure><p>取消开机自启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=no xxx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-i: 交互式操作</li><li>-t：终端</li><li>-d: 不会进入容器，后台运行</li><li>ubuntu：ubuntu镜像</li><li>/bin/bash: 放在镜像名后的是命令，这里我们希望有个交互式Shell,因此用的是/bin/bash</li></ul><p>要退出终端，直接输入exit</p><h3 id="停止一个容器："><a href="#停止一个容器：" class="headerlink" title="停止一个容器："></a><strong>停止一个容器：</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">stop</span> &lt;容器<span class="keyword">ID</span>&gt;</span><br></pre></td></tr></table></figure><p>例如：docker stop e57e22bc310e</p><h3 id="停止的容器可以通过-docker-restart-重启："><a href="#停止的容器可以通过-docker-restart-重启：" class="headerlink" title="停止的容器可以通过 docker restart 重启："></a><strong>停止的容器可以通过 docker restart 重启：</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart <span class="tag">&lt;<span class="name">容器</span> <span class="attr">ID</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如： docker restart e57e22bc310e</p><h3 id="使用-docker-start-启动一个已停止的容器："><a href="#使用-docker-start-启动一个已停止的容器：" class="headerlink" title="使用 docker start 启动一个已停止的容器："></a><strong>使用 docker start 启动一个已停止的容器：</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">start</span> &lt;容器<span class="keyword">ID</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="进入容器："><a href="#进入容器：" class="headerlink" title="进入容器："></a><strong>进入容器：</strong></h3><p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li><strong>docker attach</strong>  此命令会退出容器终端，会导致容器的停止</li><li><strong>docker exec</strong>：推荐使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="section">attach</span> <span class="number">1e560</span>fca3906 </span><br><span class="line">docker exec -it <span class="number">1e560</span>fca3906  /bin/bash</span><br></pre></td></tr></table></figure><p>attach退出将会导致容器的停止，但exec并不会。</p><h3 id="导出和导入容器："><a href="#导出和导入容器：" class="headerlink" title="导出和导入容器："></a><strong>导出和导入容器：</strong></h3><p><strong>导出容器</strong></p><p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export dae0f497264c &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707105353707.png" alt="image-20220707105353707"></p><p><strong>导入容器快照：</strong></p><p>可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cat</span> ubuntu.tar | docker <span class="keyword">import</span> - test/ubuntu:v1</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707110231245.png" alt="image-20220707110231245"></p><p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">import</span> <span class="string">http:</span><span class="comment">//example.com/exampleimage.tgz example/imagerepo</span></span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h3><p>删除容器使用 <strong>docker rm</strong> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><p>下面的命令可以清理掉所有处于终止状态的容器。</p><p><code>$ docker container prune</code></p><h2 id="更改容器名字："><a href="#更改容器名字：" class="headerlink" title="更改容器名字："></a>更改容器名字：</h2><p><a href="https://so.csdn.net/so/search?q=docker&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">docker</a> rename 容器原来名  要改为的名字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rename sss canal</span><br></pre></td></tr></table></figure><h2 id="镜像的使用"><a href="#镜像的使用" class="headerlink" title="镜像的使用"></a>镜像的使用</h2><h3 id="列出镜像列表："><a href="#列出镜像列表：" class="headerlink" title="列出镜像列表："></a><strong>列出镜像列表：</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除镜像："><a href="#删除镜像：" class="headerlink" title="删除镜像："></a><strong>删除镜像：</strong></h3><p>镜像删除使用 <strong>docker rmi</strong> 命令，比如我们删除 hello-world 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure><h2 id="Docker实例"><a href="#Docker实例" class="headerlink" title="Docker实例"></a>Docker实例</h2><p>Docker最大的容器镜像库网址：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://hub.docker.com/</span></span><br></pre></td></tr></table></figure><h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><ol><li><h4 id="查看可用的Nginx版本"><a href="#查看可用的Nginx版本" class="headerlink" title="查看可用的Nginx版本"></a>查看可用的Nginx版本</h4><p>访问 Nginx 镜像库地址： <a href="https://hub.docker.com/_/nginx?tab=tags。" target="_blank" rel="noopener">https://hub.docker.com/_/nginx?tab=tags。</a></p><p>可以通过 Sort by 查看其他版本的 Nginx，默认是最新版本 <strong>nginx:latest</strong>。</p><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707095616637.png" alt="image-20220707095616637"></p></li></ol><ol><li><p><strong>拉取镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707095913588.png" alt="image-20220707095913588"></p><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100037086.png" alt="image-20220707100037086"></p></li></ol><ol><li><h4 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a><strong>查看本地镜像</strong></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100146913.png" alt="image-20220707100146913"></p></li><li><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a><strong>运行容器</strong></h4><p>安装完成后，我们可以使用以下命令来运行 nginx 容器：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-test -p <span class="number">8080</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>—name nginx-test： 容器名称</li><li>-p 8080:80: 端口进行映射，将本地8080端口映射到容器内部的80端口。</li><li>-d nginx: 设置容器在后台一直运行</li></ul><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100553207.png" alt="image-20220707100553207"></p></li><li><h4 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h4></li></ol><p>最后我们可以通过浏览器可以直接访问 8080 端口的 nginx 服务：</p><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100721924.png" alt="image-20220707100721924"></p><h3 id="Docker安装redis"><a href="#Docker安装redis" class="headerlink" title="Docker安装redis"></a>Docker安装redis</h3><p>步骤跟上面相同</p><p>后台运行redis服务命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p>下面步骤前提：已经安装好redis镜像，并已经在后台运行redis服务</p><p>使用redis服务命令：</p><p>第一步：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> &lt;redis容器<span class="built_in">id</span>或者redis容器名称&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707112118329.png" alt="image-20220707112118329"></p><h3 id="Docker-安装Canal"><a href="#Docker-安装Canal" class="headerlink" title="Docker 安装Canal"></a>Docker 安装Canal</h3><h4 id="第一步：拉取Canal镜像"><a href="#第一步：拉取Canal镜像" class="headerlink" title="第一步：拉取Canal镜像"></a>第一步：拉取Canal镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull canal/canal-server</span><br></pre></td></tr></table></figure><h4 id="第二步：启动镜像"><a href="#第二步：启动镜像" class="headerlink" title="第二步：启动镜像"></a>第二步：启动镜像</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--name canal  镜像ID -d</span></span><br></pre></td></tr></table></figure><h4 id="第三步：将容器内部配置文件拷贝到外部"><a href="#第三步：将容器内部配置文件拷贝到外部" class="headerlink" title="第三步：将容器内部配置文件拷贝到外部"></a>第三步：将容器内部配置文件拷贝到外部</h4><p>docker cp [容器索引]:[内部路径] [外部路径]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp canal:/home/admin/canal-server/conf/canal.properties /vagrant/canal/canal.properties</span><br><span class="line"></span><br><span class="line">docker cp canal:/home/admin/canal-server/conf/example/instance.properties /vagrant/canal/instance.properties</span><br></pre></td></tr></table></figure><h4 id="第四步：修改外部配置文件instance-properties"><a href="#第四步：修改外部配置文件instance-properties" class="headerlink" title="第四步：修改外部配置文件instance.properties"></a>第四步：修改外部配置文件<code>instance.properties</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要改成自己的数据库信息</span></span><br><span class="line"></span><br><span class="line">canal.instance.master.address=192.168.44.132:3306</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">需要改成自己的数据库用户名与密码</span></span><br><span class="line"></span><br><span class="line">canal.instance.dbUsername=canal</span><br><span class="line"></span><br><span class="line">canal.instance.dbPassword=canal</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">需要改成同步的数据库表规则，例如只是同步一下表</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">canal.instance.filter.regex=.*\\..*</span></span><br><span class="line"></span><br><span class="line">canal.instance.filter.regex=guli_ucenter.ucenter_member</span><br></pre></td></tr></table></figure><h4 id="第五步：关闭移除容器"><a href="#第五步：关闭移除容器" class="headerlink" title="第五步：关闭移除容器"></a>第五步：关闭移除容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">关闭容器</span></span><br><span class="line">docker stop canal</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">移除容器</span></span><br><span class="line">docker rm canal</span><br></pre></td></tr></table></figure><h4 id="第六步：启动新的canal容器"><a href="#第六步：启动新的canal容器" class="headerlink" title="第六步：启动新的canal容器"></a>第六步：启动新的canal容器</h4><p> 这里-v是将外部的文件挂载到容器内部 这样就不用每次启动都要配置参数了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name canal -p 11111:11111 -d -v /vagrant/canal/instance.properties:/home/admim/canal-server/conf/example/instance.properties -v /vagrant/canal/canal.properties:/home/admin/canal-server/conf/canal.properties canal/canal-server</span><br></pre></td></tr></table></figure><p>到这步canal已经安装完成</p><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>1、关于容器中无法使用vim的问题</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一步：apt-<span class="builtin-name">get</span> update</span><br><span class="line">第二步：apt-<span class="builtin-name">get</span> install vim</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h2&gt;&lt;p&gt;Docker是一个开源的应用容器引擎，基于Go语言。&lt;/p&gt;
&lt;p&gt;Docker可以
      
    
    </summary>
    
    
      <category term="部署" scheme="https://tropical-forest.github.io/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="容器" scheme="https://tropical-forest.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://tropical-forest.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>易宝软件面试总结</title>
    <link href="https://tropical-forest.github.io/2022/07/01/%E6%98%93%E5%AE%9D%E8%BD%AF%E4%BB%B6%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>https://tropical-forest.github.io/2022/07/01/%E6%98%93%E5%AE%9D%E8%BD%AF%E4%BB%B6%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2022-07-01T08:03:30.000Z</published>
    <updated>2022-07-07T04:43:29.505Z</updated>
    
    <content type="html"><![CDATA[<p>2022年06月30号，我去了易宝软件进行面试，这是我真正意义上的求职第一次面试。</p><p>我先到面试地点，我到的面试地点是华为公司，因为易宝软件是外包公司，广州易宝软件在华为公司上班。然后先进行笔试，笔试是几十到选择题，题目范围有java基础、java核心、数据库、信息安全、计算机网络、数据结构等知识，范围较广。在培训室参加完笔试后，然后接下来就去面试，面试官拿着我的简历，首先让我做个自我介绍，然后问一些关于实习项目的经历，然后问一些项目方面的知识，但没有问ssm，再问springboot、springcloud、mysql、java、jvm、多线程线程池基础部分。我好多都不会，尤其是mysql，因为太久没有看过了。springboot、springcloud学的时间太长了。所以我第一轮面试就直接挂掉了。面试官给我的反馈是：基础较为薄弱。</p><p>面试题目：</p><p>1、如何实现集群部署？</p><p>2、jvm的基本数据结构是哪些？</p><p>3、spring和springboot的区别</p><p>4、eureka工作原理？</p><p>5、mysql的索引方式？</p><p>6、线程池的创建方式？</p><p>7、如何实现线程类？</p><p>8、数据库中表示占位符有哪些？</p><p>9.项目中的dao里面的接口方法如何与mapper关联起来？</p><p>10、项目的登录模块有做验证码以及其他安全措施吗？</p><p>11、讲一下java集合类？</p><p>12、java的锁有哪些？</p><p>13、了解设计模式，讲一下你了解的设计模式？</p><p>总结：这次面试让我意识到自己的基础非常的薄弱，短时间内是很难提高的，所以求职做好长时间的准备，给自己1个月的时间去求职。1个月内不足自己的薄弱点。先做完几个项目，然后学习jvm、多线程、mysql等知识。</p><p>时间：2022.07.01</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2022年06月30号，我去了易宝软件进行面试，这是我真正意义上的求职第一次面试。&lt;/p&gt;
&lt;p&gt;我先到面试地点，我到的面试地点是华为公司，因为易宝软件是外包公司，广州易宝软件在华为公司上班。然后先进行笔试，笔试是几十到选择题，题目范围有java基础、java核心、数据库、
      
    
    </summary>
    
    
      <category term="面试" scheme="https://tropical-forest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://tropical-forest.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud整合zookeeper代替Eureka</title>
    <link href="https://tropical-forest.github.io/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/"/>
    <id>https://tropical-forest.github.io/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/</id>
    <published>2022-03-02T15:31:34.000Z</published>
    <updated>2022-07-07T04:43:29.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud整合zookeeper代替Eureka"><a href="#SpringCloud整合zookeeper代替Eureka" class="headerlink" title="SpringCloud整合zookeeper代替Eureka"></a>SpringCloud整合zookeeper代替Eureka</h1><h2 id="注册中心Zookeeper"><a href="#注册中心Zookeeper" class="headerlink" title="注册中心Zookeeper"></a>注册中心Zookeeper</h2><p>项目代码地址: <a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022</a></p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><ol><li><p>新建cloud-provider-payment8004</p></li><li><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 先排除自带的zookeeper3.5.3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.171</span><span class="number">.131</span><span class="string">:2181</span>  <span class="comment">#zookeeper地址</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springcloud with zookeeper: "</span>+serverPort+<span class="string">"\t"</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>启动8004注册进zookeeper</p><ul><li><p>启动zookeeper</p><ol><li>进入zookeeper所在目录的bin环境下，如下图所示:</li></ol><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302222804591.png" alt="image-20220302222804591"></p><ol><li><p>启动zookeeper服务（启动服务之前要关闭防火墙）</p><p>关闭防火墙命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>zookeeper服务启动命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302223213917.png" alt="image-20220302223213917"></p></li><li><p>进入zookeeper客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302223406253.png" alt="image-20220302223406253"></p></li><li><p>启动cloud-provider-payment8004</p><p>如果zookeeper客户端中能发现cloud-provider-payment则表示成功</p><p>如果防火墙没有关闭，则运行cloud-provider-payment8004会出现连接超时的状态。</p></li></ol></li></ul></li></ol><ol><li><p>验证测试</p><p>在浏览器中输入<a href="http://localhost:8004/payment/zk有反应则成功" target="_blank" rel="noopener">http://localhost:8004/payment/zk有反应则成功</a></p></li></ol><p><strong><em>Zookeeper 服务节点是临时节点还是持久节点</em></strong></p><p>通过两个节点查看查看出来：<br>启动–停止–再启动<br>注册服务节点编号不一致，所以<strong>Zookeeper 服务节点是临时节点</strong></p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><ol><li><p>新建cloud-consumerzk-order80</p></li><li><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 先排除自带的zookeeper3.5.3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.171</span><span class="number">.131</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>业务类</p><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302225554500.png" alt="image-20220302225554500"></p><p>ApplicationContextConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​        OrderZKController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">"http://cloud-provider-payment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL+<span class="string">"/payment/zk"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>验证测试</p><p><a href="http://localhost/consumer/payment/zk" target="_blank" rel="noopener">http://localhost/consumer/payment/zk</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringCloud整合zookeeper代替Eureka&quot;&gt;&lt;a href=&quot;#SpringCloud整合zookeeper代替Eureka&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud整合zookeeper代替Eureka&quot;&gt;
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="zookeeper" scheme="https://tropical-forest.github.io/tags/zookeeper/"/>
    
      <category term="服务注册与发现" scheme="https://tropical-forest.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Centos安装Zookeeper</title>
    <link href="https://tropical-forest.github.io/2022/03/02/Centos%E5%AE%89%E8%A3%85Zookeeper/"/>
    <id>https://tropical-forest.github.io/2022/03/02/Centos%E5%AE%89%E8%A3%85Zookeeper/</id>
    <published>2022-03-02T15:30:11.000Z</published>
    <updated>2022-07-07T04:43:29.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos安装Zookeeper"><a href="#Centos安装Zookeeper" class="headerlink" title="Centos安装Zookeeper"></a>Centos安装Zookeeper</h1><h2 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h2><p>因为Zookeeper运行需要Java环境，所以需要先安装Java环境</p><ol><li><p>查看云端yum库中目前支持安装的jdk软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search java|grep jdk</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>选择版本安装jdk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk*</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>安装完成后，验证是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li></ol><ol><li>查找jdk安装位置</li></ol>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">'java'</span></span><br></pre></td></tr></table></figure>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认安装路径一般为：&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64&#x2F;jre&#x2F;bin&#x2F;java</span><br></pre></td></tr></table></figure><ol><li><p>配置环境变量</p><p>编辑配置文件: <code>vim /etc/profile</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>刷新配置到内存,使其生效: <code>source /etc/profile</code></p><p>测试是否生效: <code>echo $JAVA_HOME</code></p></li></ol><h2 id="Zookeeper的安装"><a href="#Zookeeper的安装" class="headerlink" title="Zookeeper的安装"></a>Zookeeper的安装</h2><p>下载<code>bin</code>压缩包:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>archive.apache.org<span class="regexp">/dist/</span>zookeeper<span class="regexp">/zookeeper-3.5.6/</span>apache-zookeeper-<span class="number">3.5</span>.<span class="number">6</span>-bin.tar.gz</span><br></pre></td></tr></table></figure><p>解压:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span>  <span class="selector-tag">-zxvf</span> <span class="selector-tag">apache-zookeeper-3</span><span class="selector-class">.5</span><span class="selector-class">.6-bin</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>移动到指定文件并重命名目录:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-zookeeper<span class="number">-3.5</span><span class="number">.6</span>-bin/ /opt/zookeeper</span><br></pre></td></tr></table></figure><p>配置环境变量:</p><ul><li><p>编辑配置文件: </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/lib/jvm/java-11-openjdk-11.0.10.0.9-0.el7_9.x86_64/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ZOOKEEPER_HOME</span>=/opt/zookeeper</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>刷新配置到内存,使其生效: <code>source /etc/profile</code></p></li><li><p>测试是否生效: <code>echo $ZOOKEEPER_HOME</code></p></li></ul><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><ul><li><p>配置文件:</p><ul><li><p>切换到指定目录: <code>cd /opt/zookeeper/conf/</code></p></li><li><p>拷贝一份配置文件,一定得命名为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">zoo</span><span class="selector-class">.cfg</span></span><br></pre></td></tr></table></figure><p>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cp</span> <span class="selector-tag">zoo_sample</span><span class="selector-class">.cfg</span> <span class="selector-tag">zoo</span><span class="selector-class">.cfg</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>启动服务:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh <span class="literal">start</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：在Linux上进行文档操作，可以使用WinScp软件方便操作</p><p>参考文章:<a href="https://juejin.cn/post/6939515584858030088" target="_blank" rel="noopener">https://juejin.cn/post/6939515584858030088</a></p><p><a href="https://www.timberkito.com/?p=12" target="_blank" rel="noopener">https://www.timberkito.com/?p=12</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos安装Zookeeper&quot;&gt;&lt;a href=&quot;#Centos安装Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Centos安装Zookeeper&quot;&gt;&lt;/a&gt;Centos安装Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;安装Jav
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="Centos安装Zookeeper" scheme="https://tropical-forest.github.io/tags/Centos%E5%AE%89%E8%A3%85Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>VM ware上安装Centos</title>
    <link href="https://tropical-forest.github.io/2022/03/02/VM-ware%E4%B8%8A%E5%AE%89%E8%A3%85Centos/"/>
    <id>https://tropical-forest.github.io/2022/03/02/VM-ware%E4%B8%8A%E5%AE%89%E8%A3%85Centos/</id>
    <published>2022-03-02T15:28:18.000Z</published>
    <updated>2022-07-07T04:43:29.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VM-ware上安装Centos"><a href="#VM-ware上安装Centos" class="headerlink" title="VM ware上安装Centos"></a>VM ware上安装Centos</h1><p>centos虚拟机下载地址: <a href="http://mirrors.aliyun.com/centos/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/</a></p><p>VM ware安装具体教程上网找，这里不写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VM-ware上安装Centos&quot;&gt;&lt;a href=&quot;#VM-ware上安装Centos&quot; class=&quot;headerlink&quot; title=&quot;VM ware上安装Centos&quot;&gt;&lt;/a&gt;VM ware上安装Centos&lt;/h1&gt;&lt;p&gt;centos虚拟机下载地址:
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://tropical-forest.github.io/categories/Linux/"/>
    
    
      <category term="Centos安装" scheme="https://tropical-forest.github.io/tags/Centos%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>服务注册与发现框架Eureka</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/</id>
    <published>2022-03-02T01:29:39.000Z</published>
    <updated>2022-07-07T04:43:29.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务注册与发现框架Eureka"><a href="#服务注册与发现框架Eureka" class="headerlink" title="服务注册与发现框架Eureka"></a>服务注册与发现框架Eureka</h1><p>​    服务的注册发现对于微服务架构来说是一个非常重要的环节。在单一架构应用中，业务逻辑层中的接口之间的互相调用，是通过一个固定的host和post发起REST或者RPC调用。但是在微服务架构中，每个服务时动态变化的，难于通过静止配置的方式维护服务，以至于后来产生了大量的微服务框架来完成服务的自动化管理。</p><h2 id="Eureka的工作机制"><a href="#Eureka的工作机制" class="headerlink" title="Eureka的工作机制"></a>Eureka的工作机制</h2><h3 id="Eureka的工作原理"><a href="#Eureka的工作原理" class="headerlink" title="Eureka的工作原理"></a>Eureka的工作原理</h3><p>​    Spring Cloud框架下的服务注册与发现框架Eureka包含两个组件，分别是Eureka Server与Eureka Client。</p><p>(1) Eureka Server：服务注册服务器，也称为服务注册中心。各个服务启动后，会在Eureka Server中进行注册，这样Eureka Server的服务注册表中将会存储所有可用服务节点的信息。服务节点的信息可以在界面中直观地看到。</p><p>（2）Eureka Client: 也称为服务（服务实例），作为一个Java客户端，用于简化与Eureka Server的交互。Eureka Client内置一个使用轮询负载算法的负载均衡器。服务启动后，Eureka Client将会向Eureka Server发送心跳更新服务，如果Eureka Server在多个心跳周期内（默认90秒）没有收到某个服务的心跳，Eureka Server就将会从服务注册中把这个服务节点移除。</p><p><img src="/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/image-20220203110955757.png" alt="image-20220203110955757"></p><p>​                                                                      Eureka组件的工作原理</p><h3 id="服务提供者与服务消费者"><a href="#服务提供者与服务消费者" class="headerlink" title="服务提供者与服务消费者"></a>服务提供者与服务消费者</h3><p>​    Eureka Client存在两种角色，分别是服务提供者和服务消费者。</p><p><img src="/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/image-20220203112445241.png" alt="image-20220203112445241"></p><p>服务提供者和服务消费者都属于Eureka Client，它们都会将自己的信息通过REST API的形式提交给Eureka Server。服务消费者注册后，还会获取一份服务注册列表，该列表包含了所有向Eureka Server注册的服务信息。获取到服务注册信息后，服务消费者就会根据服务提供者的IP地址，通过HTTP远程调用服务提供者的服务。</p><ul><li>服务提供者和服务消费者是可以相互转换的。</li></ul><p>本博文所有代码：<a href="https://github.com/Tropical-Forest/springcloud" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud</a></p><h2 id="Eureka单节点模式例子"><a href="#Eureka单节点模式例子" class="headerlink" title="Eureka单节点模式例子"></a>Eureka单节点模式例子</h2><h3 id="IDEA生成eurekaServer端服务注册中心"><a href="#IDEA生成eurekaServer端服务注册中心" class="headerlink" title="IDEA生成eurekaServer端服务注册中心"></a>IDEA生成eurekaServer端服务注册中心</h3><p>cloud-eureka-server7001</p><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EurekaClient端cloud-provider-payment8001"><a href="#EurekaClient端cloud-provider-payment8001" class="headerlink" title="EurekaClient端cloud-provider-payment8001"></a>EurekaClient端cloud-provider-payment8001</h3><p>将注册进EurekaServer成为服务提供者provider</p><ol><li><p>新建module模块</p></li><li><p>改pom</p><p>主要依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3308/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.springcloud.entities</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册将EurekaServer默认ture</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓，集群必须设置为true才能配合ribbon使用负责均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单击模式</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>业务类</p><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001</a></p></li></ol><h3 id="EurekaClient端cloud-consumer-order80"><a href="#EurekaClient端cloud-consumer-order80" class="headerlink" title="EurekaClient端cloud-consumer-order80"></a>EurekaClient端cloud-consumer-order80</h3><p>将注册讲EurekaServer成为服务消费者consumer</p><ol><li>新建module模块</li></ol><ol><li><p>该pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册将EurekaServer默认ture</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓，集群必须设置为true才能配合ribbon使用负责均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>业务类</li></ol><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80</a></p><h2 id="Eureka集群模式例子"><a href="#Eureka集群模式例子" class="headerlink" title="Eureka集群模式例子"></a>Eureka集群模式例子</h2><pre><code>### Eureka服务器注册中心集群</code></pre><p>注意:这里修改C:\Windows\System32\drivers\etc地址下hosts文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       eureka7001.com</span><br><span class="line">127.0.0.1       eureka7002.com</span><br></pre></td></tr></table></figure><ol><li><p>新建module，其名称为cloud-eureka-server7002</p></li><li><p>改pom文件</p><p>其pom文件和cloud-eureka-server7001相同</p></li><li><p>写yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka server交互的地址查询服务和注册服务都是需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7002<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   cloud-eureka-server7001模块需要修改:</p><p>   改yaml文件</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群模式</span></span><br><span class="line">      <span class="comment">#设置与Eureka server交互的地址查询服务和注册服务都是需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment">#单击模式</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="comment">#关闭自我保护机制，保证不可用服务及时剔除</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h3 id="Eureka服务提供者集群"><a href="#Eureka服务提供者集群" class="headerlink" title="Eureka服务提供者集群"></a>Eureka服务提供者集群</h3><ol><li><p>新建module，其名称为cloud-provider-payment8002</p></li><li><p>改pom文件</p><p>和cloud-provider-payment8001的pom文件基本一样</p></li><li><p>写yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3308/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.springcloud.entities</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册将EurekaServer默认ture</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓，集群必须设置为true才能配合ribbon使用负责均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>业务类</li></ol><p>基本和cloud-provider-payment8001一样。</p><p>但是在cloud-consumer-order80模块中需要修改controller类中OrderController类中的“public static final String PAYMENT_URL = “<a href="http://localhost:8001”&quot;为&quot;public">http://localhost:8001”&quot;为&quot;public</a> static final String PAYMENT_URL = “<a href="http://CLOUD-PAYMENT-SERVICE" target="_blank" rel="noopener">http://CLOUD-PAYMENT-SERVICE</a>“”</p><p>还有修改config目录下ApplicationContextConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>   <span class="comment">//使用@loadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务注册与发现框架Eureka&quot;&gt;&lt;a href=&quot;#服务注册与发现框架Eureka&quot; class=&quot;headerlink&quot; title=&quot;服务注册与发现框架Eureka&quot;&gt;&lt;/a&gt;服务注册与发现框架Eureka&lt;/h1&gt;&lt;p&gt;​    服务的注册发现对于微服务架
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="服务注册与发现" scheme="https://tropical-forest.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    
      <category term="Eureka" scheme="https://tropical-forest.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>热部署Devtools</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/</id>
    <published>2022-03-02T01:26:26.000Z</published>
    <updated>2022-07-07T04:43:29.509Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA 中使用 spring-boot-devtools 实现热部署</p><blockquote><p>热部署可以让我们在更新代码时能实时的去测试是否正确，而不是每次都要重启项目，缩短重启的浪费的时间。</p></blockquote><h3 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h3><p>首先要让IDEA 能够自动编译，自动加载。打开settings ，找到如下位置，勾选 <code>Build project automatically</code></p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224634170.png" alt="image-20220301224634170"></p><p>然后 快捷键Ctrl+Alt+Shift+/ 选择 registry</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224651773.png" alt="image-20220301224651773"></p><p>然后找到这项，勾选。</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224709320.png" alt="image-20220301224709320"></p><h3 id="新建项目测试"><a href="#新建项目测试" class="headerlink" title="新建项目测试"></a>新建项目测试</h3><p>这里新建一个springboot的项目，前面的自定义，在选择依赖的地方，勾选上devtools.</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224720647.png" alt="image-20220301224720647"></p><p>然后新建controller类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDevtoolsController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">"这是原始的数据"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，进行访问：</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224737355.png" alt="image-20220301224737355"></p><p>修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDevtoolsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">"这是原始的数据"</span>;</span><br><span class="line">        msg += <span class="string">"加了一句话"</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后测试，发现成功！！！</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224749170.png" alt="image-20220301224749170"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IDEA 中使用 spring-boot-devtools 实现热部署&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热部署可以让我们在更新代码时能实时的去测试是否正确，而不是每次都要重启项目，缩短重启的浪费的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置IDE
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="热部署" scheme="https://tropical-forest.github.io/tags/%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构编码构建</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/</id>
    <published>2022-03-02T01:24:42.000Z</published>
    <updated>2022-07-07T04:43:29.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h1><h2 id="父工程创建"><a href="#父工程创建" class="headerlink" title="父工程创建"></a>父工程创建</h2><p>创建一个项目为父工程，删除其他文件，只留pom文件，一开始不要急着编码，根据“约定&gt;配置&gt;编码”指导原则，我们要配置好springboot、springcloud、maven、mysql、字符编码、JDK等版本协调一致。然后在pom文件中统一管理jar包版本。</p><p>POM文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2022<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-eureka-server7002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-provider-payment8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEcodeing</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEcodeing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用:锁定版本+子modlue不用写groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p> dependencyManagement 和 dependencies 的区别</p><pre><code>  1. dependencies:自动引入声明在dependencies里的所有依赖，并默认被所有的子项目继承。</code></pre><p>如果项目中不写依赖项，则会从父项目继承（属性全部继承）声明在父项目dependencies里的依赖项。</p><pre><code>  2. dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要的依赖。</code></pre><p>如果不在子项目中声明依赖，是不会从父项目中继承的；</p><p>只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;</p><p>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</p><p>同时dependencyManagement让子项目引用依赖，而不用显示的列出版本号。</p><p>Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用在这个dependencyManagement元素中指定的版本号,实现所有子项目使用的依赖项为同一版本。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面以支付-订单为例实现微服务架构编码的构建</p><p>操作步骤: 建module模块——-》改POM——-&gt;写YML———&gt;主启动———》业务类——-》测试</p><h3 id="微服务提供者支付Module模块"><a href="#微服务提供者支付Module模块" class="headerlink" title="微服务提供者支付Module模块"></a>微服务提供者支付Module模块</h3><p>cloud-provider-payment8001</p><ol><li>改POM</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2022<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>写YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3308/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.springcloud.entities</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>业务类</li></ol><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001</a></p><h3 id="微服务消费者订单Module模块"><a href="#微服务消费者订单Module模块" class="headerlink" title="微服务消费者订单Module模块"></a>微服务消费者订单Module模块</h3><p>cloud-consumer-order80</p><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80</a></p><h2 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h2><p>由于cloud-provider-payment8001模块与cloud-consumer-order80模块中有一样的entitie类，所以在父工程中新建一个模块，假设命名为cloud-api-commons。然后把共同的代码放进该模块中，例如在本例子中，共同的模块就是entities。所以把它放进cloud-api-commons，然后以前有entities类的模块在该模块中删除entities。接着该调用entites类的模块中在其pom文件中添加配置，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构编码构建&quot;&gt;&lt;a href=&quot;#微服务架构编码构建&quot; class=&quot;headerlink&quot; title=&quot;微服务架构编码构建&quot;&gt;&lt;/a&gt;微服务架构编码构建&lt;/h1&gt;&lt;h2 id=&quot;父工程创建&quot;&gt;&lt;a href=&quot;#父工程创建&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="微服务架构编码" scheme="https://tropical-forest.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构基础理论入门</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/</id>
    <published>2022-03-02T01:06:48.000Z</published>
    <updated>2022-07-07T04:43:29.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构基础"><a href="#微服务架构基础" class="headerlink" title="微服务架构基础"></a>微服务架构基础</h1><h2 id="微服务架构概述"><a href="#微服务架构概述" class="headerlink" title="微服务架构概述"></a>微服务架构概述</h2><p>微服务架构师一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其对立的进程中，服务与服务采用轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><h2 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h2><p>SpringCloud是分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶</p><p><img src="/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/image-20220301213520720.png" alt="image-20220301213520720"></p><h2 id="Spring-Cloud技术栈"><a href="#Spring-Cloud技术栈" class="headerlink" title="Spring Cloud技术栈"></a>Spring Cloud技术栈</h2><ul><li>服务注册与发现</li><li>服务调用</li><li>服务熔断</li><li>负载均衡</li><li>服务降级</li><li>服务消息队列</li><li>配置中心管理</li><li>服务网关</li><li>服务监控</li><li>全链路追踪</li><li>自动化构建部署</li><li>服务定时任务调度操作</li></ul><p><img src="/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/image-20220301214516556.png" alt="image-20220301214516556"></p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构基础&quot;&gt;&lt;a href=&quot;#微服务架构基础&quot; class=&quot;headerlink&quot; title=&quot;微服务架构基础&quot;&gt;&lt;/a&gt;微服务架构基础&lt;/h1&gt;&lt;h2 id=&quot;微服务架构概述&quot;&gt;&lt;a href=&quot;#微服务架构概述&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="微服务架构基础" scheme="https://tropical-forest.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Springcloud" scheme="https://tropical-forest.github.io/tags/Springcloud/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构与Spring Cloud</title>
    <link href="https://tropical-forest.github.io/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/"/>
    <id>https://tropical-forest.github.io/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/</id>
    <published>2022-03-01T15:55:21.000Z</published>
    <updated>2022-07-07T04:43:29.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构与Spring-Cloud"><a href="#微服务架构与Spring-Cloud" class="headerlink" title="微服务架构与Spring Cloud"></a>微服务架构与Spring Cloud</h1><h2 id="认识架构"><a href="#认识架构" class="headerlink" title="认识架构"></a>认识架构</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>​    一个典型的单体架构就是将所有业务场景的表示层、业务逻辑层和数据访问层放在一个工程中，最终经过编译、打包，部署在一台服务器上。</p><p>​    随着业务越来越复杂，应用程序需要增加的功能越来越多，单体式的代码量越来越大，代码可读性、可维护性和扩展性会下降。同时，使用单体架构带来的隐患会比较多，由于系统过于庞大以及关联较多，应用中的任何一个Bug都有可能导致整个系统宕机。</p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202202045201.png" alt="image-20220202202045201"></p><h3 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h3><p>​        面向服务架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202202448754.png" alt="image-20220202202448754"></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p> 微服务架构指的是将大型复杂系统按功能或者业务需求垂直切分成更小的子系统，这些子系统以独立部署的子进程存在，它们之间通过轻量级的、跨语言的同步（比如REST，gRPC）或者异步（消息）网络调用进行通信。</p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202202643157.png" alt="image-20220202202643157"></p><h2 id="微服务架构的功能"><a href="#微服务架构的功能" class="headerlink" title="微服务架构的功能"></a>微服务架构的功能</h2><p>微服务架构的功能如下:</p><ol><li>微服务架构的自动化部署</li><li>服务集中化管理</li><li>支持熔断机制</li></ol><h2 id="初识SpringCloud"><a href="#初识SpringCloud" class="headerlink" title="初识SpringCloud"></a>初识SpringCloud</h2><h3 id="Spring-Cloud概述"><a href="#Spring-Cloud概述" class="headerlink" title="Spring Cloud概述"></a>Spring Cloud概述</h3><p>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</p><p>翻译</p><p>Spring Cloud 为开发者提供了工具来快速构建分布式系统中的一些常见模式（例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话，集群状态）。分布式系统的协调导致了样板模式，使用 Spring Cloud 开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发人员自己的笔记本电脑、裸机数据中心和 Cloud Foundry 等托管平台。</p><p>特点:</p><p>1.组件丰富，功能齐全</p><p>2.开箱即用，快速启动</p><p>3.模块部署方便，项目维护度降低</p><p>4.项目扩展性和稳定性较好</p><p>5.具有容错处理机制</p><h3 id="Spring-Cloud微服务架构的组件"><a href="#Spring-Cloud微服务架构的组件" class="headerlink" title="Spring Cloud微服务架构的组件"></a>Spring Cloud微服务架构的组件</h3><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202205652417.png" alt="image-20220202205652417" style="zoom:50%;"></p><p>Spring Cloud包含的常用组件以及模块。</p><p>（1）Spring Cloud Config: 分布式配置中心，负责把配置放到远程服务器上，集中化管理集群配置。目前支持本地存储、Git和Subversion</p><p>（2）Spring Cloud Netflix：核心组件，负责对多个Netflix OSS开源套件进行整合</p><ul><li>Eureka:服务注册发现中心，基于REST服务的分布式中间件，主要用于服务管理</li><li>Hystrix:熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。</li><li>Ribbon：云端负载均衡器。支持多种负载均衡策略，可配合服务发现和熔断器使用，在客户端实现负载均衡</li><li>Feign：一个REST客户端，基于Ribbon和Hystrix的声明式服务调用组件</li><li>Zuul：服务网关，为微服务架构集群提供代理、过滤、路由等功能</li></ul><p>（3）Spring Cloud Bus:事件、消息总线，用于在集群中传播状态变化，可与Spring Cloud Config联合实现热部署。</p><p>（4） Spring Cloud Stream: 数据流操作开发包，可与Redis、RabbitMQ、Kafka等架构进行消息发送与接收</p><p>（5）Spring Cloud Sleuth:服务追踪框架，可以与Zipkin、Apache Htrace和ELK等数据分析、服务跟踪系统进行整合，为跟踪服务、解决问题提供了便利。</p><p><strong>Spring Cloud 结构图：</strong></p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202210934009.png" alt="image-20220202210934009"></p><p>Spring Cloud与Dubbo的比较:</p><ul><li>Dubbo底层是使用Netty这样的NIO框架，是基于TCP协议传输的，配合以Hession序列化完成RPC通信;</li><li>而SpringCloud是基于Http协议+rest接口调用远程过程的通信，相对来说，Http请求会有更大的报文，占的带宽也会更多。但是REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更为合适，至于注重通信速度还是方便灵活性，具体情况具体考虑。</li></ul><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202211155338.png" alt="image-20220202211155338"></p><p>最后：</p><p>注意:SpringBoot与Spring Cloud兼容问题:</p><p>地址:<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220203115810283.png" alt="image-20220203115810283" style="zoom:80%;"></p><p>参考地址:<a href="https://segmentfault.com/a/1190000023675354" target="_blank" rel="noopener">https://segmentfault.com/a/1190000023675354</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构与Spring-Cloud&quot;&gt;&lt;a href=&quot;#微服务架构与Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;微服务架构与Spring Cloud&quot;&gt;&lt;/a&gt;微服务架构与Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;认
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="微服务架构" scheme="https://tropical-forest.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot应用监控</title>
    <link href="https://tropical-forest.github.io/2022/02/02/Spring-Boot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"/>
    <id>https://tropical-forest.github.io/2022/02/02/Spring-Boot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/</id>
    <published>2022-02-02T08:57:34.000Z</published>
    <updated>2022-07-07T04:43:29.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot应用监控"><a href="#Spring-Boot应用监控" class="headerlink" title="Spring Boot应用监控"></a>Spring Boot应用监控</h1><h2 id="应用监控介绍"><a href="#应用监控介绍" class="headerlink" title="应用监控介绍"></a>应用监控介绍</h2><p>​     Spring Boot大部分模块都是用于开发业务功能或者外部资源。除此之外，Spring Boot还为我们提供了Spring-boot-starter-actuator模块，该模块主要用于管理和监控应用，是一个暴露自身信息的模块。Spring-boot-starter-actuator模块可以有效地减少监控意系统在采集应用指标时的开发量。</p><p>监控和管理端点</p><div class="table-container"><table><thead><tr><th>路径（端点名）</th><th>描述</th><th>鉴权</th></tr></thead><tbody><tr><td>/actuator</td><td>所有EndPoint的列表，需加入spring HATEOAS</td><td></td></tr><tr><td>/autoconfig</td><td>当前应用的所有自动配置</td><td>true</td></tr><tr><td>/beans</td><td>当前应用的所有Bean信息</td><td>true</td></tr><tr><td>/configprops</td><td>当前应用的所有配置属性</td><td>true</td></tr><tr><td>/dump</td><td>显示当前应用线程状态信息</td><td>true</td></tr><tr><td>/env</td><td>显示当前应用当前环境信息</td><td>true</td></tr><tr><td>/health</td><td>显示当前应用健康状况</td><td>false</td></tr><tr><td>/info</td><td>显示当前应用信息</td><td>false</td></tr><tr><td>/metrics</td><td>显示当前应用的各项指标信息</td><td>true</td></tr><tr><td>/mappings</td><td>显示所有的@RequestMapping映射的路径</td><td>true</td></tr><tr><td>/shutdown</td><td>关闭当前引用（默认关闭）,不支持GET,支持POST</td><td>true</td></tr><tr><td>/trace</td><td>显示追踪信息</td><td>false</td></tr></tbody></table></div><h2 id="使用应用监控"><a href="#使用应用监控" class="headerlink" title="使用应用监控"></a>使用应用监控</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#启动所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="comment">#自定义管理端点路径</span></span><br><span class="line"><span class="comment">#management.endpoints.web.base-path=/manage</span></span><br></pre></td></tr></table></figure><p>添加<code>management.endpoints.web.exposure.include=*</code>配置后启动应用，访问 <a href="http://127.0.0.1:8080/actuator" target="_blank" rel="noopener">http://127.0.0.1:8080/actuator</a> 我们可以看到所有的 Actuator 端点列表。</p><p><img src="/2022/02/02/Spring-Boot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/image-20220130183751090.png" alt="image-20220130183751090"></p><p>如果将management.endpoints.enabled-by-default设置为false，则禁用所有端点，如需启用则如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.endpoint.info.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="启用端点语法"><a href="#启用端点语法" class="headerlink" title="启用端点语法"></a>启用端点语法</h3><p>默认情况下，除了<code>shutdown</code>启用之外的所有端点。要配置端点的启用，请使用其<code>management.endpoint.&lt;id&gt;.enabled</code>属性。以下示例启用<code>shutdown</code>端点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>如果您希望端点启用是选择加入而不是选择退出，请将<code>management.endpoints.enabled-by-default</code>属性设置为<code>false</code>并使用单个端点<code>enabled</code>属性来选择重新加入。以下示例启用<code>info</code>端点并禁用所有其他端点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.endpoint.info.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="内置端点的默认曝光"><a href="#内置端点的默认曝光" class="headerlink" title="内置端点的默认曝光"></a>内置端点的默认曝光</h3><div class="table-container"><table><thead><tr><th style="text-align:left">ID</th><th style="text-align:left">JMX</th><th style="text-align:left">Web</th></tr></thead><tbody><tr><td style="text-align:left"><code>auditevents</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>beans</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>caches</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>conditions</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>configprops</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>env</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>flyway</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>health</code></td><td style="text-align:left">Yes</td><td style="text-align:left">Yes</td></tr><tr><td style="text-align:left"><code>heapdump</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>httptrace</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>info</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>integrationgraph</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>jolokia</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>logfile</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>loggers</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>liquibase</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>metrics</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>mappings</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>prometheus</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>quartz</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>scheduledtasks</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>sessions</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>shutdown</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>startup</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>threaddump</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr></tbody></table></div><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot应用监控&quot;&gt;&lt;a href=&quot;#Spring-Boot应用监控&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot应用监控&quot;&gt;&lt;/a&gt;Spring Boot应用监控&lt;/h1&gt;&lt;h2 id=&quot;应用监控介绍&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot应用监控" scheme="https://tropical-forest.github.io/tags/SpringBoot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>集成Dubbo和Zookeeper</title>
    <link href="https://tropical-forest.github.io/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/"/>
    <id>https://tropical-forest.github.io/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/</id>
    <published>2022-02-02T08:52:43.000Z</published>
    <updated>2022-07-07T04:43:29.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成Dubbo和Zookeeper"><a href="#集成Dubbo和Zookeeper" class="headerlink" title="集成Dubbo和Zookeeper"></a>集成Dubbo和Zookeeper</h1><h2 id="Zookeeper介绍与安装"><a href="#Zookeeper介绍与安装" class="headerlink" title="Zookeeper介绍与安装"></a>Zookeeper介绍与安装</h2><h3 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h3><p>​    Zookeeper是一个开源的分布式应用程序协调服务，提供的功能包括命名服务、配置管理、集群管理、分布式锁等。</p><p>（1）命名服务。可以简单理解为电话簿。电话号码不好记住，但是人名好记。要打谁的电话，直接查人名就好了。在分布式环境下，经常需要对应用/服务进行统一命名，便于识别不同服务。类似于域名与IP之间的对应关系，域名容易记住。Zookeeper通过名称来获取资源或服务的地址、提供者等信息。</p><p>（2）配置管理。分布式系统都有大量服务器，比如在搭建Hadoop的HDFS的时候，需要在一台Master主机器上配置好HDFS需要的各种配置文件，然后通过scp命令把这些配置复制到其他节点上，这样各个机器拿到的配置信息是一致的，才能成功运行HDFS服务。Zookeeper提供了这样的服务：一种集中管理配置的方法，我们在这个集中的地方修改了配置，所有对这个配置感兴趣的都可以获得变更。这样就省去了手动复制配置，还保证了可靠和一致性。</p><p>（3）集群管理。集群管理包含两点：是否有机器退出和加入、选举Master。Zookeeper集群管理就是感知变化，做出对应的策略。</p><p>（4）分布式锁。Zookeeper的一致性文件系统使得锁的问题变得容易。锁服务可以分为两类，一类是保持独占，另一类是控制时序。单机程序的各个进程对互斥资源进行访问时需要加锁，分布式程序分布在各个主机上的进程对互斥资源访问时也需要加锁。</p><p>Zookeeper的一个最常用的使用场景是担任服务生产者和服务者的注册中心。服务生产者将自己提供的服务注册到Zookeeper中心，服务消费者在进行服务调用的时候先到Zookeeper中查找服务，获取服务生产者的详细信息之后，再去调用服务生产者的内容与数据。具体如下图。</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131152310604.png" alt="image-20220131152310604"></p><h3 id="Zookeeper的安装与启动"><a href="#Zookeeper的安装与启动" class="headerlink" title="Zookeeper的安装与启动"></a>Zookeeper的安装与启动</h3><p>window版本下载网址:<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a></p><p>下载后解压为:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131153959538.png" alt="image-20220131153959538"></p><p>将 conf 目录下的 zoo_sample.cfg 文件，复制一份，重命名为 zoo.cfg:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131153113821.png" alt="image-20220131153113821"></p><p>双击 zkServer.cmd 启动程序:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131153441167.png" alt="image-20220131153441167"></p><p>控制台显示 <strong>bind to port 0.0.0.0/0.0.0.0:2181</strong>，表示服务端启动成功!</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131154417313.png" alt="image-20220131154417313"></p><p>双击zkCli.cmd 启动客户端</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131154453028.png" alt="image-20220131154453028"></p><p>出现 Welcome to Zookeeper！，表示我们成功启动客户端。</p><p>参考文章：<a href="https://www.runoob.com/w3cnote/zookeeper-setup.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/zookeeper-setup.html</a></p><h2 id="Spring-Boot集成Dubbo"><a href="#Spring-Boot集成Dubbo" class="headerlink" title="Spring Boot集成Dubbo"></a>Spring Boot集成Dubbo</h2><h3 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h3><p>​    Dubbo是阿里巴巴B2B平台技术部开发的一款Java服务平台框架以及SOA治理方案。其功能主要包括：高性能NIO通信及多协议集成、服务动态寻址与路由、软负载均衡与容错、依赖分析与降级等。Dubbo简单的底层框架如下图所示:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131163002917.png" alt="image-20220131163002917"></p><p>​    Registry是服务注册与发现的注册中心，Provider是暴露服务的服务提供方，Consumer是调用远程服务的服务消费方，Monitor是统计服务的调用次数和调用时间的监控中心，Container是服务运行容器。Dubbo简单的调用关系如下:</p><p>​    (1) 服务容器Container负责启动、加载、运行服务提供者Provider</p><p>​    (2)服务提供者Provider在启动时，向注册中心Registry注册自己提供的服务</p><p>（3）服务消费者Consumer在启动时，向注册中心Registry订阅自己所需的服务。</p><p>​    (4)注册中心Registry返回服务提供者地址列表给消费者Provider，如果有变更，注册中心Registry将基于长连接推送，变更数据给消费者Consumer</p><p>（5)服务消费者Consumer从提供者地址列表基于软负载均衡算法选一台提供者进行调用，如果调用失败，就再选另一台调用</p><p>（6）服务消费者Consumer和提供者Provider在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h3 id="服务与接口拆分思路"><a href="#服务与接口拆分思路" class="headerlink" title="服务与接口拆分思路"></a>服务与接口拆分思路</h3><p>​    经过前面的学习，my-spring-boot项目已经集成很多技术，也定义了很多接口。但是对于真实的项目来说，特别是对于互联网公司的项目来说，my-spring-boot这个大的服务承载的内容太多，诸多服务接口（比如AyUserService、AyMoodService、AyRoleService等）糅合在一起对外提供服务已经违背了微服务理念。因此，我们应该对my-spring-boot项目进行服务拆分，使它被拆分成一个个小的服务，我们可以按照业务或者功能维度对服务进行拆分，具体如下图:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131165550093.png" alt="image-20220131165550093"></p><p>​    在上图中，my-spring-boot项目被拆分为用户服务、角色服务、说说服务等。my-spring-boot项目依赖于这些底层的服务为其提供相应的功能，而用户服务、角色服务和说说服务时面向接口API编程的，符合基本的编程规则。通过服务的拆分和面向接口编程，对应项目扩展和团队分工非常有利。</p><h3 id="SpringBoot-Dubbo-Zookeeper"><a href="#SpringBoot-Dubbo-Zookeeper" class="headerlink" title="SpringBoot+Dubbo+Zookeeper"></a>SpringBoot+Dubbo+Zookeeper</h3><p><a href="https://blog.csdn.net/qq_33369905/article/details/106647287" target="_blank" rel="noopener">https://blog.csdn.net/qq_33369905/article/details/106647287</a></p><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集成Dubbo和Zookeeper&quot;&gt;&lt;a href=&quot;#集成Dubbo和Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;集成Dubbo和Zookeeper&quot;&gt;&lt;/a&gt;集成Dubbo和Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;Zooke
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="集成Dubbo和Zookeeper" scheme="https://tropical-forest.github.io/tags/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/"/>
    
  </entry>
  
  <entry>
    <title>多环境配置与部署</title>
    <link href="https://tropical-forest.github.io/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>https://tropical-forest.github.io/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2022-02-02T08:48:46.000Z</published>
    <updated>2022-07-07T04:43:29.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多环境配置与部署"><a href="#多环境配置与部署" class="headerlink" title="多环境配置与部署"></a>多环境配置与部署</h1><h2 id="多环境配置介绍"><a href="#多环境配置介绍" class="headerlink" title="多环境配置介绍"></a>多环境配置介绍</h2><p>​    在项目开发过程中，项目不同的角色会使用不同的环境。例如，开发人员会使用开发环境、测试人员会使用测试环境、性能测试会使用性能测试环境、项目开发完成之后会把项目部署到线上环境等，不同的环境往往会连接不同的MySQL数据库、Redis缓存、MQ消息中间件等，环境之间相互独立于隔离才不会相互影响，隔离的环境便于部署，提高工作效率。具体隔离环境如下图：</p><p><img src="/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/image-20220201225210743.png" alt="image-20220201225210743"></p><h2 id="多环境配置使用"><a href="#多环境配置使用" class="headerlink" title="多环境配置使用"></a>多环境配置使用</h2><h3 id="添加多个配置文件"><a href="#添加多个配置文件" class="headerlink" title="添加多个配置文件"></a>添加多个配置文件</h3><p>​    假如项目my-spring-boot需要3个环境：开发环境、测试环境、性能测试环境。我们复制my-spring-boot项目配置文件application.properties,分别取名为application-dev.properties、application-test.properties、application-perform.properties，作为开发环境、测试环境、性能测试环境。</p><p>​    每个配置文件对应的MySQL数据库、Redis缓存、ActiveMQ消息队列等配置参数都不相同。</p><h3 id="配置激活选项"><a href="#配置激活选项" class="headerlink" title="配置激活选项"></a>配置激活选项</h3><p>​    多环境的配置文件开发完成之后，我们在my-spring-boot的配置文件application.properties中添加配置激活选项，具体代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 激活开发环境配置</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment">### 激活测试环境配置</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">test</span></span><br><span class="line"><span class="comment">### 激活性能测试环境配置</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">perform</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​    多环境配置文件和配置激活选项开发完成之后，修改application-dev.properties、application-test.properties、application-perform.properties配置文件的数据库连接，具体代码如下:</p><p>开发环境配置文件application-dev.properties的具体代码修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>测试环境配置文件application-test.properties的具体代码修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test2</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>性能测试环境配置文件application-perform.properties的具体代码修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test3</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>项目结构如下:</p><p><img src="/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/image-20220202112612730.png" alt="image-20220202112612730" style="zoom:50%;"></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AyUserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ayUser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AyUserService ayUserService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//查询数据库所有用户</span></span><br><span class="line">      List&lt;AyUser&gt; ayUserList = ayUserService.findAll();</span><br><span class="line">      model.addAttribute(<span class="string">"users"</span>,ayUserList);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"ayUser"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUser.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserRepository.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AyUser</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyUser <span class="title">findById</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">AyUser <span class="title">save</span><span class="params">(AyUser ayUser)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    <span class="function">Page&lt;AyUser&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AyUserRepository ayUserRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">save</span><span class="params">(AyUser ayUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.save(ayUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        ayUserRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;AyUser&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findAll(pageable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByNameLike(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByIdIn(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ayUser.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 激活开发环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>application-dve.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>application-perform.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 性能测试环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test3</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>application-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test2</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>想切换到哪个环境就在application.yaml里面切换。然后重启启动项目即可。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Spring-Boot-内置Tomcat"><a href="#Spring-Boot-内置Tomcat" class="headerlink" title="Spring Boot 内置Tomcat"></a>Spring Boot 内置Tomcat</h3><p>​    Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/服务器" target="_blank" rel="noopener">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noopener">HTML</a>（<a href="https://baike.baidu.com/item/标准通用标记语言/6805073" target="_blank" rel="noopener">标准通用标记语言</a>下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>​    如果想使用其他Servlet容器，比如Jetty作为Spring Boot 默认内置容器，只需要修改spring-boot-starter-web依赖即可。使用Jetty容器作为SpringBoot默认内置容器，具体修改代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多环境配置与部署&quot;&gt;&lt;a href=&quot;#多环境配置与部署&quot; class=&quot;headerlink&quot; title=&quot;多环境配置与部署&quot;&gt;&lt;/a&gt;多环境配置与部署&lt;/h1&gt;&lt;h2 id=&quot;多环境配置介绍&quot;&gt;&lt;a href=&quot;#多环境配置介绍&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="多环境" scheme="https://tropical-forest.github.io/tags/%E5%A4%9A%E7%8E%AF%E5%A2%83/"/>
    
      <category term="部署" scheme="https://tropical-forest.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot原理解析</title>
    <link href="https://tropical-forest.github.io/2022/02/02/SpringBoot%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://tropical-forest.github.io/2022/02/02/SpringBoot%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-02-02T08:45:05.000Z</published>
    <updated>2022-07-07T04:43:29.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot原理解析"><a href="#Spring-Boot原理解析" class="headerlink" title="Spring Boot原理解析"></a>Spring Boot原理解析</h1><h2 id="回顾入口类"><a href="#回顾入口类" class="headerlink" title="回顾入口类"></a>回顾入口类</h2><h3 id="SpringbootEnvilsApplication入口类"><a href="#SpringbootEnvilsApplication入口类" class="headerlink" title="SpringbootEnvilsApplication入口类"></a>SpringbootEnvilsApplication入口类</h3><p>​    首先，我们看一下项目springboot-evils的入口类SpringbootEnvilsApplication，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootEnvilsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnvilsApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在入口类SpringbootEnvilsApplication中，@SpringBootApplication注解和main方法都是主动生成的。下面我们要了解@SpringBootApplication注解和SpringApplication.run方法到底为我们找了写什么。</p><h3 id="SpringBootApplication原理"><a href="#SpringBootApplication原理" class="headerlink" title="@SpringBootApplication原理"></a>@SpringBootApplication原理</h3><p>​    @SpringBootApplication开启了Spring的组件扫描和Spring Boot自动配置功能。实际上它是一个复合注解，包含3个重要的注解：@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan</p><p>其源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">   <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootConfiguration</strong>注解: 表明该类使用Spring基于Java的注解，Spring Boot推荐我们使用基于Java而不X是XML的配置。@SpringBootConfiguration源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">  <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration是JavaConfig形式的Spring IOC容器的配置类使用的@Configuration。</p><p><strong>@EnableAutoConfiguration</strong>源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    从@EnableAutoConfiguration的源代码可以看出，其包含@Import注解。而我们知道，@Import注解的主要作用就是借助AutoConfigurationImportSelector将Spring Boot应用所有符合条件的@Configuration配置到当前Spring Boot创建并使用到Ioc容器中，Ioc容器就是Spring应用程序上下文ApplicationContext.</p><p><strong>@ComponentScan</strong>注解：启动组件扫描，开发的组件或bean定义能被自动发现并注入Spring应用程序上下文。比如我们在控制层添加@Controller注解、在服务层添加@Service注解和@Component注解等，这些注解都可以被@ComponentScan注解扫描到。</p><h3 id="SpringApplication的run方法"><a href="#SpringApplication的run方法" class="headerlink" title="SpringApplication的run方法"></a>SpringApplication的run方法</h3><p>​    在run方法中，首先创建一个SpringApplication对象实例，然后调用SpringApplication的run方法。SpringApplication.run方法的原代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        DefaultBootstrapContext bootstrapContext = <span class="keyword">this</span>.createBootstrapContext();</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line">        <span class="comment">//开启监听器</span></span><br><span class="line">        SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">        listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">            ConfigurableEnvironment environment = <span class="keyword">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">            <span class="keyword">this</span>.configureIgnoreBeanInfo(environment);</span><br><span class="line">            Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line">            <span class="comment">//创建应用上下文</span></span><br><span class="line">            context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line">            context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">            <span class="comment">//准备应用上下文</span></span><br><span class="line">            <span class="keyword">this</span>.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">            <span class="comment">//刷新应用上下文</span></span><br><span class="line">            <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line">            <span class="comment">//刷新后操作</span></span><br><span class="line">            <span class="keyword">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">            Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">                (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(<span class="keyword">this</span>.getApplicationLog(), timeTakenToStartup);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            listeners.started(context, timeTakenToStartup);</span><br><span class="line">            <span class="keyword">this</span>.callRunners(context, applicationArguments);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, var12, listeners);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var12);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Duration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">            listeners.ready(context, timeTakenToReady);</span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, var11, (SpringApplicationRunListeners)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var11);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源代码可以看出，Spring Boot首先开启了一个<strong>SpringApplicationRunListeners</strong>监听器，然后通过createApplicationContext、prepareContext、refreshContext方法创建、准备、刷新应用上下文ConfigurableApplicationContext，通过上下文加载应用所需的类和各种环境配置等，最后启动一个应用实例。</p><h3 id="SpringApplicationRunListeners监听器"><a href="#SpringApplicationRunListeners监听器" class="headerlink" title="SpringApplicationRunListeners监听器"></a>SpringApplicationRunListeners监听器</h3><p>​    SpringApplicationRunListeners接口规定了SpringBoot的生命周期，在各个生命周期广播相应的事件（Application），实际调用的是ApplicationListener类。SpringApplicationRunListener的源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//刚执行run方法时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//环境建立好时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//上下文建立好时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//上下文载入配置时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.running(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationContextInitializer接口"><a href="#ApplicationContextInitializer接口" class="headerlink" title="ApplicationContextInitializer接口"></a>ApplicationContextInitializer接口</h3><p>​    在SpringBoot准备上下文prepareContext时，会对ConfigurableApplicationContext实例做进一步的设置或者处理。prepareContext的源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">        context.setEnvironment(environment);</span><br><span class="line">        <span class="keyword">this</span>.postProcessApplicationContext(context);</span><br><span class="line">        <span class="keyword">this</span>.applyInitializers(context);</span><br><span class="line">        listeners.contextPrepared(context);</span><br><span class="line">        bootstrapContext.close(context);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.logStartupProfileInfo(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">        <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> AbstractAutowireCapableBeanFactory) &#123;</span><br><span class="line">            ((AbstractAutowireCapableBeanFactory)beanFactory).setAllowCircularReferences(<span class="keyword">this</span>.allowCircularReferences);</span><br><span class="line">            <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">                ((DefaultListableBeanFactory)beanFactory).setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">            context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Object&gt; sources = <span class="keyword">this</span>.getAllSources();</span><br><span class="line">        Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">        <span class="keyword">this</span>.load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">        listeners.contextLoaded(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    在准备上下文prepareContext方法中，通过applyInitializers方法对context上下文进行设置和处理。applyInitializers具体源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyInitializers</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        Iterator var2 = <span class="keyword">this</span>.getInitializers().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">            ApplicationContextInitializer initializer = (ApplicationContextInitializer)var2.next();</span><br><span class="line">            Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(initializer.getClass(), ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Assert.isInstanceOf(requiredType, context, <span class="string">"Unable to call initializer."</span>);</span><br><span class="line">            initializer.initialize(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    在applyInitializers方法中，主要调用ApplicationContextInitializer类的initialize方法对应用上下文进行设置和处理。ApplicationContextInitializer本质上是一个回调接口，用于在ConfigurableApplicationContext执行refresh操作之前对它进行一些初始化操作。</p><h2 id="SpringApplication执行流程"><a href="#SpringApplication执行流程" class="headerlink" title="SpringApplication执行流程"></a>SpringApplication执行流程</h2><p>如下图所示</p><p><img src="/2022/02/02/SpringBoot%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/image-20220202162429444.png" alt="image-20220202162429444" style="zoom:150%;"></p><ol><li>在项目启动时，调用入口类SpringbootEnvilsApplication的main方法。</li><li>入口类SpringbootEnvilsApplication的main方法会调用SpringApplication的静态方法run</li><li>在run方法中首先创建一个SpringApplication对象实例，然后调用SpringApplication对象实例的run方法。</li><li>查询和加载所有的SpringApplicationListener监听器。</li><li>SpringApplicationListener监听器调用其starting方法，Spring Boot通知这些SpringApplicationListener监听器，马上要开始执行</li><li>创建和准备Spring Boot 应用将要使用的Environment环境，包括配置用的PropertySource以及Profile.</li><li>创建和初始化应用上下文ApplicationContext.这一步只是准备工作，并未开始正式创建。</li><li>这一步是最重要的，Spring Boot会通过@EnableAutoConfiguration获取所有配置以及其他形式的Ioc容器配置，并加载到已经准备完毕的ApplicationContext。</li><li>主要是调用ApplicationContextInitializer类的initialize方法对应用上下文进行设置和处理</li><li>调用ApplicationContext上下文的refresh方法，使Ioc容器达到可用状态。</li><li>查找当前ApplicationContext上下文是否注册ApplicationRunner与CommandLineRunner，如果有，循环变量执行ApplicationRunner和CommandLineRunner的run方法。</li><li>执行SpringApplicationListener的finished方法，Spring Boot应用启动完毕。</li></ol><h2 id="Spring-boot-starter原理"><a href="#Spring-boot-starter原理" class="headerlink" title="Spring-boot-starter原理"></a>Spring-boot-starter原理</h2><p>所有<strong>官方</strong>启动器都遵循类似的命名模式；<code>spring-boot-starter-*</code>，其中<code>*</code>是特定类型的应用程序。此命名结构旨在帮助您在需要查找启动器时提供帮助。许多 IDE 中的 Maven 集成允许您按名称搜索依赖项。例如，安装了适当的 Eclipse 或 Spring Tools 插件后，您可以<code>ctrl-space</code>在 POM 编辑器中按下并键入“spring-boot-starter”以获取完整列表。</p><p>正如“<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-auto-configuration.custom-starter" target="_blank" rel="noopener">创建您自己的 Starter</a> ”部分所述，第三方 starter 不应以 开头<code>spring-boot</code>，因为它是为官方 Spring Boot 工件保留的。相反，第三方启动器通常以项目名称开头。例如，一个名为的第三方启动项目<code>thirdpartyproject</code>通常被命名为<code>thirdpartyproject-spring-boot-starter</code>.（来自springboot官网）</p><div class="table-container"><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>spring-boot-starter</code></td><td style="text-align:left">核心启动器，包括自动配置支持、日志记录和 YAML</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-activemq</code></td><td style="text-align:left">使用 Apache ActiveMQ 进行 JMS 消息传递的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-amqp</code></td><td style="text-align:left">使用 Spring AMQP 和 Rabbit MQ 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-aop</code></td><td style="text-align:left">使用 Spring AOP 和 AspectJ 进行面向方面编程的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-artemis</code></td><td style="text-align:left">使用 Apache Artemis 的 JMS 消息传递启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-batch</code></td><td style="text-align:left">使用 Spring Batch 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-cache</code></td><td style="text-align:left">使用 Spring Framework 的缓存支持的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-cassandra</code></td><td style="text-align:left">使用 Cassandra 分布式数据库和 Spring Data Cassandra 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-cassandra-reactive</code></td><td style="text-align:left">使用 Cassandra 分布式数据库和 Spring Data Cassandra Reactive 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-couchbase</code></td><td style="text-align:left">使用 Couchbase 面向文档的数据库和 Spring Data Couchbase 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-couchbase-reactive</code></td><td style="text-align:left">使用 Couchbase 面向文档的数据库和 Spring Data Couchbase Reactive 的初学者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-elasticsearch</code></td><td style="text-align:left">使用 Elasticsearch 搜索和分析引擎和 Spring Data Elasticsearch 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-jdbc</code></td><td style="text-align:left">使用 Spring Data JDBC 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-jpa</code></td><td style="text-align:left">将 Spring Data JPA 与 Hibernate 一起使用的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-ldap</code></td><td style="text-align:left">使用 Spring Data LDAP 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-mongodb</code></td><td style="text-align:left">使用 MongoDB 面向文档的数据库和 Spring Data MongoDB 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-mongodb-reactive</code></td><td style="text-align:left">使用 MongoDB 面向文档的数据库和 Spring Data MongoDB Reactive 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-neo4j</code></td><td style="text-align:left">使用 Neo4j 图形数据库和 Spring Data Neo4j 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-r2dbc</code></td><td style="text-align:left">使用 Spring Data R2DBC 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-redis</code></td><td style="text-align:left">将 Redis 键值数据存储与 Spring Data Redis 和 Lettuce 客户端一起使用的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-redis-reactive</code></td><td style="text-align:left">使用带有 Spring Data Redis 反应式和 Lettuce 客户端的 Redis 键值数据存储的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-rest</code></td><td style="text-align:left">使用 Spring Data REST 通过 REST 公开 Spring Data 存储库的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-freemarker</code></td><td style="text-align:left">使用 FreeMarker 视图构建 MVC Web 应用程序的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-groovy-templates</code></td><td style="text-align:left">使用 Groovy 模板视图构建 MVC Web 应用程序的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-hateoas</code></td><td style="text-align:left">使用 Spring MVC 和 Spring HATEOAS 构建基于超媒体的 RESTful Web 应用程序的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-integration</code></td><td style="text-align:left">使用 Spring Integration 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jdbc</code></td><td style="text-align:left">使用 JDBC 和 HikariCP 连接池的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jersey</code></td><td style="text-align:left">使用 JAX-RS 和 Jersey 构建 RESTful Web 应用程序的初学者。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-web" target="_blank" rel="noopener"><code>spring-boot-starter-web</code></a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jooq</code></td><td style="text-align:left">使用 jOOQ 通过 JDBC 访问 SQL 数据库的入门程序。替代<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-data-jpa" target="_blank" rel="noopener"><code>spring-boot-starter-data-jpa</code></a>或<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-jdbc" target="_blank" rel="noopener"><code>spring-boot-starter-jdbc</code></a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-json</code></td><td style="text-align:left">读写json的starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jta-atomikos</code></td><td style="text-align:left">使用 Atomikos 进行 JTA 事务的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-mail</code></td><td style="text-align:left">使用 Java Mail 和 Spring Framework 的电子邮件发送支持的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-mustache</code></td><td style="text-align:left">使用 Mustache 视图构建 Web 应用程序的入门程序</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-oauth2-client</code></td><td style="text-align:left">使用 Spring Security 的 OAuth2/OpenID Connect 客户端功能的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-oauth2-resource-server</code></td><td style="text-align:left">使用 Spring Security 的 OAuth2 资源服务器特性的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-quartz</code></td><td style="text-align:left">使用 Quartz 调度器的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-rsocket</code></td><td style="text-align:left">用于构建 RSocket 客户端和服务器的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-security</code></td><td style="text-align:left">使用 Spring Security 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-test</code></td><td style="text-align:left">使用包括 JUnit Jupiter、Hamcrest 和 Mockito 在内的库来测试 Spring Boot 应用程序的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-thymeleaf</code></td><td style="text-align:left">使用 Thymeleaf 视图构建 MVC Web 应用程序的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-validation</code></td><td style="text-align:left">使用带有 Hibernate Validator 的 Java Bean Validation 的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-web</code></td><td style="text-align:left">使用 Spring MVC 构建 Web 应用程序的入门程序，包括 RESTful 应用程序。使用 Tomcat 作为默认的嵌入式容器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-web-services</code></td><td style="text-align:left">使用 Spring Web 服务的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-webflux</code></td><td style="text-align:left">使用 Spring Framework 的响应式 Web 支持构建 WebFlux 应用程序的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-websocket</code></td><td style="text-align:left">使用 Spring Framework 的 WebSocket 支持构建 WebSocket 应用程序的 Starter</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><code>spring-boot-starter-actuator</code></th><th>使用 Spring Boot 的 Actuator 的 Starter，它提供了生产就绪的特性来帮助你监控和管理你的应用程序</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><code>spring-boot-starter-jetty</code></th><th>使用 Jetty 作为嵌入式 servlet 容器的启动器。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-tomcat" target="_blank" rel="noopener"><code>spring-boot-starter-tomcat</code></a></th></tr></thead><tbody><tr><td><code>spring-boot-starter-log4j2</code></td><td>使用 Log4j2 进行日志记录的启动器。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-logging" target="_blank" rel="noopener"><code>spring-boot-starter-logging</code></a></td></tr><tr><td><code>spring-boot-starter-logging</code></td><td>使用 Logback 进行日志记录的启动器。默认日志记录启动器</td></tr><tr><td><code>spring-boot-starter-reactor-netty</code></td><td>使用 Reactor Netty 作为嵌入式响应式 HTTP 服务器的启动器。</td></tr><tr><td><code>spring-boot-starter-tomcat</code></td><td>使用 Tomcat 作为嵌入式 servlet 容器的启动器。使用的默认 servlet 容器启动器<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-web" target="_blank" rel="noopener"><code>spring-boot-starter-web</code></a></td></tr><tr><td><code>spring-boot-starter-undertow</code></td><td>使用 Undertow 作为嵌入式 servlet 容器的启动器。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-tomcat" target="_blank" rel="noopener"><code>spring-boot-starter-tomcat</code></a></td></tr></tbody></table></div><p>如果我们不想用spring-boot-starter-web引入的spring-webmvc传递依赖，那么可以使用<exclusions>标签来排除传递依赖，具体代码如下:</exclusions></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排查Spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果spring-boot-starter-web引入的传递版本过低，我们可以在pom文件中直接引入所需的版本，告诉Maven现在需要这个版本的依赖。</p><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot原理解析&quot;&gt;&lt;a href=&quot;#Spring-Boot原理解析&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot原理解析&quot;&gt;&lt;/a&gt;Spring Boot原理解析&lt;/h1&gt;&lt;h2 id=&quot;回顾入口类&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot原理" scheme="https://tropical-forest.github.io/tags/SpringBoot%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>集成Spring-Security</title>
    <link href="https://tropical-forest.github.io/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/"/>
    <id>https://tropical-forest.github.io/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/</id>
    <published>2022-01-30T06:53:43.000Z</published>
    <updated>2022-07-07T04:43:29.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本环境搭建"><a href="#1-基本环境搭建" class="headerlink" title="1. 基本环境搭建"></a>1. 基本环境搭建</h1><p>父pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-1-添加pom依赖"><a href="#1-1-添加pom依赖" class="headerlink" title="1.1 添加pom依赖"></a>1.1 添加pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-创建测试用Controller"><a href="#1-2-创建测试用Controller" class="headerlink" title="1.2 创建测试用Controller"></a>1.2 创建测试用Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"getData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"date"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.3 创建SpringBoot启动类并run</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSecurityApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootSecurityApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h2><p>访问<a href="http://localhost:8080/getData，由于我们开启了SpringSecurity且当前是未登录状态，页面会被302重定向到http://localhost:8080/login，页面如下" target="_blank" rel="noopener">http://localhost:8080/getData，由于我们开启了SpringSecurity且当前是未登录状态，页面会被302重定向到http://localhost:8080/login，页面如下</a>:</p><p><img src="/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/image-20220122162052002.png" alt="image-20220122162052002"></p><p>用户名: user,密码可以在控制台输出中找到:</p><p><img src="/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/image-20220122162225360.png" alt="image-20220122162225360"></p><p>输入正确的用户名和密码后点击Sign in按钮即被重新302到<a href="http://localhost:8080/getData并显示查询数据。" target="_blank" rel="noopener">http://localhost:8080/getData并显示查询数据。</a></p><p><img src="/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/image-20220122162353226.png" alt="image-20220122162353226"></p><h1 id="2-为Spring-Security设定用户名和密码"><a href="#2-为Spring-Security设定用户名和密码" class="headerlink" title="2. 为Spring Security设定用户名和密码"></a>2. 为Spring Security设定用户名和密码</h1><p>为了解决复杂密码的问题，我们可以在application.yaml做如下设定:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>这样就可以通过用户名user密码123来访问<a href="http://localhost:8080/getData接口了" target="_blank" rel="noopener">http://localhost:8080/getData接口了</a></p><h1 id="3-为Spring-Security设定多个用户"><a href="#3-为Spring-Security设定多个用户" class="headerlink" title="3. 为Spring Security设定多个用户"></a>3. 为Spring Security设定多个用户</h1><p>如果想要给Spring Security设定多个用户，则新建一个class，实现接口WebMvcConfigurer(注意：SpringBoot 版本2.0以上，jdk1.8以上):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">"admin"</span>).password(passwordEncoder().encode(<span class="string">"admin"</span>)).roles().build());</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">"guest"</span>).password(passwordEncoder().encode(<span class="string">"guest"</span>)).roles().build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  inMemoryUserDetailsManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@注意需要注解@EnableWebSecurity</li><li>InMemoryUserDetailsManager：将用户名和密码存储在内存中的用户管理器。</li></ul><p>这样我们可以用两个用户登录，分别是用户名admin密码admin,用户名guest密码guest</p><ul><li>spring security5.x以上密码必须加密，不然会报错</li></ul><h1 id="4-Spring-Security-Mysql"><a href="#4-Spring-Security-Mysql" class="headerlink" title="4. Spring Security + Mysql"></a>4. Spring Security + Mysql</h1><ol><li><p>增加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>配置数据库连接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### mysql连接信息</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">    password: root</span><br><span class="line">    username: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>创建测试用表结构及数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists test.user;</span><br><span class="line">create table test.user (</span><br><span class="line">  id int auto_increment primary key,</span><br><span class="line">  username varchar(50),</span><br><span class="line">  password varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test.user(id, username, password) values (1, &#39;admin&#39;, &#39;admin&#39;);</span><br><span class="line">insert into test.user(id, username, password) values (2, &#39;guest&#39;, &#39;guest&#39;);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>entity、repository、service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginRepository</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, username, password from user where username = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> String[]&#123;username&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginRepository loginRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginService</span><span class="params">(LoginRepository loginRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loginRepository = loginRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  List&lt;User&gt; <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginRepository.getUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>调整WebSecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;com.lpy.entity.User&gt; users = loginService.getUserByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (users == <span class="keyword">null</span> || users.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户名未找到"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String password = users.get(<span class="number">0</span>).getPassword();</span><br><span class="line">            <span class="keyword">return</span> User.withUsername(username).password(password).roles(<span class="string">""</span>).build();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:数据库存的是密文</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-基本环境搭建&quot;&gt;&lt;a href=&quot;#1-基本环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1. 基本环境搭建&quot;&gt;&lt;/a&gt;1. 基本环境搭建&lt;/h1&gt;&lt;p&gt;父pom依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="Spring Security" scheme="https://tropical-forest.github.io/tags/Spring-Security/"/>
    
  </entry>
  
</feed>
