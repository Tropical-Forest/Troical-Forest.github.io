<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tropical-Forest</title>
  
  <subtitle>个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tropical-forest.github.io/"/>
  <updated>2022-07-07T04:43:29.467Z</updated>
  <id>https://tropical-forest.github.io/</id>
  
  <author>
    <name>Tropical-Forest</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker的使用</title>
    <link href="https://tropical-forest.github.io/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://tropical-forest.github.io/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-07-07T03:29:20.000Z</published>
    <updated>2022-07-07T04:43:29.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h2><p>Docker是一个开源的应用容器引擎，基于Go语言。</p><p>Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口，更重要的是容器性能开销极低。</p><h2 id="Docker的应用场景"><a href="#Docker的应用场景" class="headerlink" title="Docker的应用场景"></a>Docker的应用场景</h2><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707093147019.png" alt="image-20220707093147019"></p><h2 id="Docker的优点"><a href="#Docker的优点" class="headerlink" title="Docker的优点"></a>Docker的优点</h2><ol><li>快速，一致地交行您的应用程序</li><li>响应式部署和扩展</li><li>在同一硬件上运行更多工作负载</li></ol><h2 id="容器的使用"><a href="#容器的使用" class="headerlink" title="容器的使用"></a>容器的使用</h2><h3 id="查看所有的容器命令如下："><a href="#查看所有的容器命令如下：" class="headerlink" title="查看所有的容器命令如下："></a><strong>查看所有的容器命令如下：</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="查看所有运行的容器命令："><a href="#查看所有运行的容器命令：" class="headerlink" title="查看所有运行的容器命令："></a>查看所有运行的容器命令：</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><h3 id="获取镜像："><a href="#获取镜像：" class="headerlink" title="获取镜像："></a><strong>获取镜像</strong>：</h3><p>如果我们本地没有 ubuntu镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">ubuntu</span><span class="selector-pseudo">:latest</span></span><br></pre></td></tr></table></figure><h3 id="启动容器："><a href="#启动容器：" class="headerlink" title="启动容器："></a><strong>启动容器：</strong></h3><p>以下命令使用ubuntu镜像启动一个容器，参数为以命令行模式进入该容器</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>如果需要在后台运行，则：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -itd ubuntu /bin/bash</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-test -p 8080:80 -d nginx</span><br></pre></td></tr></table></figure><p>开机自启动或者取消自启动:</p><p>开机自启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.容器创建时：</span><br><span class="line">docker run --restart=always .....</span><br><span class="line">2、容器启动时：</span><br><span class="line">docker update --restart=always xxx</span><br></pre></td></tr></table></figure><p>取消开机自启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update --restart=no xxx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-i: 交互式操作</li><li>-t：终端</li><li>-d: 不会进入容器，后台运行</li><li>ubuntu：ubuntu镜像</li><li>/bin/bash: 放在镜像名后的是命令，这里我们希望有个交互式Shell,因此用的是/bin/bash</li></ul><p>要退出终端，直接输入exit</p><h3 id="停止一个容器："><a href="#停止一个容器：" class="headerlink" title="停止一个容器："></a><strong>停止一个容器：</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">stop</span> &lt;容器<span class="keyword">ID</span>&gt;</span><br></pre></td></tr></table></figure><p>例如：docker stop e57e22bc310e</p><h3 id="停止的容器可以通过-docker-restart-重启："><a href="#停止的容器可以通过-docker-restart-重启：" class="headerlink" title="停止的容器可以通过 docker restart 重启："></a><strong>停止的容器可以通过 docker restart 重启：</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart <span class="tag">&lt;<span class="name">容器</span> <span class="attr">ID</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例如： docker restart e57e22bc310e</p><h3 id="使用-docker-start-启动一个已停止的容器："><a href="#使用-docker-start-启动一个已停止的容器：" class="headerlink" title="使用 docker start 启动一个已停止的容器："></a><strong>使用 docker start 启动一个已停止的容器：</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">start</span> &lt;容器<span class="keyword">ID</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="进入容器："><a href="#进入容器：" class="headerlink" title="进入容器："></a><strong>进入容器：</strong></h3><p>在使用 <strong>-d</strong> 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li><strong>docker attach</strong>  此命令会退出容器终端，会导致容器的停止</li><li><strong>docker exec</strong>：推荐使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="section">attach</span> <span class="number">1e560</span>fca3906 </span><br><span class="line">docker exec -it <span class="number">1e560</span>fca3906  /bin/bash</span><br></pre></td></tr></table></figure><p>attach退出将会导致容器的停止，但exec并不会。</p><h3 id="导出和导入容器："><a href="#导出和导入容器：" class="headerlink" title="导出和导入容器："></a><strong>导出和导入容器：</strong></h3><p><strong>导出容器</strong></p><p>如果要导出本地某个容器，可以使用 <strong>docker export</strong> 命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export dae0f497264c &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707105353707.png" alt="image-20220707105353707"></p><p><strong>导入容器快照：</strong></p><p>可以使用 docker import 从容器快照文件中再导入为镜像，以下实例将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1:</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cat</span> ubuntu.tar | docker <span class="keyword">import</span> - test/ubuntu:v1</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707110231245.png" alt="image-20220707110231245"></p><p>此外，也可以通过指定 URL 或者某个目录来导入，例如：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">import</span> <span class="string">http:</span><span class="comment">//example.com/exampleimage.tgz example/imagerepo</span></span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a><strong>删除容器</strong></h3><p>删除容器使用 <strong>docker rm</strong> 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><p>下面的命令可以清理掉所有处于终止状态的容器。</p><p><code>$ docker container prune</code></p><h2 id="镜像的使用"><a href="#镜像的使用" class="headerlink" title="镜像的使用"></a>镜像的使用</h2><h3 id="列出镜像列表："><a href="#列出镜像列表：" class="headerlink" title="列出镜像列表："></a><strong>列出镜像列表：</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><h3 id="删除镜像："><a href="#删除镜像：" class="headerlink" title="删除镜像："></a><strong>删除镜像：</strong></h3><p>镜像删除使用 <strong>docker rmi</strong> 命令，比如我们删除 hello-world 镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi hello-world</span><br></pre></td></tr></table></figure><h2 id="Docker实例"><a href="#Docker实例" class="headerlink" title="Docker实例"></a>Docker实例</h2><p>Docker最大的容器镜像库网址：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://hub.docker.com/</span></span><br></pre></td></tr></table></figure><h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><ol><li><h4 id="查看可用的Nginx版本"><a href="#查看可用的Nginx版本" class="headerlink" title="查看可用的Nginx版本"></a>查看可用的Nginx版本</h4><p>访问 Nginx 镜像库地址： <a href="https://hub.docker.com/_/nginx?tab=tags。" target="_blank" rel="noopener">https://hub.docker.com/_/nginx?tab=tags。</a></p><p>可以通过 Sort by 查看其他版本的 Nginx，默认是最新版本 <strong>nginx:latest</strong>。</p><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707095616637.png" alt="image-20220707095616637"></p></li></ol><ol><li><p><strong>拉取镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707095913588.png" alt="image-20220707095913588"></p><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100037086.png" alt="image-20220707100037086"></p></li></ol><ol><li><h4 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a><strong>查看本地镜像</strong></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker images</span></span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100146913.png" alt="image-20220707100146913"></p></li><li><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a><strong>运行容器</strong></h4><p>安装完成后，我们可以使用以下命令来运行 nginx 容器：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-test -p <span class="number">8080</span>:<span class="number">80</span> -d nginx</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>—name nginx-test： 容器名称</li><li>-p 8080:80: 端口进行映射，将本地8080端口映射到容器内部的80端口。</li><li>-d nginx: 设置容器在后台一直运行</li></ul><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100553207.png" alt="image-20220707100553207"></p></li><li><h4 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h4></li></ol><p>最后我们可以通过浏览器可以直接访问 8080 端口的 nginx 服务：</p><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707100721924.png" alt="image-20220707100721924"></p><h3 id="Docker安装redis"><a href="#Docker安装redis" class="headerlink" title="Docker安装redis"></a>Docker安装redis</h3><p>步骤跟上面相同</p><p>后台运行redis服务命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name redis-test -p 6379:6379 redis</span><br></pre></td></tr></table></figure><p>下面步骤前提：已经安装好redis镜像，并已经在后台运行redis服务</p><p>使用redis服务命令：</p><p>第一步：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> &lt;redis容器<span class="built_in">id</span>或者redis容器名称&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p><img src="/2022/07/07/Docker%E7%9A%84%E4%BD%BF%E7%94%A8/image-20220707112118329.png" alt="image-20220707112118329"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h2&gt;&lt;p&gt;Docker是一个开源的应用容器引擎，基于Go语言。&lt;/p&gt;
&lt;p&gt;Docker可以
      
    
    </summary>
    
    
      <category term="部署" scheme="https://tropical-forest.github.io/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="容器" scheme="https://tropical-forest.github.io/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://tropical-forest.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>易宝软件面试总结</title>
    <link href="https://tropical-forest.github.io/2022/07/01/%E6%98%93%E5%AE%9D%E8%BD%AF%E4%BB%B6%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>https://tropical-forest.github.io/2022/07/01/%E6%98%93%E5%AE%9D%E8%BD%AF%E4%BB%B6%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2022-07-01T08:03:30.000Z</published>
    <updated>2022-07-07T04:43:29.505Z</updated>
    
    <content type="html"><![CDATA[<p>2022年06月30号，我去了易宝软件进行面试，这是我真正意义上的求职第一次面试。</p><p>我先到面试地点，我到的面试地点是华为公司，因为易宝软件是外包公司，广州易宝软件在华为公司上班。然后先进行笔试，笔试是几十到选择题，题目范围有java基础、java核心、数据库、信息安全、计算机网络、数据结构等知识，范围较广。在培训室参加完笔试后，然后接下来就去面试，面试官拿着我的简历，首先让我做个自我介绍，然后问一些关于实习项目的经历，然后问一些项目方面的知识，但没有问ssm，再问springboot、springcloud、mysql、java、jvm、多线程线程池基础部分。我好多都不会，尤其是mysql，因为太久没有看过了。springboot、springcloud学的时间太长了。所以我第一轮面试就直接挂掉了。面试官给我的反馈是：基础较为薄弱。</p><p>面试题目：</p><p>1、如何实现集群部署？</p><p>2、jvm的基本数据结构是哪些？</p><p>3、spring和springboot的区别</p><p>4、eureka工作原理？</p><p>5、mysql的索引方式？</p><p>6、线程池的创建方式？</p><p>7、如何实现线程类？</p><p>8、数据库中表示占位符有哪些？</p><p>9.项目中的dao里面的接口方法如何与mapper关联起来？</p><p>10、项目的登录模块有做验证码以及其他安全措施吗？</p><p>11、讲一下java集合类？</p><p>12、java的锁有哪些？</p><p>13、了解设计模式，讲一下你了解的设计模式？</p><p>总结：这次面试让我意识到自己的基础非常的薄弱，短时间内是很难提高的，所以求职做好长时间的准备，给自己1个月的时间去求职。1个月内不足自己的薄弱点。先做完几个项目，然后学习jvm、多线程、mysql等知识。</p><p>时间：2022.07.01</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2022年06月30号，我去了易宝软件进行面试，这是我真正意义上的求职第一次面试。&lt;/p&gt;
&lt;p&gt;我先到面试地点，我到的面试地点是华为公司，因为易宝软件是外包公司，广州易宝软件在华为公司上班。然后先进行笔试，笔试是几十到选择题，题目范围有java基础、java核心、数据库、
      
    
    </summary>
    
    
      <category term="面试" scheme="https://tropical-forest.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://tropical-forest.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud整合zookeeper代替Eureka</title>
    <link href="https://tropical-forest.github.io/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/"/>
    <id>https://tropical-forest.github.io/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/</id>
    <published>2022-03-02T15:31:34.000Z</published>
    <updated>2022-07-07T04:43:29.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud整合zookeeper代替Eureka"><a href="#SpringCloud整合zookeeper代替Eureka" class="headerlink" title="SpringCloud整合zookeeper代替Eureka"></a>SpringCloud整合zookeeper代替Eureka</h1><h2 id="注册中心Zookeeper"><a href="#注册中心Zookeeper" class="headerlink" title="注册中心Zookeeper"></a>注册中心Zookeeper</h2><p>项目代码地址: <a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022</a></p><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><ol><li><p>新建cloud-provider-payment8004</p></li><li><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 先排除自带的zookeeper3.5.3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.171</span><span class="number">.131</span><span class="string">:2181</span>  <span class="comment">#zookeeper地址</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span>  <span class="comment">//该注解用于向使用consul或者zookeeper作为注册中心时注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentzk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springcloud with zookeeper: "</span>+serverPort+<span class="string">"\t"</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>启动8004注册进zookeeper</p><ul><li><p>启动zookeeper</p><ol><li>进入zookeeper所在目录的bin环境下，如下图所示:</li></ol><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302222804591.png" alt="image-20220302222804591"></p><ol><li><p>启动zookeeper服务（启动服务之前要关闭防火墙）</p><p>关闭防火墙命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><p>zookeeper服务启动命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302223213917.png" alt="image-20220302223213917"></p></li><li><p>进入zookeeper客户端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh</span><br></pre></td></tr></table></figure><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302223406253.png" alt="image-20220302223406253"></p></li><li><p>启动cloud-provider-payment8004</p><p>如果zookeeper客户端中能发现cloud-provider-payment则表示成功</p><p>如果防火墙没有关闭，则运行cloud-provider-payment8004会出现连接超时的状态。</p></li></ol></li></ul></li></ol><ol><li><p>验证测试</p><p>在浏览器中输入<a href="http://localhost:8004/payment/zk有反应则成功" target="_blank" rel="noopener">http://localhost:8004/payment/zk有反应则成功</a></p></li></ol><p><strong><em>Zookeeper 服务节点是临时节点还是持久节点</em></strong></p><p>通过两个节点查看查看出来：<br>启动–停止–再启动<br>注册服务节点编号不一致，所以<strong>Zookeeper 服务节点是临时节点</strong></p><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><ol><li><p>新建cloud-consumerzk-order80</p></li><li><p>POM</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringBoot整合zookeeper客户端 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 先排除自带的zookeeper3.5.3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-order</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">192.168</span><span class="number">.171</span><span class="number">.131</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>业务类</p><p><img src="/2022/03/02/SpringCloud%E6%95%B4%E5%90%88zookeeper%E4%BB%A3%E6%9B%BFEureka/image-20220302225554500.png" alt="image-20220302225554500"></p><p>ApplicationContextConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​        OrderZKController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">"http://cloud-provider-payment"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/consumer/payment/zk"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL+<span class="string">"/payment/zk"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>验证测试</p><p><a href="http://localhost/consumer/payment/zk" target="_blank" rel="noopener">http://localhost/consumer/payment/zk</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringCloud整合zookeeper代替Eureka&quot;&gt;&lt;a href=&quot;#SpringCloud整合zookeeper代替Eureka&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud整合zookeeper代替Eureka&quot;&gt;
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="zookeeper" scheme="https://tropical-forest.github.io/tags/zookeeper/"/>
    
      <category term="服务注册与发现" scheme="https://tropical-forest.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Centos安装Zookeeper</title>
    <link href="https://tropical-forest.github.io/2022/03/02/Centos%E5%AE%89%E8%A3%85Zookeeper/"/>
    <id>https://tropical-forest.github.io/2022/03/02/Centos%E5%AE%89%E8%A3%85Zookeeper/</id>
    <published>2022-03-02T15:30:11.000Z</published>
    <updated>2022-07-07T04:43:29.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Centos安装Zookeeper"><a href="#Centos安装Zookeeper" class="headerlink" title="Centos安装Zookeeper"></a>Centos安装Zookeeper</h1><h2 id="安装Java环境"><a href="#安装Java环境" class="headerlink" title="安装Java环境"></a>安装Java环境</h2><p>因为Zookeeper运行需要Java环境，所以需要先安装Java环境</p><ol><li><p>查看云端yum库中目前支持安装的jdk软件包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search java|grep jdk</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>选择版本安装jdk</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java-1.8.0-openjdk*</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>安装完成后，验证是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li></ol><ol><li>查找jdk安装位置</li></ol>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">'java'</span></span><br></pre></td></tr></table></figure>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认安装路径一般为：&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64&#x2F;jre&#x2F;bin&#x2F;java</span><br></pre></td></tr></table></figure><ol><li><p>配置环境变量</p><p>编辑配置文件: <code>vim /etc/profile</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>刷新配置到内存,使其生效: <code>source /etc/profile</code></p><p>测试是否生效: <code>echo $JAVA_HOME</code></p></li></ol><h2 id="Zookeeper的安装"><a href="#Zookeeper的安装" class="headerlink" title="Zookeeper的安装"></a>Zookeeper的安装</h2><p>下载<code>bin</code>压缩包:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>archive.apache.org<span class="regexp">/dist/</span>zookeeper<span class="regexp">/zookeeper-3.5.6/</span>apache-zookeeper-<span class="number">3.5</span>.<span class="number">6</span>-bin.tar.gz</span><br></pre></td></tr></table></figure><p>解压:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span>  <span class="selector-tag">-zxvf</span> <span class="selector-tag">apache-zookeeper-3</span><span class="selector-class">.5</span><span class="selector-class">.6-bin</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>移动到指定文件并重命名目录:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv apache-zookeeper<span class="number">-3.5</span><span class="number">.6</span>-bin/ /opt/zookeeper</span><br></pre></td></tr></table></figure><p>配置环境变量:</p><ul><li><p>编辑配置文件: </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/lib/jvm/java-11-openjdk-11.0.10.0.9-0.el7_9.x86_64/jre</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">ZOOKEEPER_HOME</span>=/opt/zookeeper</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin:$ZOOKEEPER_HOME/bin</span><br></pre></td></tr></table></figure></li><li><p>刷新配置到内存,使其生效: <code>source /etc/profile</code></p></li><li><p>测试是否生效: <code>echo $ZOOKEEPER_HOME</code></p></li></ul><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><ul><li><p>配置文件:</p><ul><li><p>切换到指定目录: <code>cd /opt/zookeeper/conf/</code></p></li><li><p>拷贝一份配置文件,一定得命名为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">zoo</span><span class="selector-class">.cfg</span></span><br></pre></td></tr></table></figure><p>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">cp</span> <span class="selector-tag">zoo_sample</span><span class="selector-class">.cfg</span> <span class="selector-tag">zoo</span><span class="selector-class">.cfg</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>启动服务:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh <span class="literal">start</span></span><br></pre></td></tr></table></figure></li></ul><p>注意：在Linux上进行文档操作，可以使用WinScp软件方便操作</p><p>参考文章:<a href="https://juejin.cn/post/6939515584858030088" target="_blank" rel="noopener">https://juejin.cn/post/6939515584858030088</a></p><p><a href="https://www.timberkito.com/?p=12" target="_blank" rel="noopener">https://www.timberkito.com/?p=12</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Centos安装Zookeeper&quot;&gt;&lt;a href=&quot;#Centos安装Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;Centos安装Zookeeper&quot;&gt;&lt;/a&gt;Centos安装Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;安装Jav
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="Centos安装Zookeeper" scheme="https://tropical-forest.github.io/tags/Centos%E5%AE%89%E8%A3%85Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>VM ware上安装Centos</title>
    <link href="https://tropical-forest.github.io/2022/03/02/VM-ware%E4%B8%8A%E5%AE%89%E8%A3%85Centos/"/>
    <id>https://tropical-forest.github.io/2022/03/02/VM-ware%E4%B8%8A%E5%AE%89%E8%A3%85Centos/</id>
    <published>2022-03-02T15:28:18.000Z</published>
    <updated>2022-07-07T04:43:29.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VM-ware上安装Centos"><a href="#VM-ware上安装Centos" class="headerlink" title="VM ware上安装Centos"></a>VM ware上安装Centos</h1><p>centos虚拟机下载地址: <a href="http://mirrors.aliyun.com/centos/" target="_blank" rel="noopener">http://mirrors.aliyun.com/centos/</a></p><p>VM ware安装具体教程上网找，这里不写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;VM-ware上安装Centos&quot;&gt;&lt;a href=&quot;#VM-ware上安装Centos&quot; class=&quot;headerlink&quot; title=&quot;VM ware上安装Centos&quot;&gt;&lt;/a&gt;VM ware上安装Centos&lt;/h1&gt;&lt;p&gt;centos虚拟机下载地址:
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://tropical-forest.github.io/categories/Linux/"/>
    
    
      <category term="Centos安装" scheme="https://tropical-forest.github.io/tags/Centos%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>服务注册与发现框架Eureka</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/</id>
    <published>2022-03-02T01:29:39.000Z</published>
    <updated>2022-07-07T04:43:29.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务注册与发现框架Eureka"><a href="#服务注册与发现框架Eureka" class="headerlink" title="服务注册与发现框架Eureka"></a>服务注册与发现框架Eureka</h1><p>​    服务的注册发现对于微服务架构来说是一个非常重要的环节。在单一架构应用中，业务逻辑层中的接口之间的互相调用，是通过一个固定的host和post发起REST或者RPC调用。但是在微服务架构中，每个服务时动态变化的，难于通过静止配置的方式维护服务，以至于后来产生了大量的微服务框架来完成服务的自动化管理。</p><h2 id="Eureka的工作机制"><a href="#Eureka的工作机制" class="headerlink" title="Eureka的工作机制"></a>Eureka的工作机制</h2><h3 id="Eureka的工作原理"><a href="#Eureka的工作原理" class="headerlink" title="Eureka的工作原理"></a>Eureka的工作原理</h3><p>​    Spring Cloud框架下的服务注册与发现框架Eureka包含两个组件，分别是Eureka Server与Eureka Client。</p><p>(1) Eureka Server：服务注册服务器，也称为服务注册中心。各个服务启动后，会在Eureka Server中进行注册，这样Eureka Server的服务注册表中将会存储所有可用服务节点的信息。服务节点的信息可以在界面中直观地看到。</p><p>（2）Eureka Client: 也称为服务（服务实例），作为一个Java客户端，用于简化与Eureka Server的交互。Eureka Client内置一个使用轮询负载算法的负载均衡器。服务启动后，Eureka Client将会向Eureka Server发送心跳更新服务，如果Eureka Server在多个心跳周期内（默认90秒）没有收到某个服务的心跳，Eureka Server就将会从服务注册中把这个服务节点移除。</p><p><img src="/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/image-20220203110955757.png" alt="image-20220203110955757"></p><p>​                                                                      Eureka组件的工作原理</p><h3 id="服务提供者与服务消费者"><a href="#服务提供者与服务消费者" class="headerlink" title="服务提供者与服务消费者"></a>服务提供者与服务消费者</h3><p>​    Eureka Client存在两种角色，分别是服务提供者和服务消费者。</p><p><img src="/2022/03/02/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E6%A1%86%E6%9E%B6Eureka/image-20220203112445241.png" alt="image-20220203112445241"></p><p>服务提供者和服务消费者都属于Eureka Client，它们都会将自己的信息通过REST API的形式提交给Eureka Server。服务消费者注册后，还会获取一份服务注册列表，该列表包含了所有向Eureka Server注册的服务信息。获取到服务注册信息后，服务消费者就会根据服务提供者的IP地址，通过HTTP远程调用服务提供者的服务。</p><ul><li>服务提供者和服务消费者是可以相互转换的。</li></ul><p>本博文所有代码：<a href="https://github.com/Tropical-Forest/springcloud" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud</a></p><h2 id="Eureka单节点模式例子"><a href="#Eureka单节点模式例子" class="headerlink" title="Eureka单节点模式例子"></a>Eureka单节点模式例子</h2><h3 id="IDEA生成eurekaServer端服务注册中心"><a href="#IDEA生成eurekaServer端服务注册中心" class="headerlink" title="IDEA生成eurekaServer端服务注册中心"></a>IDEA生成eurekaServer端服务注册中心</h3><p>cloud-eureka-server7001</p><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="EurekaClient端cloud-provider-payment8001"><a href="#EurekaClient端cloud-provider-payment8001" class="headerlink" title="EurekaClient端cloud-provider-payment8001"></a>EurekaClient端cloud-provider-payment8001</h3><p>将注册进EurekaServer成为服务提供者provider</p><ol><li><p>新建module模块</p></li><li><p>改pom</p><p>主要依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3308/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.springcloud.entities</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册将EurekaServer默认ture</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓，集群必须设置为true才能配合ribbon使用负责均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单击模式</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>业务类</p><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001</a></p></li></ol><h3 id="EurekaClient端cloud-consumer-order80"><a href="#EurekaClient端cloud-consumer-order80" class="headerlink" title="EurekaClient端cloud-consumer-order80"></a>EurekaClient端cloud-consumer-order80</h3><p>将注册讲EurekaServer成为服务消费者consumer</p><ol><li>新建module模块</li></ol><ol><li><p>该pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册将EurekaServer默认ture</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓，集群必须设置为true才能配合ribbon使用负责均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>业务类</li></ol><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80</a></p><h2 id="Eureka集群模式例子"><a href="#Eureka集群模式例子" class="headerlink" title="Eureka集群模式例子"></a>Eureka集群模式例子</h2><pre><code>### Eureka服务器注册中心集群</code></pre><p>注意:这里修改C:\Windows\System32\drivers\etc地址下hosts文件</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       eureka7001.com</span><br><span class="line">127.0.0.1       eureka7002.com</span><br></pre></td></tr></table></figure><ol><li><p>新建module，其名称为cloud-eureka-server7002</p></li><li><p>改pom文件</p><p>其pom文件和cloud-eureka-server7001相同</p></li><li><p>写yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7002</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与Eureka server交互的地址查询服务和注册服务都是需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7002<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>   cloud-eureka-server7001模块需要修改:</p><p>   改yaml文件</p>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，我的职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群模式</span></span><br><span class="line">      <span class="comment">#设置与Eureka server交互的地址查询服务和注册服务都是需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line">      <span class="comment">#单击模式</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka/</span></span><br><span class="line">  <span class="comment">#关闭自我保护机制，保证不可用服务及时剔除</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h3 id="Eureka服务提供者集群"><a href="#Eureka服务提供者集群" class="headerlink" title="Eureka服务提供者集群"></a>Eureka服务提供者集群</h3><ol><li><p>新建module，其名称为cloud-provider-payment8002</p></li><li><p>改pom文件</p><p>和cloud-provider-payment8001的pom文件基本一样</p></li><li><p>写yaml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3308/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.springcloud.entities</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注册将EurekaServer默认ture</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true,单节点无所谓，集群必须设置为true才能配合ribbon使用负责均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> <span class="comment">#集群版</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8002</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>写主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8002</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8002<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>业务类</li></ol><p>基本和cloud-provider-payment8001一样。</p><p>但是在cloud-consumer-order80模块中需要修改controller类中OrderController类中的“public static final String PAYMENT_URL = “<a href="http://localhost:8001”&quot;为&quot;public">http://localhost:8001”&quot;为&quot;public</a> static final String PAYMENT_URL = “<a href="http://CLOUD-PAYMENT-SERVICE" target="_blank" rel="noopener">http://CLOUD-PAYMENT-SERVICE</a>“”</p><p>还有修改config目录下ApplicationContextConfig类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>   <span class="comment">//使用@loadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务注册与发现框架Eureka&quot;&gt;&lt;a href=&quot;#服务注册与发现框架Eureka&quot; class=&quot;headerlink&quot; title=&quot;服务注册与发现框架Eureka&quot;&gt;&lt;/a&gt;服务注册与发现框架Eureka&lt;/h1&gt;&lt;p&gt;​    服务的注册发现对于微服务架
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="服务注册与发现" scheme="https://tropical-forest.github.io/tags/%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/"/>
    
      <category term="Eureka" scheme="https://tropical-forest.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>热部署Devtools</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/</id>
    <published>2022-03-02T01:26:26.000Z</published>
    <updated>2022-07-07T04:43:29.509Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA 中使用 spring-boot-devtools 实现热部署</p><blockquote><p>热部署可以让我们在更新代码时能实时的去测试是否正确，而不是每次都要重启项目，缩短重启的浪费的时间。</p></blockquote><h3 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h3><p>首先要让IDEA 能够自动编译，自动加载。打开settings ，找到如下位置，勾选 <code>Build project automatically</code></p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224634170.png" alt="image-20220301224634170"></p><p>然后 快捷键Ctrl+Alt+Shift+/ 选择 registry</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224651773.png" alt="image-20220301224651773"></p><p>然后找到这项，勾选。</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224709320.png" alt="image-20220301224709320"></p><h3 id="新建项目测试"><a href="#新建项目测试" class="headerlink" title="新建项目测试"></a>新建项目测试</h3><p>这里新建一个springboot的项目，前面的自定义，在选择依赖的地方，勾选上devtools.</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224720647.png" alt="image-20220301224720647"></p><p>然后新建controller类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDevtoolsController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">"这是原始的数据"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目，进行访问：</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224737355.png" alt="image-20220301224737355"></p><p>修改代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDevtoolsController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String msg = <span class="string">"这是原始的数据"</span>;</span><br><span class="line">        msg += <span class="string">"加了一句话"</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后测试，发现成功！！！</p><p><img src="/2022/03/02/%E7%83%AD%E9%83%A8%E7%BD%B2Devtools/image-20220301224749170.png" alt="image-20220301224749170"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IDEA 中使用 spring-boot-devtools 实现热部署&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;热部署可以让我们在更新代码时能实时的去测试是否正确，而不是每次都要重启项目，缩短重启的浪费的时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;配置IDE
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="热部署" scheme="https://tropical-forest.github.io/tags/%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构编码构建</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/</id>
    <published>2022-03-02T01:24:42.000Z</published>
    <updated>2022-07-07T04:43:29.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h1><h2 id="父工程创建"><a href="#父工程创建" class="headerlink" title="父工程创建"></a>父工程创建</h2><p>创建一个项目为父工程，删除其他文件，只留pom文件，一开始不要急着编码，根据“约定&gt;配置&gt;编码”指导原则，我们要配置好springboot、springcloud、maven、mysql、字符编码、JDK等版本协调一致。然后在pom文件中统一管理jar包版本。</p><p>POM文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2022<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-eureka-server7001<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-eureka-server7002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>cloud-provider-payment8002<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 统一管理jar包版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEcodeing</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEcodeing</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 子模块继承之后，提供作用:锁定版本+子modlue不用写groupId和version --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p> dependencyManagement 和 dependencies 的区别</p><pre><code>  1. dependencies:自动引入声明在dependencies里的所有依赖，并默认被所有的子项目继承。</code></pre><p>如果项目中不写依赖项，则会从父项目继承（属性全部继承）声明在父项目dependencies里的依赖项。</p><pre><code>  2. dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要的依赖。</code></pre><p>如果不在子项目中声明依赖，是不会从父项目中继承的；</p><p>只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;</p><p>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</p><p>同时dependencyManagement让子项目引用依赖，而不用显示的列出版本号。</p><p>Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后它就会使用在这个dependencyManagement元素中指定的版本号,实现所有子项目使用的依赖项为同一版本。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面以支付-订单为例实现微服务架构编码的构建</p><p>操作步骤: 建module模块——-》改POM——-&gt;写YML———&gt;主启动———》业务类——-》测试</p><h3 id="微服务提供者支付Module模块"><a href="#微服务提供者支付Module模块" class="headerlink" title="微服务提供者支付Module模块"></a>微服务提供者支付Module模块</h3><p>cloud-provider-payment8001</p><ol><li>改POM</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2022<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>写YAML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3308/db2019?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.springcloud.entities</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li>业务类</li></ol><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-provider-payment8001</a></p><h3 id="微服务消费者订单Module模块"><a href="#微服务消费者订单Module模块" class="headerlink" title="微服务消费者订单Module模块"></a>微服务消费者订单Module模块</h3><p>cloud-consumer-order80</p><p><a href="https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80" target="_blank" rel="noopener">https://github.com/Tropical-Forest/springcloud/tree/master/cloud2022/cloud-consumer-order80</a></p><h2 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h2><p>由于cloud-provider-payment8001模块与cloud-consumer-order80模块中有一样的entitie类，所以在父工程中新建一个模块，假设命名为cloud-api-commons。然后把共同的代码放进该模块中，例如在本例子中，共同的模块就是entities。所以把它放进cloud-api-commons，然后以前有entities类的模块在该模块中删除entities。接着该调用entites类的模块中在其pom文件中添加配置，如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lpy.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构编码构建&quot;&gt;&lt;a href=&quot;#微服务架构编码构建&quot; class=&quot;headerlink&quot; title=&quot;微服务架构编码构建&quot;&gt;&lt;/a&gt;微服务架构编码构建&lt;/h1&gt;&lt;h2 id=&quot;父工程创建&quot;&gt;&lt;a href=&quot;#父工程创建&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="微服务架构编码" scheme="https://tropical-forest.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构基础理论入门</title>
    <link href="https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/"/>
    <id>https://tropical-forest.github.io/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/</id>
    <published>2022-03-02T01:06:48.000Z</published>
    <updated>2022-07-07T04:43:29.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构基础"><a href="#微服务架构基础" class="headerlink" title="微服务架构基础"></a>微服务架构基础</h1><h2 id="微服务架构概述"><a href="#微服务架构概述" class="headerlink" title="微服务架构概述"></a>微服务架构概述</h2><p>微服务架构师一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个服务运行在其对立的进程中，服务与服务采用轻量级的通信机制互相协作（通常是基于HTTP协议的RESTful API）。每个服务都围绕着具体业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建。</p><h2 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h2><p>SpringCloud是分布式微服务架构的一站式解决方案，是多种微服务架构落地技术的集合体，俗称微服务全家桶</p><p><img src="/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/image-20220301213520720.png" alt="image-20220301213520720"></p><h2 id="Spring-Cloud技术栈"><a href="#Spring-Cloud技术栈" class="headerlink" title="Spring Cloud技术栈"></a>Spring Cloud技术栈</h2><ul><li>服务注册与发现</li><li>服务调用</li><li>服务熔断</li><li>负载均衡</li><li>服务降级</li><li>服务消息队列</li><li>配置中心管理</li><li>服务网关</li><li>服务监控</li><li>全链路追踪</li><li>自动化构建部署</li><li>服务定时任务调度操作</li></ul><p><img src="/2022/03/02/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA%E5%85%A5%E9%97%A8/image-20220301214516556.png" alt="image-20220301214516556"></p><h2 id><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构基础&quot;&gt;&lt;a href=&quot;#微服务架构基础&quot; class=&quot;headerlink&quot; title=&quot;微服务架构基础&quot;&gt;&lt;/a&gt;微服务架构基础&lt;/h1&gt;&lt;h2 id=&quot;微服务架构概述&quot;&gt;&lt;a href=&quot;#微服务架构概述&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="微服务架构基础" scheme="https://tropical-forest.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
    
      <category term="Springcloud" scheme="https://tropical-forest.github.io/tags/Springcloud/"/>
    
  </entry>
  
  <entry>
    <title>微服务架构与Spring Cloud</title>
    <link href="https://tropical-forest.github.io/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/"/>
    <id>https://tropical-forest.github.io/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/</id>
    <published>2022-03-01T15:55:21.000Z</published>
    <updated>2022-07-07T04:43:29.497Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微服务架构与Spring-Cloud"><a href="#微服务架构与Spring-Cloud" class="headerlink" title="微服务架构与Spring Cloud"></a>微服务架构与Spring Cloud</h1><h2 id="认识架构"><a href="#认识架构" class="headerlink" title="认识架构"></a>认识架构</h2><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><p>​    一个典型的单体架构就是将所有业务场景的表示层、业务逻辑层和数据访问层放在一个工程中，最终经过编译、打包，部署在一台服务器上。</p><p>​    随着业务越来越复杂，应用程序需要增加的功能越来越多，单体式的代码量越来越大，代码可读性、可维护性和扩展性会下降。同时，使用单体架构带来的隐患会比较多，由于系统过于庞大以及关联较多，应用中的任何一个Bug都有可能导致整个系统宕机。</p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202202045201.png" alt="image-20220202202045201"></p><h3 id="SOA架构"><a href="#SOA架构" class="headerlink" title="SOA架构"></a>SOA架构</h3><p>​        面向服务架构（SOA）是一个组件模型，它将应用程序的不同功能单元（称为服务）进行拆分，并通过这些服务之间定义良好的接口和协议联系起来。接口是采用中立的方式进行定义的，它应该独立于实现服务的硬件平台、操作系统和编程语言。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。</p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202202448754.png" alt="image-20220202202448754"></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p> 微服务架构指的是将大型复杂系统按功能或者业务需求垂直切分成更小的子系统，这些子系统以独立部署的子进程存在，它们之间通过轻量级的、跨语言的同步（比如REST，gRPC）或者异步（消息）网络调用进行通信。</p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202202643157.png" alt="image-20220202202643157"></p><h2 id="微服务架构的功能"><a href="#微服务架构的功能" class="headerlink" title="微服务架构的功能"></a>微服务架构的功能</h2><p>微服务架构的功能如下:</p><ol><li>微服务架构的自动化部署</li><li>服务集中化管理</li><li>支持熔断机制</li></ol><h2 id="初识SpringCloud"><a href="#初识SpringCloud" class="headerlink" title="初识SpringCloud"></a>初识SpringCloud</h2><h3 id="Spring-Cloud概述"><a href="#Spring-Cloud概述" class="headerlink" title="Spring Cloud概述"></a>Spring Cloud概述</h3><p>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns. They will work well in any distributed environment, including the developer’s own laptop, bare metal data centres, and managed platforms such as Cloud Foundry.</p><p>翻译</p><p>Spring Cloud 为开发者提供了工具来快速构建分布式系统中的一些常见模式（例如配置管理、服务发现、断路器、智能路由、微代理、控制总线、一次性令牌、全局锁、领导选举、分布式会话，集群状态）。分布式系统的协调导致了样板模式，使用 Spring Cloud 开发人员可以快速建立实现这些模式的服务和应用程序。它们在任何分布式环境中都能很好地工作，包括开发人员自己的笔记本电脑、裸机数据中心和 Cloud Foundry 等托管平台。</p><p>特点:</p><p>1.组件丰富，功能齐全</p><p>2.开箱即用，快速启动</p><p>3.模块部署方便，项目维护度降低</p><p>4.项目扩展性和稳定性较好</p><p>5.具有容错处理机制</p><h3 id="Spring-Cloud微服务架构的组件"><a href="#Spring-Cloud微服务架构的组件" class="headerlink" title="Spring Cloud微服务架构的组件"></a>Spring Cloud微服务架构的组件</h3><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202205652417.png" alt="image-20220202205652417" style="zoom:50%;"></p><p>Spring Cloud包含的常用组件以及模块。</p><p>（1）Spring Cloud Config: 分布式配置中心，负责把配置放到远程服务器上，集中化管理集群配置。目前支持本地存储、Git和Subversion</p><p>（2）Spring Cloud Netflix：核心组件，负责对多个Netflix OSS开源套件进行整合</p><ul><li>Eureka:服务注册发现中心，基于REST服务的分布式中间件，主要用于服务管理</li><li>Hystrix:熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。</li><li>Ribbon：云端负载均衡器。支持多种负载均衡策略，可配合服务发现和熔断器使用，在客户端实现负载均衡</li><li>Feign：一个REST客户端，基于Ribbon和Hystrix的声明式服务调用组件</li><li>Zuul：服务网关，为微服务架构集群提供代理、过滤、路由等功能</li></ul><p>（3）Spring Cloud Bus:事件、消息总线，用于在集群中传播状态变化，可与Spring Cloud Config联合实现热部署。</p><p>（4） Spring Cloud Stream: 数据流操作开发包，可与Redis、RabbitMQ、Kafka等架构进行消息发送与接收</p><p>（5）Spring Cloud Sleuth:服务追踪框架，可以与Zipkin、Apache Htrace和ELK等数据分析、服务跟踪系统进行整合，为跟踪服务、解决问题提供了便利。</p><p><strong>Spring Cloud 结构图：</strong></p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202210934009.png" alt="image-20220202210934009"></p><p>Spring Cloud与Dubbo的比较:</p><ul><li>Dubbo底层是使用Netty这样的NIO框架，是基于TCP协议传输的，配合以Hession序列化完成RPC通信;</li><li>而SpringCloud是基于Http协议+rest接口调用远程过程的通信，相对来说，Http请求会有更大的报文，占的带宽也会更多。但是REST相比RPC更为灵活，服务提供方和调用方的依赖只依靠一纸契约，不存在代码级别的强依赖，这在强调快速演化的微服务环境下，显得更为合适，至于注重通信速度还是方便灵活性，具体情况具体考虑。</li></ul><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220202211155338.png" alt="image-20220202211155338"></p><p>最后：</p><p>注意:SpringBoot与Spring Cloud兼容问题:</p><p>地址:<a href="https://spring.io/projects/spring-cloud" target="_blank" rel="noopener">https://spring.io/projects/spring-cloud</a></p><p><img src="/2022/03/01/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%8ESpring-Cloud/image-20220203115810283.png" alt="image-20220203115810283" style="zoom:80%;"></p><p>参考地址:<a href="https://segmentfault.com/a/1190000023675354" target="_blank" rel="noopener">https://segmentfault.com/a/1190000023675354</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微服务架构与Spring-Cloud&quot;&gt;&lt;a href=&quot;#微服务架构与Spring-Cloud&quot; class=&quot;headerlink&quot; title=&quot;微服务架构与Spring Cloud&quot;&gt;&lt;/a&gt;微服务架构与Spring Cloud&lt;/h1&gt;&lt;h2 id=&quot;认
      
    
    </summary>
    
    
      <category term="SpringCloud" scheme="https://tropical-forest.github.io/categories/SpringCloud/"/>
    
    
      <category term="微服务架构" scheme="https://tropical-forest.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot应用监控</title>
    <link href="https://tropical-forest.github.io/2022/02/02/Spring-Boot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"/>
    <id>https://tropical-forest.github.io/2022/02/02/Spring-Boot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/</id>
    <published>2022-02-02T08:57:34.000Z</published>
    <updated>2022-07-07T04:43:29.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot应用监控"><a href="#Spring-Boot应用监控" class="headerlink" title="Spring Boot应用监控"></a>Spring Boot应用监控</h1><h2 id="应用监控介绍"><a href="#应用监控介绍" class="headerlink" title="应用监控介绍"></a>应用监控介绍</h2><p>​     Spring Boot大部分模块都是用于开发业务功能或者外部资源。除此之外，Spring Boot还为我们提供了Spring-boot-starter-actuator模块，该模块主要用于管理和监控应用，是一个暴露自身信息的模块。Spring-boot-starter-actuator模块可以有效地减少监控意系统在采集应用指标时的开发量。</p><p>监控和管理端点</p><div class="table-container"><table><thead><tr><th>路径（端点名）</th><th>描述</th><th>鉴权</th></tr></thead><tbody><tr><td>/actuator</td><td>所有EndPoint的列表，需加入spring HATEOAS</td><td></td></tr><tr><td>/autoconfig</td><td>当前应用的所有自动配置</td><td>true</td></tr><tr><td>/beans</td><td>当前应用的所有Bean信息</td><td>true</td></tr><tr><td>/configprops</td><td>当前应用的所有配置属性</td><td>true</td></tr><tr><td>/dump</td><td>显示当前应用线程状态信息</td><td>true</td></tr><tr><td>/env</td><td>显示当前应用当前环境信息</td><td>true</td></tr><tr><td>/health</td><td>显示当前应用健康状况</td><td>false</td></tr><tr><td>/info</td><td>显示当前应用信息</td><td>false</td></tr><tr><td>/metrics</td><td>显示当前应用的各项指标信息</td><td>true</td></tr><tr><td>/mappings</td><td>显示所有的@RequestMapping映射的路径</td><td>true</td></tr><tr><td>/shutdown</td><td>关闭当前引用（默认关闭）,不支持GET,支持POST</td><td>true</td></tr><tr><td>/trace</td><td>显示追踪信息</td><td>false</td></tr></tbody></table></div><h2 id="使用应用监控"><a href="#使用应用监控" class="headerlink" title="使用应用监控"></a>使用应用监控</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#启动所有端点</span></span><br><span class="line"><span class="meta">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"><span class="comment">#自定义管理端点路径</span></span><br><span class="line"><span class="comment">#management.endpoints.web.base-path=/manage</span></span><br></pre></td></tr></table></figure><p>添加<code>management.endpoints.web.exposure.include=*</code>配置后启动应用，访问 <a href="http://127.0.0.1:8080/actuator" target="_blank" rel="noopener">http://127.0.0.1:8080/actuator</a> 我们可以看到所有的 Actuator 端点列表。</p><p><img src="/2022/02/02/Spring-Boot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/image-20220130183751090.png" alt="image-20220130183751090"></p><p>如果将management.endpoints.enabled-by-default设置为false，则禁用所有端点，如需启用则如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.endpoint.info.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="启用端点语法"><a href="#启用端点语法" class="headerlink" title="启用端点语法"></a>启用端点语法</h3><p>默认情况下，除了<code>shutdown</code>启用之外的所有端点。要配置端点的启用，请使用其<code>management.endpoint.&lt;id&gt;.enabled</code>属性。以下示例启用<code>shutdown</code>端点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoint.shutdown.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>如果您希望端点启用是选择加入而不是选择退出，请将<code>management.endpoints.enabled-by-default</code>属性设置为<code>false</code>并使用单个端点<code>enabled</code>属性来选择重新加入。以下示例启用<code>info</code>端点并禁用所有其他端点：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">management.endpoints.enabled-by-default</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">management.endpoint.info.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="内置端点的默认曝光"><a href="#内置端点的默认曝光" class="headerlink" title="内置端点的默认曝光"></a>内置端点的默认曝光</h3><div class="table-container"><table><thead><tr><th style="text-align:left">ID</th><th style="text-align:left">JMX</th><th style="text-align:left">Web</th></tr></thead><tbody><tr><td style="text-align:left"><code>auditevents</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>beans</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>caches</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>conditions</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>configprops</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>env</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>flyway</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>health</code></td><td style="text-align:left">Yes</td><td style="text-align:left">Yes</td></tr><tr><td style="text-align:left"><code>heapdump</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>httptrace</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>info</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>integrationgraph</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>jolokia</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>logfile</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>loggers</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>liquibase</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>metrics</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>mappings</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>prometheus</code></td><td style="text-align:left">N/A</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>quartz</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>scheduledtasks</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>sessions</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>shutdown</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>startup</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr><tr><td style="text-align:left"><code>threaddump</code></td><td style="text-align:left">Yes</td><td style="text-align:left">No</td></tr></tbody></table></div><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot应用监控&quot;&gt;&lt;a href=&quot;#Spring-Boot应用监控&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot应用监控&quot;&gt;&lt;/a&gt;Spring Boot应用监控&lt;/h1&gt;&lt;h2 id=&quot;应用监控介绍&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot应用监控" scheme="https://tropical-forest.github.io/tags/SpringBoot%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>集成Dubbo和Zookeeper</title>
    <link href="https://tropical-forest.github.io/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/"/>
    <id>https://tropical-forest.github.io/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/</id>
    <published>2022-02-02T08:52:43.000Z</published>
    <updated>2022-07-07T04:43:29.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成Dubbo和Zookeeper"><a href="#集成Dubbo和Zookeeper" class="headerlink" title="集成Dubbo和Zookeeper"></a>集成Dubbo和Zookeeper</h1><h2 id="Zookeeper介绍与安装"><a href="#Zookeeper介绍与安装" class="headerlink" title="Zookeeper介绍与安装"></a>Zookeeper介绍与安装</h2><h3 id="Zookeeper概述"><a href="#Zookeeper概述" class="headerlink" title="Zookeeper概述"></a>Zookeeper概述</h3><p>​    Zookeeper是一个开源的分布式应用程序协调服务，提供的功能包括命名服务、配置管理、集群管理、分布式锁等。</p><p>（1）命名服务。可以简单理解为电话簿。电话号码不好记住，但是人名好记。要打谁的电话，直接查人名就好了。在分布式环境下，经常需要对应用/服务进行统一命名，便于识别不同服务。类似于域名与IP之间的对应关系，域名容易记住。Zookeeper通过名称来获取资源或服务的地址、提供者等信息。</p><p>（2）配置管理。分布式系统都有大量服务器，比如在搭建Hadoop的HDFS的时候，需要在一台Master主机器上配置好HDFS需要的各种配置文件，然后通过scp命令把这些配置复制到其他节点上，这样各个机器拿到的配置信息是一致的，才能成功运行HDFS服务。Zookeeper提供了这样的服务：一种集中管理配置的方法，我们在这个集中的地方修改了配置，所有对这个配置感兴趣的都可以获得变更。这样就省去了手动复制配置，还保证了可靠和一致性。</p><p>（3）集群管理。集群管理包含两点：是否有机器退出和加入、选举Master。Zookeeper集群管理就是感知变化，做出对应的策略。</p><p>（4）分布式锁。Zookeeper的一致性文件系统使得锁的问题变得容易。锁服务可以分为两类，一类是保持独占，另一类是控制时序。单机程序的各个进程对互斥资源进行访问时需要加锁，分布式程序分布在各个主机上的进程对互斥资源访问时也需要加锁。</p><p>Zookeeper的一个最常用的使用场景是担任服务生产者和服务者的注册中心。服务生产者将自己提供的服务注册到Zookeeper中心，服务消费者在进行服务调用的时候先到Zookeeper中查找服务，获取服务生产者的详细信息之后，再去调用服务生产者的内容与数据。具体如下图。</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131152310604.png" alt="image-20220131152310604"></p><h3 id="Zookeeper的安装与启动"><a href="#Zookeeper的安装与启动" class="headerlink" title="Zookeeper的安装与启动"></a>Zookeeper的安装与启动</h3><p>window版本下载网址:<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">https://zookeeper.apache.org/releases.html</a></p><p>下载后解压为:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131153959538.png" alt="image-20220131153959538"></p><p>将 conf 目录下的 zoo_sample.cfg 文件，复制一份，重命名为 zoo.cfg:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131153113821.png" alt="image-20220131153113821"></p><p>双击 zkServer.cmd 启动程序:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131153441167.png" alt="image-20220131153441167"></p><p>控制台显示 <strong>bind to port 0.0.0.0/0.0.0.0:2181</strong>，表示服务端启动成功!</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131154417313.png" alt="image-20220131154417313"></p><p>双击zkCli.cmd 启动客户端</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131154453028.png" alt="image-20220131154453028"></p><p>出现 Welcome to Zookeeper！，表示我们成功启动客户端。</p><p>参考文章：<a href="https://www.runoob.com/w3cnote/zookeeper-setup.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/zookeeper-setup.html</a></p><h2 id="Spring-Boot集成Dubbo"><a href="#Spring-Boot集成Dubbo" class="headerlink" title="Spring Boot集成Dubbo"></a>Spring Boot集成Dubbo</h2><h3 id="Dubbo概述"><a href="#Dubbo概述" class="headerlink" title="Dubbo概述"></a>Dubbo概述</h3><p>​    Dubbo是阿里巴巴B2B平台技术部开发的一款Java服务平台框架以及SOA治理方案。其功能主要包括：高性能NIO通信及多协议集成、服务动态寻址与路由、软负载均衡与容错、依赖分析与降级等。Dubbo简单的底层框架如下图所示:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131163002917.png" alt="image-20220131163002917"></p><p>​    Registry是服务注册与发现的注册中心，Provider是暴露服务的服务提供方，Consumer是调用远程服务的服务消费方，Monitor是统计服务的调用次数和调用时间的监控中心，Container是服务运行容器。Dubbo简单的调用关系如下:</p><p>​    (1) 服务容器Container负责启动、加载、运行服务提供者Provider</p><p>​    (2)服务提供者Provider在启动时，向注册中心Registry注册自己提供的服务</p><p>（3）服务消费者Consumer在启动时，向注册中心Registry订阅自己所需的服务。</p><p>​    (4)注册中心Registry返回服务提供者地址列表给消费者Provider，如果有变更，注册中心Registry将基于长连接推送，变更数据给消费者Consumer</p><p>（5)服务消费者Consumer从提供者地址列表基于软负载均衡算法选一台提供者进行调用，如果调用失败，就再选另一台调用</p><p>（6）服务消费者Consumer和提供者Provider在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</p><h3 id="服务与接口拆分思路"><a href="#服务与接口拆分思路" class="headerlink" title="服务与接口拆分思路"></a>服务与接口拆分思路</h3><p>​    经过前面的学习，my-spring-boot项目已经集成很多技术，也定义了很多接口。但是对于真实的项目来说，特别是对于互联网公司的项目来说，my-spring-boot这个大的服务承载的内容太多，诸多服务接口（比如AyUserService、AyMoodService、AyRoleService等）糅合在一起对外提供服务已经违背了微服务理念。因此，我们应该对my-spring-boot项目进行服务拆分，使它被拆分成一个个小的服务，我们可以按照业务或者功能维度对服务进行拆分，具体如下图:</p><p><img src="/2022/02/02/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/image-20220131165550093.png" alt="image-20220131165550093"></p><p>​    在上图中，my-spring-boot项目被拆分为用户服务、角色服务、说说服务等。my-spring-boot项目依赖于这些底层的服务为其提供相应的功能，而用户服务、角色服务和说说服务时面向接口API编程的，符合基本的编程规则。通过服务的拆分和面向接口编程，对应项目扩展和团队分工非常有利。</p><h3 id="SpringBoot-Dubbo-Zookeeper"><a href="#SpringBoot-Dubbo-Zookeeper" class="headerlink" title="SpringBoot+Dubbo+Zookeeper"></a>SpringBoot+Dubbo+Zookeeper</h3><p><a href="https://blog.csdn.net/qq_33369905/article/details/106647287" target="_blank" rel="noopener">https://blog.csdn.net/qq_33369905/article/details/106647287</a></p><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集成Dubbo和Zookeeper&quot;&gt;&lt;a href=&quot;#集成Dubbo和Zookeeper&quot; class=&quot;headerlink&quot; title=&quot;集成Dubbo和Zookeeper&quot;&gt;&lt;/a&gt;集成Dubbo和Zookeeper&lt;/h1&gt;&lt;h2 id=&quot;Zooke
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="集成Dubbo和Zookeeper" scheme="https://tropical-forest.github.io/tags/%E9%9B%86%E6%88%90Dubbo%E5%92%8CZookeeper/"/>
    
  </entry>
  
  <entry>
    <title>多环境配置与部署</title>
    <link href="https://tropical-forest.github.io/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
    <id>https://tropical-forest.github.io/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/</id>
    <published>2022-02-02T08:48:46.000Z</published>
    <updated>2022-07-07T04:43:29.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多环境配置与部署"><a href="#多环境配置与部署" class="headerlink" title="多环境配置与部署"></a>多环境配置与部署</h1><h2 id="多环境配置介绍"><a href="#多环境配置介绍" class="headerlink" title="多环境配置介绍"></a>多环境配置介绍</h2><p>​    在项目开发过程中，项目不同的角色会使用不同的环境。例如，开发人员会使用开发环境、测试人员会使用测试环境、性能测试会使用性能测试环境、项目开发完成之后会把项目部署到线上环境等，不同的环境往往会连接不同的MySQL数据库、Redis缓存、MQ消息中间件等，环境之间相互独立于隔离才不会相互影响，隔离的环境便于部署，提高工作效率。具体隔离环境如下图：</p><p><img src="/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/image-20220201225210743.png" alt="image-20220201225210743"></p><h2 id="多环境配置使用"><a href="#多环境配置使用" class="headerlink" title="多环境配置使用"></a>多环境配置使用</h2><h3 id="添加多个配置文件"><a href="#添加多个配置文件" class="headerlink" title="添加多个配置文件"></a>添加多个配置文件</h3><p>​    假如项目my-spring-boot需要3个环境：开发环境、测试环境、性能测试环境。我们复制my-spring-boot项目配置文件application.properties,分别取名为application-dev.properties、application-test.properties、application-perform.properties，作为开发环境、测试环境、性能测试环境。</p><p>​    每个配置文件对应的MySQL数据库、Redis缓存、ActiveMQ消息队列等配置参数都不相同。</p><h3 id="配置激活选项"><a href="#配置激活选项" class="headerlink" title="配置激活选项"></a>配置激活选项</h3><p>​    多环境的配置文件开发完成之后，我们在my-spring-boot的配置文件application.properties中添加配置激活选项，具体代码如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 激活开发环境配置</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment">### 激活测试环境配置</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">test</span></span><br><span class="line"><span class="comment">### 激活性能测试环境配置</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">perform</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​    多环境配置文件和配置激活选项开发完成之后，修改application-dev.properties、application-test.properties、application-perform.properties配置文件的数据库连接，具体代码如下:</p><p>开发环境配置文件application-dev.properties的具体代码修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>测试环境配置文件application-test.properties的具体代码修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test2</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>性能测试环境配置文件application-perform.properties的具体代码修改如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test3</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>项目结构如下:</p><p><img src="/2022/02/02/%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8E%E9%83%A8%E7%BD%B2/image-20220202112612730.png" alt="image-20220202112612730" style="zoom:50%;"></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>AyUserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ayUser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AyUserService ayUserService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//查询数据库所有用户</span></span><br><span class="line">      List&lt;AyUser&gt; ayUserList = ayUserService.findAll();</span><br><span class="line">      model.addAttribute(<span class="string">"users"</span>,ayUserList);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"ayUser"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUser.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserRepository.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AyUser</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyUser <span class="title">findById</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">AyUser <span class="title">save</span><span class="params">(AyUser ayUser)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    <span class="function">Page&lt;AyUser&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AyUserRepository ayUserRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">save</span><span class="params">(AyUser ayUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.save(ayUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        ayUserRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;AyUser&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findAll(pageable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByNameLike(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByIdIn(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ayUser.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 激活开发环境配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><p>application-dve.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>application-perform.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 性能测试环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test3</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>application-test.yaml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 开发环境mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test2</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure><p>想切换到哪个环境就在application.yaml里面切换。然后重启启动项目即可。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Spring-Boot-内置Tomcat"><a href="#Spring-Boot-内置Tomcat" class="headerlink" title="Spring Boot 内置Tomcat"></a>Spring Boot 内置Tomcat</h3><p>​    Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/服务器" target="_blank" rel="noopener">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应<a href="https://baike.baidu.com/item/HTML" target="_blank" rel="noopener">HTML</a>（<a href="https://baike.baidu.com/item/标准通用标记语言/6805073" target="_blank" rel="noopener">标准通用标记语言</a>下的一个应用）页面的访问请求。实际上Tomcat是Apache 服务器的扩展，但运行时它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。</p><p>​    如果想使用其他Servlet容器，比如Jetty作为Spring Boot 默认内置容器，只需要修改spring-boot-starter-web依赖即可。使用Jetty容器作为SpringBoot默认内置容器，具体修改代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多环境配置与部署&quot;&gt;&lt;a href=&quot;#多环境配置与部署&quot; class=&quot;headerlink&quot; title=&quot;多环境配置与部署&quot;&gt;&lt;/a&gt;多环境配置与部署&lt;/h1&gt;&lt;h2 id=&quot;多环境配置介绍&quot;&gt;&lt;a href=&quot;#多环境配置介绍&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="多环境" scheme="https://tropical-forest.github.io/tags/%E5%A4%9A%E7%8E%AF%E5%A2%83/"/>
    
      <category term="部署" scheme="https://tropical-forest.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot原理解析</title>
    <link href="https://tropical-forest.github.io/2022/02/02/SpringBoot%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>https://tropical-forest.github.io/2022/02/02/SpringBoot%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-02-02T08:45:05.000Z</published>
    <updated>2022-07-07T04:43:29.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot原理解析"><a href="#Spring-Boot原理解析" class="headerlink" title="Spring Boot原理解析"></a>Spring Boot原理解析</h1><h2 id="回顾入口类"><a href="#回顾入口类" class="headerlink" title="回顾入口类"></a>回顾入口类</h2><h3 id="SpringbootEnvilsApplication入口类"><a href="#SpringbootEnvilsApplication入口类" class="headerlink" title="SpringbootEnvilsApplication入口类"></a>SpringbootEnvilsApplication入口类</h3><p>​    首先，我们看一下项目springboot-evils的入口类SpringbootEnvilsApplication，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootEnvilsApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootEnvilsApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 在入口类SpringbootEnvilsApplication中，@SpringBootApplication注解和main方法都是主动生成的。下面我们要了解@SpringBootApplication注解和SpringApplication.run方法到底为我们找了写什么。</p><h3 id="SpringBootApplication原理"><a href="#SpringBootApplication原理" class="headerlink" title="@SpringBootApplication原理"></a>@SpringBootApplication原理</h3><p>​    @SpringBootApplication开启了Spring的组件扫描和Spring Boot自动配置功能。实际上它是一个复合注解，包含3个重要的注解：@SpringBootConfiguration、@EnableAutoConfiguration、@ComponentScan</p><p>其源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(</span><br><span class="line">    excludeFilters = &#123;<span class="meta">@Filter</span>(</span><br><span class="line">    type = FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;TypeExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">), @<span class="title">Filter</span>(</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= FilterType.CUSTOM,</span><br><span class="line">    classes = &#123;AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>&#125;</span></span><br><span class="line"><span class="class">)&#125;</span></span><br><span class="line"><span class="class">)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line">   <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@SpringBootConfiguration</strong>注解: 表明该类使用Spring基于Java的注解，Spring Boot推荐我们使用基于Java而不X是XML的配置。@SpringBootConfiguration源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">  <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Configuration是JavaConfig形式的Spring IOC容器的配置类使用的@Configuration。</p><p><strong>@EnableAutoConfiguration</strong>源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    从@EnableAutoConfiguration的源代码可以看出，其包含@Import注解。而我们知道，@Import注解的主要作用就是借助AutoConfigurationImportSelector将Spring Boot应用所有符合条件的@Configuration配置到当前Spring Boot创建并使用到Ioc容器中，Ioc容器就是Spring应用程序上下文ApplicationContext.</p><p><strong>@ComponentScan</strong>注解：启动组件扫描，开发的组件或bean定义能被自动发现并注入Spring应用程序上下文。比如我们在控制层添加@Controller注解、在服务层添加@Service注解和@Component注解等，这些注解都可以被@ComponentScan注解扫描到。</p><h3 id="SpringApplication的run方法"><a href="#SpringApplication的run方法" class="headerlink" title="SpringApplication的run方法"></a>SpringApplication的run方法</h3><p>​    在run方法中，首先创建一个SpringApplication对象实例，然后调用SpringApplication的run方法。SpringApplication.run方法的原代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.nanoTime();</span><br><span class="line">        DefaultBootstrapContext bootstrapContext = <span class="keyword">this</span>.createBootstrapContext();</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.configureHeadlessProperty();</span><br><span class="line">        <span class="comment">//开启监听器</span></span><br><span class="line">        SpringApplicationRunListeners listeners = <span class="keyword">this</span>.getRunListeners(args);</span><br><span class="line">        listeners.starting(bootstrapContext, <span class="keyword">this</span>.mainApplicationClass);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(args);</span><br><span class="line">            ConfigurableEnvironment environment = <span class="keyword">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);</span><br><span class="line">            <span class="keyword">this</span>.configureIgnoreBeanInfo(environment);</span><br><span class="line">            Banner printedBanner = <span class="keyword">this</span>.printBanner(environment);</span><br><span class="line">            <span class="comment">//创建应用上下文</span></span><br><span class="line">            context = <span class="keyword">this</span>.createApplicationContext();</span><br><span class="line">            context.setApplicationStartup(<span class="keyword">this</span>.applicationStartup);</span><br><span class="line">            <span class="comment">//准备应用上下文</span></span><br><span class="line">            <span class="keyword">this</span>.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</span><br><span class="line">            <span class="comment">//刷新应用上下文</span></span><br><span class="line">            <span class="keyword">this</span>.refreshContext(context);</span><br><span class="line">            <span class="comment">//刷新后操作</span></span><br><span class="line">            <span class="keyword">this</span>.afterRefresh(context, applicationArguments);</span><br><span class="line">            Duration timeTakenToStartup = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">                (<span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)).logStarted(<span class="keyword">this</span>.getApplicationLog(), timeTakenToStartup);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            listeners.started(context, timeTakenToStartup);</span><br><span class="line">            <span class="keyword">this</span>.callRunners(context, applicationArguments);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, var12, listeners);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var12);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Duration timeTakenToReady = Duration.ofNanos(System.nanoTime() - startTime);</span><br><span class="line">            listeners.ready(context, timeTakenToReady);</span><br><span class="line">            <span class="keyword">return</span> context;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var11) &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleRunFailure(context, var11, (SpringApplicationRunListeners)<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(var11);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源代码可以看出，Spring Boot首先开启了一个<strong>SpringApplicationRunListeners</strong>监听器，然后通过createApplicationContext、prepareContext、refreshContext方法创建、准备、刷新应用上下文ConfigurableApplicationContext，通过上下文加载应用所需的类和各种环境配置等，最后启动一个应用实例。</p><h3 id="SpringApplicationRunListeners监听器"><a href="#SpringApplicationRunListeners监听器" class="headerlink" title="SpringApplicationRunListeners监听器"></a>SpringApplicationRunListeners监听器</h3><p>​    SpringApplicationRunListeners接口规定了SpringBoot的生命周期，在各个生命周期广播相应的事件（Application），实际调用的是ApplicationListener类。SpringApplicationRunListener的源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//刚执行run方法时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//环境建立好时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//上下文建立好时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//上下文载入配置时触发</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.started(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.running(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationContextInitializer接口"><a href="#ApplicationContextInitializer接口" class="headerlink" title="ApplicationContextInitializer接口"></a>ApplicationContextInitializer接口</h3><p>​    在SpringBoot准备上下文prepareContext时，会对ConfigurableApplicationContext实例做进一步的设置或者处理。prepareContext的源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(DefaultBootstrapContext bootstrapContext, ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">        context.setEnvironment(environment);</span><br><span class="line">        <span class="keyword">this</span>.postProcessApplicationContext(context);</span><br><span class="line">        <span class="keyword">this</span>.applyInitializers(context);</span><br><span class="line">        listeners.contextPrepared(context);</span><br><span class="line">        bootstrapContext.close(context);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.logStartupProfileInfo(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">        <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> AbstractAutowireCapableBeanFactory) &#123;</span><br><span class="line">            ((AbstractAutowireCapableBeanFactory)beanFactory).setAllowCircularReferences(<span class="keyword">this</span>.allowCircularReferences);</span><br><span class="line">            <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">                ((DefaultListableBeanFactory)beanFactory).setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lazyInitialization) &#123;</span><br><span class="line">            context.addBeanFactoryPostProcessor(<span class="keyword">new</span> LazyInitializationBeanFactoryPostProcessor());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Object&gt; sources = <span class="keyword">this</span>.getAllSources();</span><br><span class="line">        Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">        <span class="keyword">this</span>.load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">        listeners.contextLoaded(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    在准备上下文prepareContext方法中，通过applyInitializers方法对context上下文进行设置和处理。applyInitializers具体源代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyInitializers</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line">        Iterator var2 = <span class="keyword">this</span>.getInitializers().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">            ApplicationContextInitializer initializer = (ApplicationContextInitializer)var2.next();</span><br><span class="line">            Class&lt;?&gt; requiredType = GenericTypeResolver.resolveTypeArgument(initializer.getClass(), ApplicationContextInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Assert.isInstanceOf(requiredType, context, <span class="string">"Unable to call initializer."</span>);</span><br><span class="line">            initializer.initialize(context);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    在applyInitializers方法中，主要调用ApplicationContextInitializer类的initialize方法对应用上下文进行设置和处理。ApplicationContextInitializer本质上是一个回调接口，用于在ConfigurableApplicationContext执行refresh操作之前对它进行一些初始化操作。</p><h2 id="SpringApplication执行流程"><a href="#SpringApplication执行流程" class="headerlink" title="SpringApplication执行流程"></a>SpringApplication执行流程</h2><p>如下图所示</p><p><img src="/2022/02/02/SpringBoot%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/image-20220202162429444.png" alt="image-20220202162429444" style="zoom:150%;"></p><ol><li>在项目启动时，调用入口类SpringbootEnvilsApplication的main方法。</li><li>入口类SpringbootEnvilsApplication的main方法会调用SpringApplication的静态方法run</li><li>在run方法中首先创建一个SpringApplication对象实例，然后调用SpringApplication对象实例的run方法。</li><li>查询和加载所有的SpringApplicationListener监听器。</li><li>SpringApplicationListener监听器调用其starting方法，Spring Boot通知这些SpringApplicationListener监听器，马上要开始执行</li><li>创建和准备Spring Boot 应用将要使用的Environment环境，包括配置用的PropertySource以及Profile.</li><li>创建和初始化应用上下文ApplicationContext.这一步只是准备工作，并未开始正式创建。</li><li>这一步是最重要的，Spring Boot会通过@EnableAutoConfiguration获取所有配置以及其他形式的Ioc容器配置，并加载到已经准备完毕的ApplicationContext。</li><li>主要是调用ApplicationContextInitializer类的initialize方法对应用上下文进行设置和处理</li><li>调用ApplicationContext上下文的refresh方法，使Ioc容器达到可用状态。</li><li>查找当前ApplicationContext上下文是否注册ApplicationRunner与CommandLineRunner，如果有，循环变量执行ApplicationRunner和CommandLineRunner的run方法。</li><li>执行SpringApplicationListener的finished方法，Spring Boot应用启动完毕。</li></ol><h2 id="Spring-boot-starter原理"><a href="#Spring-boot-starter原理" class="headerlink" title="Spring-boot-starter原理"></a>Spring-boot-starter原理</h2><p>所有<strong>官方</strong>启动器都遵循类似的命名模式；<code>spring-boot-starter-*</code>，其中<code>*</code>是特定类型的应用程序。此命名结构旨在帮助您在需要查找启动器时提供帮助。许多 IDE 中的 Maven 集成允许您按名称搜索依赖项。例如，安装了适当的 Eclipse 或 Spring Tools 插件后，您可以<code>ctrl-space</code>在 POM 编辑器中按下并键入“spring-boot-starter”以获取完整列表。</p><p>正如“<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.developing-auto-configuration.custom-starter" target="_blank" rel="noopener">创建您自己的 Starter</a> ”部分所述，第三方 starter 不应以 开头<code>spring-boot</code>，因为它是为官方 Spring Boot 工件保留的。相反，第三方启动器通常以项目名称开头。例如，一个名为的第三方启动项目<code>thirdpartyproject</code>通常被命名为<code>thirdpartyproject-spring-boot-starter</code>.（来自springboot官网）</p><div class="table-container"><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>spring-boot-starter</code></td><td style="text-align:left">核心启动器，包括自动配置支持、日志记录和 YAML</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-activemq</code></td><td style="text-align:left">使用 Apache ActiveMQ 进行 JMS 消息传递的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-amqp</code></td><td style="text-align:left">使用 Spring AMQP 和 Rabbit MQ 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-aop</code></td><td style="text-align:left">使用 Spring AOP 和 AspectJ 进行面向方面编程的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-artemis</code></td><td style="text-align:left">使用 Apache Artemis 的 JMS 消息传递启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-batch</code></td><td style="text-align:left">使用 Spring Batch 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-cache</code></td><td style="text-align:left">使用 Spring Framework 的缓存支持的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-cassandra</code></td><td style="text-align:left">使用 Cassandra 分布式数据库和 Spring Data Cassandra 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-cassandra-reactive</code></td><td style="text-align:left">使用 Cassandra 分布式数据库和 Spring Data Cassandra Reactive 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-couchbase</code></td><td style="text-align:left">使用 Couchbase 面向文档的数据库和 Spring Data Couchbase 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-couchbase-reactive</code></td><td style="text-align:left">使用 Couchbase 面向文档的数据库和 Spring Data Couchbase Reactive 的初学者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-elasticsearch</code></td><td style="text-align:left">使用 Elasticsearch 搜索和分析引擎和 Spring Data Elasticsearch 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-jdbc</code></td><td style="text-align:left">使用 Spring Data JDBC 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-jpa</code></td><td style="text-align:left">将 Spring Data JPA 与 Hibernate 一起使用的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-ldap</code></td><td style="text-align:left">使用 Spring Data LDAP 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-mongodb</code></td><td style="text-align:left">使用 MongoDB 面向文档的数据库和 Spring Data MongoDB 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-mongodb-reactive</code></td><td style="text-align:left">使用 MongoDB 面向文档的数据库和 Spring Data MongoDB Reactive 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-neo4j</code></td><td style="text-align:left">使用 Neo4j 图形数据库和 Spring Data Neo4j 的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-r2dbc</code></td><td style="text-align:left">使用 Spring Data R2DBC 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-redis</code></td><td style="text-align:left">将 Redis 键值数据存储与 Spring Data Redis 和 Lettuce 客户端一起使用的入门</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-redis-reactive</code></td><td style="text-align:left">使用带有 Spring Data Redis 反应式和 Lettuce 客户端的 Redis 键值数据存储的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-data-rest</code></td><td style="text-align:left">使用 Spring Data REST 通过 REST 公开 Spring Data 存储库的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-freemarker</code></td><td style="text-align:left">使用 FreeMarker 视图构建 MVC Web 应用程序的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-groovy-templates</code></td><td style="text-align:left">使用 Groovy 模板视图构建 MVC Web 应用程序的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-hateoas</code></td><td style="text-align:left">使用 Spring MVC 和 Spring HATEOAS 构建基于超媒体的 RESTful Web 应用程序的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-integration</code></td><td style="text-align:left">使用 Spring Integration 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jdbc</code></td><td style="text-align:left">使用 JDBC 和 HikariCP 连接池的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jersey</code></td><td style="text-align:left">使用 JAX-RS 和 Jersey 构建 RESTful Web 应用程序的初学者。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-web" target="_blank" rel="noopener"><code>spring-boot-starter-web</code></a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jooq</code></td><td style="text-align:left">使用 jOOQ 通过 JDBC 访问 SQL 数据库的入门程序。替代<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-data-jpa" target="_blank" rel="noopener"><code>spring-boot-starter-data-jpa</code></a>或<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-jdbc" target="_blank" rel="noopener"><code>spring-boot-starter-jdbc</code></a></td></tr><tr><td style="text-align:left"><code>spring-boot-starter-json</code></td><td style="text-align:left">读写json的starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-jta-atomikos</code></td><td style="text-align:left">使用 Atomikos 进行 JTA 事务的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-mail</code></td><td style="text-align:left">使用 Java Mail 和 Spring Framework 的电子邮件发送支持的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-mustache</code></td><td style="text-align:left">使用 Mustache 视图构建 Web 应用程序的入门程序</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-oauth2-client</code></td><td style="text-align:left">使用 Spring Security 的 OAuth2/OpenID Connect 客户端功能的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-oauth2-resource-server</code></td><td style="text-align:left">使用 Spring Security 的 OAuth2 资源服务器特性的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-quartz</code></td><td style="text-align:left">使用 Quartz 调度器的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-rsocket</code></td><td style="text-align:left">用于构建 RSocket 客户端和服务器的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-security</code></td><td style="text-align:left">使用 Spring Security 的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-test</code></td><td style="text-align:left">使用包括 JUnit Jupiter、Hamcrest 和 Mockito 在内的库来测试 Spring Boot 应用程序的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-thymeleaf</code></td><td style="text-align:left">使用 Thymeleaf 视图构建 MVC Web 应用程序的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-validation</code></td><td style="text-align:left">使用带有 Hibernate Validator 的 Java Bean Validation 的 Starter</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-web</code></td><td style="text-align:left">使用 Spring MVC 构建 Web 应用程序的入门程序，包括 RESTful 应用程序。使用 Tomcat 作为默认的嵌入式容器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-web-services</code></td><td style="text-align:left">使用 Spring Web 服务的入门者</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-webflux</code></td><td style="text-align:left">使用 Spring Framework 的响应式 Web 支持构建 WebFlux 应用程序的启动器</td></tr><tr><td style="text-align:left"><code>spring-boot-starter-websocket</code></td><td style="text-align:left">使用 Spring Framework 的 WebSocket 支持构建 WebSocket 应用程序的 Starter</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><code>spring-boot-starter-actuator</code></th><th>使用 Spring Boot 的 Actuator 的 Starter，它提供了生产就绪的特性来帮助你监控和管理你的应用程序</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th><code>spring-boot-starter-jetty</code></th><th>使用 Jetty 作为嵌入式 servlet 容器的启动器。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-tomcat" target="_blank" rel="noopener"><code>spring-boot-starter-tomcat</code></a></th></tr></thead><tbody><tr><td><code>spring-boot-starter-log4j2</code></td><td>使用 Log4j2 进行日志记录的启动器。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-logging" target="_blank" rel="noopener"><code>spring-boot-starter-logging</code></a></td></tr><tr><td><code>spring-boot-starter-logging</code></td><td>使用 Logback 进行日志记录的启动器。默认日志记录启动器</td></tr><tr><td><code>spring-boot-starter-reactor-netty</code></td><td>使用 Reactor Netty 作为嵌入式响应式 HTTP 服务器的启动器。</td></tr><tr><td><code>spring-boot-starter-tomcat</code></td><td>使用 Tomcat 作为嵌入式 servlet 容器的启动器。使用的默认 servlet 容器启动器<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-web" target="_blank" rel="noopener"><code>spring-boot-starter-web</code></a></td></tr><tr><td><code>spring-boot-starter-undertow</code></td><td>使用 Undertow 作为嵌入式 servlet 容器的启动器。一个替代方案<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#spring-boot-starter-tomcat" target="_blank" rel="noopener"><code>spring-boot-starter-tomcat</code></a></td></tr></tbody></table></div><p>如果我们不想用spring-boot-starter-web引入的spring-webmvc传递依赖，那么可以使用<exclusions>标签来排除传递依赖，具体代码如下:</exclusions></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排查Spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果spring-boot-starter-web引入的传递版本过低，我们可以在pom文件中直接引入所需的版本，告诉Maven现在需要这个版本的依赖。</p><p>以上内容来自黄文毅的《一步一步学 Spring Boot2 微服务项目实战》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot原理解析&quot;&gt;&lt;a href=&quot;#Spring-Boot原理解析&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot原理解析&quot;&gt;&lt;/a&gt;Spring Boot原理解析&lt;/h1&gt;&lt;h2 id=&quot;回顾入口类&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot原理" scheme="https://tropical-forest.github.io/tags/SpringBoot%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>集成Spring-Security</title>
    <link href="https://tropical-forest.github.io/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/"/>
    <id>https://tropical-forest.github.io/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/</id>
    <published>2022-01-30T06:53:43.000Z</published>
    <updated>2022-07-07T04:43:29.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-基本环境搭建"><a href="#1-基本环境搭建" class="headerlink" title="1. 基本环境搭建"></a>1. 基本环境搭建</h1><p>父pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-1-添加pom依赖"><a href="#1-1-添加pom依赖" class="headerlink" title="1.1 添加pom依赖"></a>1.1 添加pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-创建测试用Controller"><a href="#1-2-创建测试用Controller" class="headerlink" title="1.2 创建测试用Controller"></a>1.2 创建测试用Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"getData"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"date"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.3 创建SpringBoot启动类并run</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSecurityApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootSecurityApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-测试"><a href="#1-4-测试" class="headerlink" title="1.4 测试"></a>1.4 测试</h2><p>访问<a href="http://localhost:8080/getData，由于我们开启了SpringSecurity且当前是未登录状态，页面会被302重定向到http://localhost:8080/login，页面如下" target="_blank" rel="noopener">http://localhost:8080/getData，由于我们开启了SpringSecurity且当前是未登录状态，页面会被302重定向到http://localhost:8080/login，页面如下</a>:</p><p><img src="/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/image-20220122162052002.png" alt="image-20220122162052002"></p><p>用户名: user,密码可以在控制台输出中找到:</p><p><img src="/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/image-20220122162225360.png" alt="image-20220122162225360"></p><p>输入正确的用户名和密码后点击Sign in按钮即被重新302到<a href="http://localhost:8080/getData并显示查询数据。" target="_blank" rel="noopener">http://localhost:8080/getData并显示查询数据。</a></p><p><img src="/2022/01/30/%E9%9B%86%E6%88%90Spring-Security/image-20220122162353226.png" alt="image-20220122162353226"></p><h1 id="2-为Spring-Security设定用户名和密码"><a href="#2-为Spring-Security设定用户名和密码" class="headerlink" title="2. 为Spring Security设定用户名和密码"></a>2. 为Spring Security设定用户名和密码</h1><p>为了解决复杂密码的问题，我们可以在application.yaml做如下设定:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><p>这样就可以通过用户名user密码123来访问<a href="http://localhost:8080/getData接口了" target="_blank" rel="noopener">http://localhost:8080/getData接口了</a></p><h1 id="3-为Spring-Security设定多个用户"><a href="#3-为Spring-Security设定多个用户" class="headerlink" title="3. 为Spring Security设定多个用户"></a>3. 为Spring Security设定多个用户</h1><p>如果想要给Spring Security设定多个用户，则新建一个class，实现接口WebMvcConfigurer(注意：SpringBoot 版本2.0以上，jdk1.8以上):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager inMemoryUserDetailsManager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">"admin"</span>).password(passwordEncoder().encode(<span class="string">"admin"</span>)).roles().build());</span><br><span class="line">        inMemoryUserDetailsManager.createUser(User.withUsername(<span class="string">"guest"</span>).password(passwordEncoder().encode(<span class="string">"guest"</span>)).roles().build());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  inMemoryUserDetailsManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@注意需要注解@EnableWebSecurity</li><li>InMemoryUserDetailsManager：将用户名和密码存储在内存中的用户管理器。</li></ul><p>这样我们可以用两个用户登录，分别是用户名admin密码admin,用户名guest密码guest</p><ul><li>spring security5.x以上密码必须加密，不然会报错</li></ul><h1 id="4-Spring-Security-Mysql"><a href="#4-Spring-Security-Mysql" class="headerlink" title="4. Spring Security + Mysql"></a>4. Spring Security + Mysql</h1><ol><li><p>增加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>配置数据库连接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">### mysql连接信息</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/test</span><br><span class="line">    password: root</span><br><span class="line">    username: root</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>创建测试用表结构及数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists test.user;</span><br><span class="line">create table test.user (</span><br><span class="line">  id int auto_increment primary key,</span><br><span class="line">  username varchar(50),</span><br><span class="line">  password varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into test.user(id, username, password) values (1, &#39;admin&#39;, &#39;admin&#39;);</span><br><span class="line">insert into test.user(id, username, password) values (2, &#39;guest&#39;, &#39;guest&#39;);</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>entity、repository、service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginRepository</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        String sql = <span class="string">"select id, username, password from user where username = ?"</span>;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.query(sql, <span class="keyword">new</span> String[]&#123;username&#125;, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(User<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LoginRepository loginRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LoginService</span><span class="params">(LoginRepository loginRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loginRepository = loginRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  List&lt;User&gt; <span class="title">getUserByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loginRepository.getUserByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>调整WebSecurityConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            List&lt;com.lpy.entity.User&gt; users = loginService.getUserByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (users == <span class="keyword">null</span> || users.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"用户名未找到"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String password = users.get(<span class="number">0</span>).getPassword();</span><br><span class="line">            <span class="keyword">return</span> User.withUsername(username).password(password).roles(<span class="string">""</span>).build();</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意:数据库存的是密文</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-基本环境搭建&quot;&gt;&lt;a href=&quot;#1-基本环境搭建&quot; class=&quot;headerlink&quot; title=&quot;1. 基本环境搭建&quot;&gt;&lt;/a&gt;1. 基本环境搭建&lt;/h1&gt;&lt;p&gt;父pom依赖&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="Spring Security" scheme="https://tropical-forest.github.io/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>集成MongoDB数据库</title>
    <link href="https://tropical-forest.github.io/2022/01/21/%E9%9B%86%E6%88%90MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://tropical-forest.github.io/2022/01/21/%E9%9B%86%E6%88%90MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2022-01-21T13:36:06.000Z</published>
    <updated>2022-07-07T04:43:29.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成MongoDB数据库"><a href="#集成MongoDB数据库" class="headerlink" title="集成MongoDB数据库"></a>集成MongoDB数据库</h1><h2 id="MongoDB数据库介绍"><a href="#MongoDB数据库介绍" class="headerlink" title="MongoDB数据库介绍"></a>MongoDB数据库介绍</h2><h3 id="MongoDB概述"><a href="#MongoDB概述" class="headerlink" title="MongoDB概述"></a>MongoDB概述</h3><p>MongoDB是一个基于分布式文件存储 [1] 的数据库。由<a href="https://baike.baidu.com/item/C%2B%2B" target="_blank" rel="noopener">C++</a>语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB是一个介于<a href="https://baike.baidu.com/item/关系数据库" target="_blank" rel="noopener">关系数据库</a>和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。它支持的数据结构非常松散，是类似<a href="https://baike.baidu.com/item/json" target="_blank" rel="noopener">json</a>的<a href="https://baike.baidu.com/item/bson" target="_blank" rel="noopener">bson</a>格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是它支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立<a href="https://baike.baidu.com/item/索引" target="_blank" rel="noopener">索引</a>。</p><p>主要功能特性:</p><ul><li>面向集合存储</li><li>易存储对象类型的数据</li><li>支持动态查询</li><li>文件存储格式为BSON</li><li>支持复制和故障恢复</li></ul><p>MongoDB已经在多个站点部署，其主要场景如下：</p><p>1）网站实时数据处理。它非常适合实时的插入、更新与查询，并具备网站实时数据存储所需的复制及高度伸缩性。</p><p>2）缓存。由于性能很高，它适合作为信息基础设施的缓存层。在系统重启之后，由它搭建的持久化缓存层可以避免下层的数据源过载。</p><p>3）高伸缩性的场景。非常适合由数十或数百台服务器组成的数据库，它的路线图中已经包含对MapReduce引擎的内置支持。</p><p>不适用的场景如下：</p><p>1）要求高度事务性的系统。</p><p>2）传统的商业智能应用。</p><p>3）复杂的跨文档（表）级联查询。</p><h3 id="MongoDB的安装和简单使用"><a href="#MongoDB的安装和简单使用" class="headerlink" title="MongoDB的安装和简单使用"></a>MongoDB的安装和简单使用</h3><p>略</p><h2 id="集成MongoDB"><a href="#集成MongoDB" class="headerlink" title="集成MongoDB"></a>集成MongoDB</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加MongoDB配置"><a href="#添加MongoDB配置" class="headerlink" title="添加MongoDB配置"></a>添加MongoDB配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###mongodb配置</span></span><br><span class="line">  <span class="comment">###host地址</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">database:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><h3 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h3><p>​    在项目目录/src/main/java/com.lpy.model下新建用户附件类AyUserAttachmentRel,具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserAttachmentRel</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    用户附件类AyUserAttachmentRel开发完成之后，我们开发AyUserAttachment-RelRepository类，该类继承自MongoRepository类，MongoRepository类在spring-data-mongodb包下，类似于Spring Data JPA。AyUserAttachmentRelRepository类的具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserAttachmentRelRepository</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">AyUserAttachmentRel</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    AyUserAttachmentRelRepository类很简单，只是纯粹的继承MongoRepository，就能继承MongoRepositor为我们提供的增删改查等方法。AyUserAttachmentRelRepository开发完成之后，我们开发服务层接口</p><p>AyUserAttachmentRelService类，在AyUserAttachmentRelService中声明save方法，用来简单保存数据，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserAttachmentRelService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyUserAttachmentRel <span class="title">save</span><span class="params">(AyUserAttachmentRel ayUserAttachmentRel)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务接口类开发完成后，开发服务实现类AyUserAttachmentRelServiceImpl，在AyUserAttachRelServiceImpl中实现接口层方法save,注入AyUserAttachmentRelRepository类，并调用AyUserAttachmentRelRepository的save方法将数据保存到MongoDB数据库中，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserAttachmentRelServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyUserAttachmentRelService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyUserAttachmentRelRepository ayUserAttachmentRelRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUserAttachmentRel <span class="title">save</span><span class="params">(AyUserAttachmentRel ayUserAttachmentRel)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ayUserAttachmentRelRepository.save(ayUserAttachmentRel);</span><br><span class="line">        <span class="comment">//return null;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AyUserAttachmentRelService ayUserAttachmentRelService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMongoDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AyUserAttachmentRel ayUserAttachmentRel = <span class="keyword">new</span> AyUserAttachmentRel();</span><br><span class="line">    ayUserAttachmentRel.setId(<span class="string">"1"</span>);</span><br><span class="line">    ayUserAttachmentRel.setUserId(<span class="string">"1"</span>);</span><br><span class="line">    ayUserAttachmentRel.setFileName(<span class="string">"个人简历.doc"</span>);</span><br><span class="line">    ayUserAttachmentRelService.save(ayUserAttachmentRel);</span><br><span class="line">    System.out.println(<span class="string">"保存成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法，成功之后，我们可以在MongoDB数据库中查询到数据。</p><p><img src="/2022/01/21/%E9%9B%86%E6%88%90MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/image-20220121213539854.png" alt="image-20220121213539854"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集成MongoDB数据库&quot;&gt;&lt;a href=&quot;#集成MongoDB数据库&quot; class=&quot;headerlink&quot; title=&quot;集成MongoDB数据库&quot;&gt;&lt;/a&gt;集成MongoDB数据库&lt;/h1&gt;&lt;h2 id=&quot;MongoDB数据库介绍&quot;&gt;&lt;a href=&quot;#M
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="MongoDB" scheme="https://tropical-forest.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>全局异常处理与Retry重试</title>
    <link href="https://tropical-forest.github.io/2022/01/21/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8ERetry%E9%87%8D%E8%AF%95/"/>
    <id>https://tropical-forest.github.io/2022/01/21/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8ERetry%E9%87%8D%E8%AF%95/</id>
    <published>2022-01-21T10:09:32.000Z</published>
    <updated>2022-07-07T04:43:29.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局异常处理与Retry重试"><a href="#全局异常处理与Retry重试" class="headerlink" title="全局异常处理与Retry重试"></a>全局异常处理与Retry重试</h1><p>​    使用Web应用·时，在请求处理过程中发送错误是非常常见的情况。Spring Boot为我们提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。比如现在启动my-spring-boot项目（启动项目前，记得启动Redis服务和ActiveMQ服务）,项目启动完成之后，在浏览器中随便输入一个访问地址，比如<a href="http://localhost:8080/ayUser/testdddd，由于该地址不存在，Spring" target="_blank" rel="noopener">http://localhost:8080/ayUser/testdddd，由于该地址不存在，Spring</a> Boot会跳转到错误页面。如下图所示:</p><p><img src="/2022/01/21/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8ERetry%E9%87%8D%E8%AF%95/image-20220121161958943.png" alt="image-20220121161958943"></p><p>​    虽然Spring Boot为我们提供了默认的错误页面映射，但是在实际应用中，上述页面对用户不友好。因此我们需要自己来实现异常提示。</p><h2 id="Spring-Boot全局异常使用"><a href="#Spring-Boot全局异常使用" class="headerlink" title="Spring Boot全局异常使用"></a>Spring Boot全局异常使用</h2><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><p>在项目目录/src/main/resources/static下新建自定义错误页面404.html，具体的代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span></span><br><span class="line">        主人，我累了，让我休息一会！！！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目目录/src/main/java/con.lpy下新建包error,并在包下新建ErrorPageConfig配置类，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorPageConfig</span> <span class="keyword">implements</span> <span class="title">ErrorPageRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry registry)</span> </span>&#123;</span><br><span class="line">        ErrorPage error400Page = <span class="keyword">new</span> ErrorPage(HttpStatus.BAD_REQUEST, <span class="string">"/404.html"</span>);</span><br><span class="line">        ErrorPage error401Page = <span class="keyword">new</span> ErrorPage(HttpStatus.UNAUTHORIZED, <span class="string">"/404.html"</span>);</span><br><span class="line">        ErrorPage error404Page = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND, <span class="string">"/404.html"</span>);</span><br><span class="line">        ErrorPage error500Page = <span class="keyword">new</span> ErrorPage(HttpStatus.INTERNAL_SERVER_ERROR, <span class="string">"/404.html"</span>);</span><br><span class="line">        registry.addErrorPages(error400Page,error401Page,error404Page,error500Page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>访问一个不存在的地址，由于该链接不存在，因此会出现自定义错误页面。</p><p><img src="/2022/01/21/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%B8%8ERetry%E9%87%8D%E8%AF%95/image-20220121164258743.png" alt="image-20220121164258743"></p><h3 id="全局异常类开发"><a href="#全局异常类开发" class="headerlink" title="全局异常类开发"></a>全局异常类开发</h3><p>首先统一封装自定义业务异常BusinessException，该类继承自RuntimeException异常类，并提供带有异常信息的构造方法，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目目录下/src/main/java/com.lpy.error下新建错误信息类ErrorInfo,该类用于封装错误信息，包括错误码，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorInfo</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SUCCESS = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer ERROR = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//错误信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">//错误码</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Data的使用需要安装插件lombok</p><p>其次，在项目目录下/src/main/java/com.lpy.error下新建统一异常处理类GlobalDefaultExceptionHandler，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"com.lpy"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalDefaultExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BusinessException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">ResponseBody</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ErrorInfo</span> <span class="title">defaultErrorHandler</span>(<span class="title">HttpServletRequest</span> <span class="title">req</span>, <span class="title">Exception</span> <span class="title">e</span>) <span class="title">throws</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">        ErrorInfo errorInfo = <span class="keyword">new</span> ErrorInfo();</span><br><span class="line">        errorInfo.setMessage(e.getMessage());</span><br><span class="line">        errorInfo.setUrl(req.getRequestURI());</span><br><span class="line">        errorInfo.setCode(ErrorInfo.SUCCESS);</span><br><span class="line">        <span class="keyword">return</span> errorInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@ControllerAdvice: 定义统一的异常处理类</li><li>@ExceptionHandler： 用来定义函数针对的异常类型，可以传入多个需要捕获的异常类</li><li>@ResponseBody：如果返回的为json数据或其他对象，就添加该注解</li></ul><p>最后，在AyUserController类下添加控制层方法findAll,并在方法里抛出BusinessException，该异常会被全局异常类捕获到，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ayUser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AyUserService ayUserService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/findAll"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">findAll</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">      List&lt;AyUser&gt; ayUser = ayUserService.findAll();</span><br><span class="line">      model.addAttribute(<span class="string">"users"</span>,ayUser);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"业务异常"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//省略其他代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>重新启动项目，项目启动成功后，在浏览器中访问地址<a href="http://localhost:8088/ayUser/findAll，可以看到后端返回的json信息，具体信息如下所示" target="_blank" rel="noopener">http://localhost:8088/ayUser/findAll，可以看到后端返回的json信息，具体信息如下所示</a>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"message"</span>:<span class="string">"业务异常"</span>,<span class="attr">"code"</span>:<span class="number">200</span>,<span class="attr">"url"</span>:<span class="string">"/ayUser/findAll"</span>,<span class="attr">"data"</span>:<span class="literal">null</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Retry重试机制"><a href="#Retry重试机制" class="headerlink" title="Retry重试机制"></a>Retry重试机制</h2><h3 id="Retry重试介绍"><a href="#Retry重试介绍" class="headerlink" title="Retry重试介绍"></a>Retry重试介绍</h3><p>​    当我们调用一个接口时，可能由于网络等原因造成第一次失败，再去尝试就成功了，这就是重试机制。重试的解决方案有很多，比如利用try-catch-redo简单重试模式，通过判断返回结果或监听异常来判断是否重试。</p><p>​    try-catch-redo重试模式还有可能重试无效，解决这个问题的方法是尝试增加重试次数（retrycount)和重试间隔周期（interval)，以达到增加重试有效的可能性，因此我们可以利用try-catch-redo-retry strategy策略重试模式</p><p>​    但是这两种策略有一个共同问题就是：正常逻辑和重试逻辑强耦合。基于这些问题，对于Spring-Retry规范正常逻辑和重试逻辑，将正常逻辑和重试逻辑解耦。Spring-Retry是一个开源包，该工具把重试模板定制化，可以设置重试策略和回退策略。同时，重试执行实例保证线程安全。Spring-Retry重试可以用java代码方式实现，也可以用注解@Retryable实现，这样用注解的方法对方法进行重试。</p><h3 id="Retry重试机制的使用"><a href="#Retry重试机制的使用" class="headerlink" title="Retry重试机制的使用"></a>Retry重试机制的使用</h3><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    依赖添加完成之后，我们需要在入口类中添加注解@EnableRetry开启Retry重试。完整代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableRetry</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDruidApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootDruidApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，在AyUserService类下添加新接口findByNameAndPasswordRetry,具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">AyUser <span class="title">findByNameAndPasswordRetry</span><span class="params">(String name, String password)</span></span>;</span><br></pre></td></tr></table></figure><p>我们在AyUserServiceImpl类实现接口findByNamePasswordRetry，并在方法中故意抛出业务异常，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Retryable</span>(value = BusinessException<span class="class">.<span class="keyword">class</span>,<span class="title">maxAttempts</span> </span>= <span class="number">5</span>,backoff = <span class="meta">@Backoff</span>(delay = <span class="number">5000</span>,multiplier = <span class="number">2</span>))</span><br><span class="line"><span class="function"><span class="keyword">public</span> AyUser <span class="title">findByNameAndPasswordRetry</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"[findByNameAndPasswordRetry] 方法失败重试了！ "</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException();</span><br><span class="line">    <span class="comment">//return null;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Retryable: value属性表示当出现哪些异常的时候触发重试，maxAttempts表示最大重试次数，默认为3，delay表示重试的延迟时间，multiplier表示上一次延时时间是这一次的倍数。</p><p>最后，我们在AyUserController类下添加控制层方法findByNamePasswordRetry，在该方法中调用服务层AyUserServiceImpl的方法findByNameAndPasswordRetry，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/findByNameAndPasswordRetry"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findByNamePasswordRetry</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">    AyUser ayUser = ayUserService.findByNameAndPasswordRetry(<span class="string">"阿毅"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    model.addAttribute(<span class="string">"users"</span>,ayUser);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>重新启动项目，访问<a href="http://localhost:8088/ayUser/findByNameAndPasswordRetry，我们可以从控制台中多次看到如下打印信息" target="_blank" rel="noopener">http://localhost:8088/ayUser/findByNameAndPasswordRetry，我们可以从控制台中多次看到如下打印信息</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[findByNameAndPasswordRetry] 方法失败重试了！</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全局异常处理与Retry重试&quot;&gt;&lt;a href=&quot;#全局异常处理与Retry重试&quot; class=&quot;headerlink&quot; title=&quot;全局异常处理与Retry重试&quot;&gt;&lt;/a&gt;全局异常处理与Retry重试&lt;/h1&gt;&lt;p&gt;​    使用Web应用·时，在请求处理过程
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="全局异常处理" scheme="https://tropical-forest.github.io/tags/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>异步消息和异步调用</title>
    <link href="https://tropical-forest.github.io/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
    <id>https://tropical-forest.github.io/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/</id>
    <published>2022-01-21T03:45:31.000Z</published>
    <updated>2022-07-07T04:43:29.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步消息和异步调用"><a href="#异步消息和异步调用" class="headerlink" title="异步消息和异步调用"></a>异步消息和异步调用</h1><h2 id="JMS消息介绍"><a href="#JMS消息介绍" class="headerlink" title="JMS消息介绍"></a>JMS消息介绍</h2><p><strong>Java消息服务</strong>（<strong>Java Message Service</strong>，<strong>JMS</strong>）应用程序接口是一个java平台中关于<a href="https://zh.wikipedia.org/w/index.php?title=面向消息中间件&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">面向消息中间件</a>（MOM）的<a href="https://zh.wikipedia.org/wiki/API" target="_blank" rel="noopener">API</a>，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。</p><p>Java消息服务的规范包括两种消息模式，点对点(P2P)和发布者／订阅者(pub/sub)。许多提供商支持这一通用框架因此，程序员可以在他们的分布式软件中实现面向消息的操作，这些操作将具有不同面向消息中间件产品的可移植性。</p><p>Java消息服务支持同步和异步的消息处理，在某些场景下，同步消息是必要的；在其他场景下，异步消息比同步消息操作更加便利。</p><p>Java消息服务支持面向事件的方法接收消息，<a href="https://zh.wikipedia.org/wiki/事件驅動程式設計" target="_blank" rel="noopener">事件驱动的程序设计</a>现在被广泛认为是一种富有成效的<a href="https://zh.wikipedia.org/wiki/编程范型" target="_blank" rel="noopener">程序设计范例</a>，程序员们都相当熟悉。</p><p>在应用系统开发时，Java消息服务可以推迟选择面对消息中间件产品，也可以在不同的面对消息中间件切换。</p><p>​    P2P的特点是每个消息只有一个消费者（一旦被消费，消息就不在消息队列中），发送者和接收者之间在时间上没有依赖性。也就是说当发送者发送了消息之后，无论接收者有没有正在运行，都不会影响消息被发送到队列中，接收者在成功接收消息之后需向队列应答成功。</p><p>​    另一种称为Pub/Sub模型。发布-订阅模型定义了如何向一个内容节点发布和订阅消息，这个内容节点称为topic(主题)。主题可以认为是消息传递的中介，消息发布者将消息发布到某个主题，而消息订阅者则从主题订阅消息。主题使得消息的订阅者与消息的发布者互相保持独立，不需要进行接触即可保证消息的传递，发布-订阅模型在消息的一对多广播时采用。</p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220119223953741.png" alt="image-20220119223953741"></p><p>​    Pub/Sub的特点是每个消息可以有多个消费者，发布者和订阅者之间有时间上的依赖性。针对某个主题的订阅者，必须创建一个订阅者之后，才能消费发布者的消息，而且为了消费消息，订阅者必须保持运行的状态。为了缓和这样严格的时间相关性，JMS允许订阅者创建一个可持久化的订阅。这样，即使订阅者没有被激活(运行)，也能接收到发布者的消息。如果你希望发送的消息可以不做任何处理、被一个消息者处理或者可以被多个消费者处理，那么可以采用Pub/Sub模型。</p><h2 id="Spring-Boot-集成ActiveMQ"><a href="#Spring-Boot-集成ActiveMQ" class="headerlink" title="Spring Boot 集成ActiveMQ"></a>Spring Boot 集成ActiveMQ</h2><h3 id="ActiveMQ概述"><a href="#ActiveMQ概述" class="headerlink" title="ActiveMQ概述"></a>ActiveMQ概述</h3><p>​    MQ全称为MessageQueue,中文名为消息队列，是一个消息的接收和转发的容器，可用于消息推送。ActiveMQ是Apache提供的一个开源消息系统，完成采用Java来实现，因此能够很好地支持J2EE提出的JMS规范。</p><h3 id="ActiveMQ的安装"><a href="#ActiveMQ的安装" class="headerlink" title="ActiveMQ的安装"></a>ActiveMQ的安装</h3><p>下载地址:<a href="https://activemq.apache.org/" target="_blank" rel="noopener">https://activemq.apache.org/</a></p><p>解压后进入bin目录，根据操作系统进入win32文件夹还是win64文件夹，双击activemq.bat即可启动。</p><p>出现下图则表示安装成功:</p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220119225443649.png" alt="image-20220119225443649"></p><p>安装成功后，在浏览器中输入<a href="http://localhost:8161/admin链接访问，第一次访问需要输入用户名admin和密码admin进行登录，登录成功后可看到ActiveMQ的首页，如下图所示" target="_blank" rel="noopener">http://localhost:8161/admin链接访问，第一次访问需要输入用户名admin和密码admin进行登录，登录成功后可看到ActiveMQ的首页，如下图所示</a>:</p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220119225815294.png" alt="image-20220119225815294"></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在Spring Boot 中集成ActiveMQ，首先需要在pom.xml文件中引入所需的依赖，具体代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加ActiveMQ配置"><a href="#添加ActiveMQ配置" class="headerlink" title="添加ActiveMQ配置"></a>添加ActiveMQ配置</h3><p>我们需要在application.yaml配置文件中添加ActiveMQ配置，具体代码如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">    <span class="attr">in-memory:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">packages:</span></span><br><span class="line">      <span class="attr">trust-all:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>spring.activemq.packages.trust-all： ObjectMessage的使用声明机制是不安全的，ActiveMQ自5.12.2和5.13.0之后，强制Consumer端声明一份可信任的包列表。只有当ObjectMessage中的Object在可信任包内，才能被提取处理。该配置表示信任所有的包。</li></ul><h2 id="使用ActiveMQ"><a href="#使用ActiveMQ" class="headerlink" title="使用ActiveMQ"></a>使用ActiveMQ</h2><h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><p>在数据库中建立说说表ay_mood，具体建表语句如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;ay_mood&#96;;</span><br><span class="line">CREATE TABLE &#96;ay_mood&#96;  (</span><br><span class="line">  &#96;id&#96; varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  &#96;content&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;user_id&#96; varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,</span><br><span class="line">  &#96;praise_num&#96; int(11) NULL DEFAULT NULL,</span><br><span class="line">  &#96;publish_time&#96; datetime NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  key &#96;mood_user_id_index&#96; (&#96;user_id&#96;) using btree</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Compact;</span><br></pre></td></tr></table></figure><p>数据库表建好之后，生成对应的Java Bean对象，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"ay_mood"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMood</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//说说内容</span></span><br><span class="line">    <span class="keyword">private</span>  String content;</span><br><span class="line">    <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="comment">//点赞个数</span></span><br><span class="line">    <span class="keyword">private</span>  Integer praiseNum;</span><br><span class="line">    <span class="comment">//发表时间</span></span><br><span class="line">    <span class="keyword">private</span> Date publishTime;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中@Data的使用需要安装lombok插件，该注解会帮你自动生成set.get等方法。</p><p>AyMoode实体对象开发完成之后，开发对应的AyMoodRepository接口，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyMoodRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AyMood</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    Repository接口开发完成之后，开发对应的说说服务层接口AyMoodService和相应的实现类AyMoodServiceImpl。AyMoodService具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:微信说说服务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyMoodService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyMood <span class="title">savee</span><span class="params">(AyMood ayMood)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMoodServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyMoodService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyMoodRepository ayMoodRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyMood <span class="title">savee</span><span class="params">(AyMood ayMood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayMoodRepository.save(ayMood);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span>  AyMoodService ayMoodService;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAyMood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AyMood ayMood = <span class="keyword">new</span> AyMood();</span><br><span class="line">    ayMood.setId(<span class="string">"1"</span>);</span><br><span class="line">    ayMood.setUserId(<span class="string">"1"</span>);</span><br><span class="line">    ayMood.setPraiseNum(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//说说内容</span></span><br><span class="line">    ayMood.setContent(<span class="string">"这是我的第一条微信说说"</span>);</span><br><span class="line">    ayMood.setPublishTime(<span class="keyword">new</span> Date());</span><br><span class="line">    AyMood mood = ayMoodService.save(ayMood);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行测试用例，运行成功后，可以在数据库表ay_mood中看到一条数据。如下图所示:</p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220120083242658.png" alt="image-20220120083242658"></p><p>​    微信的用户量极大，我们不可能找到用户每发一次说说，后端就单独开一个线程，并将该说说内容实时保存到数据库中。因为后端服务系统的线程数和数据库线程池中的线程数量都是固定而且宝贵的，这样会给后端服务和数据库造成带来极大的压力。所以我们使用ActiveMQ做异步消费来抵抗用户量大及发表说说而产生的压力，提高系统整体的性能。</p><p>​    生产者AyMoodProducer的代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMoodProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination, <span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(destination, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JmsMessagingTemplate： 发消息的工具类，也可以注入JmsTemplate,JmsMessagingTemplate对JmsTemplate进行了封装。参数destination是发送到队列的，message是待发送的消息。</li></ul><h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><p>消费者AyMoodConsumer,具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMoodConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"ay.queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueue</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户发表说说【"</span>+text+<span class="string">"】成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@JmsListener：使用JmsListener配置消费者监听的队列ay.queue，其中text是接收到的消息。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> AyMoodProducer ayMoodProducer;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testActiveMQ</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Destination destination = <span class="keyword">new</span> ActiveMQQueue((<span class="string">"ay.queue"</span>));</span><br><span class="line">    ayMoodProducer.sendMessage(destination,<span class="string">"hello,mq!!!!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试方法，可以看到以下打印信息。同时可以在浏览器中访问<a href="http://localhost:8161/admin/，查看队列ay.queue的消费情况。" target="_blank" rel="noopener">http://localhost:8161/admin/，查看队列ay.queue的消费情况。</a></p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220120180712786.png" alt="image-20220120180712786"></p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220120180905458.png" alt="image-20220120180905458"></p><p>生产者和消费者开发完成之后，现在我们把用户发表说说改成异步消费模式。首先在AyMoodService类下添加异步保存接口asynSave(),具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述:微信说说服务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyMoodService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyMood <span class="title">save</span><span class="params">(AyMood ayMood)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">asynSave</span><span class="params">(AyMood ayMood)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在类AyMoodServiceImpl下实现asynSave方法，asynSave方法并不保存说说记录，而是调用AyMoodProducer类的sendMessage推送消息，完整代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMoodServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyMoodService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyMoodRepository ayMoodRepository;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyMood <span class="title">save</span><span class="params">(AyMood ayMood)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayMoodRepository.save(ayMood);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Destination destination = <span class="keyword">new</span> ActiveMQQueue(<span class="string">"ay.queue.asyn.save"</span>);</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyMoodProducer ayMoodProducer;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">asynSave</span><span class="params">(AyMood ayMood)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//往队列ay.queue.asyn.save推送消息，消息内容为说说实体</span></span><br><span class="line">        ayMoodProducer.sendMessage(destination, ayMood);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"success"</span>;</span><br><span class="line">        <span class="comment">//return null;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其次，在AyMoodProducer生产者类下添加sendMessage(Destination destination, final AyMood ayMood)方法，消息内容是ayMood实体对象。AyMoodProducer生产者的完整代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMoodProducer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination, <span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(destination, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Destination destination, <span class="keyword">final</span> AyMood ayMood)</span> </span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(destination,ayMood);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，修改AyMoodConsumer消费者，在receiveQueue方法中保持说说记录，完整代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyMoodConsumer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"ay.queue"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueue</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"用户发表说说【"</span>+text+<span class="string">"】成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyMoodService ayMoodService;</span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"ay.queue.asyn.save"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveQueue</span><span class="params">(AyMood ayMood)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"异步保存，异步保存"</span>);</span><br><span class="line">        ayMoodService.save(ayMood);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户发表说说，异步保存所有代码开发完成之后，在测试类中添加testActiveMQAsynSave测试方法，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testActiveMQAsynSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       AyMood ayMood = <span class="keyword">new</span> AyMood();</span><br><span class="line">       ayMood.setId(<span class="string">"2"</span>);</span><br><span class="line">       ayMood.setUserId(<span class="string">"2"</span>);</span><br><span class="line">       ayMood.setPraiseNum(<span class="number">0</span>);</span><br><span class="line">       ayMood.setContent(<span class="string">"这是我的第一条微信说说！！！"</span>);</span><br><span class="line">       ayMood.setPublishTime(<span class="keyword">new</span> Date());</span><br><span class="line">       String msg = ayMoodService.asynSave(ayMood);</span><br><span class="line">       System.out.println(<span class="string">"异步发表说说："</span> + msg);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行测试方法，成功之后，我们可以在数据库表ay_mood中查询到用户（id为2）发表的记录。如下图所示:</p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220121102225241.png" alt="image-20220121102225241"></p><h2 id="Spring-Boot-异步调用"><a href="#Spring-Boot-异步调用" class="headerlink" title="Spring Boot 异步调用"></a>Spring Boot 异步调用</h2><h3 id="异步调用介绍"><a href="#异步调用介绍" class="headerlink" title="异步调用介绍"></a>异步调用介绍</h3><p>​    异步调用是相对于同步调用而言，同步调用是指程序按预定顺序一步步执行，每一步必须等到上一步执行完成之后才能执行，而异步调用无须等待上一步程序执行完成即可执行。在日常开发的项目中，当访问的接口较慢或者做耗时任务时，不想程序一直卡在耗时任务上，想让程序能够并行执行，我们除了可以使用多线程来并行地处理任务，也可以使用Spring Boot提供的异步处理方式@Async来处理。在Spring Boot框架中，只要添加@Async注解就能够将普通的同步任务改为异步调用任务。</p><h3 id="Async的使用"><a href="#Async的使用" class="headerlink" title="@Async的使用"></a>@Async的使用</h3><p>​    使用@Async注解之前，我们需要在入口类添加注解@EnableAsync开启异步调用，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootDruidApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootDruidApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，修改AyUserServiceImpl类的findAll方法，使它能够记录代码执行完成所花费的时间，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// return ayUserRepository.findAll();</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始做任务"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;AyUser&gt; ayUserList = ayUserRepository.findAll();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"完成任务，耗时："</span> +(end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> ayUserList;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"method [findAll] error"</span>, e);</span><br><span class="line">        <span class="keyword">return</span> Collections.EMPTY_LIST;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>​        AyUserServiceImpl类的方法findAll()开发完成之后，在测试类上添加测试方法testAsync(),该方法调用3次findAll(),并记录总共消耗的时间，由于现在是同步调用，因此代码按照顺序一步一步执行。testAsync方法的具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">"第一次查询所有用户！"</span>);</span><br><span class="line">    List&lt;AyUser&gt; ayUserList1 = ayUserService.findAll();</span><br><span class="line">    logger.info(<span class="string">"第二次查询所有用户！"</span>);</span><br><span class="line">    List&lt;AyUser&gt; ayUserList2 = ayUserService.findAll();</span><br><span class="line">    logger.info(<span class="string">"第三次查询所有用户！"</span>);</span><br><span class="line">    List&lt;AyUser&gt; ayUserList3 = ayUserService.findAll();</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">"总共消耗:"</span>+(endTime-startTime)+<span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试方法testAsync()开发完成之后，我们运行它，运行成功之后，可以在控制台看到如下打印信息。</p><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/Users\刘培永\Desktop\异步消息和异步调用\image-20220121114145722.png" alt="image-20220121114145722" style="zoom:50%;"></p><p>从打印结构可以看出，调用3次findAll总共消耗232毫秒。现在我们在AyUserService接口中添加异步查询方法findAsynAll()，并在AyUserServiceImpl类中实现该方法，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line">   <span class="comment">//省略其他代码</span></span><br><span class="line">    <span class="comment">//异步查询</span></span><br><span class="line">    Future&lt;List&lt;AyUser&gt;&gt; findAsynAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在AyUserServiceImpl类中实现findAsynAll()方法，并在方法中添加异步调用注解@Async，具体代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;List&lt;AyUser&gt;&gt; findAsynAll() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        logger.info(<span class="string">"开始做任务"</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;AyUser&gt; ayUserList = ayUserRepository.findAll();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">"完成任务，耗时："</span>+(end-start)+<span class="string">"毫秒"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;List&lt;AyUser&gt;&gt;(ayUserList);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"method [findAll] error"</span>,e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;List&lt;AyUser&gt;&gt;(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类开发测试方法testAsync2(),具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsync2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">"第一次查询所有用户！"</span>);</span><br><span class="line">    Future&lt;List&lt;AyUser&gt;&gt; ayUserList1 = ayUserService.findAsynAll();</span><br><span class="line">    logger.info(<span class="string">"第二次查询所有用户！"</span>);</span><br><span class="line">    Future&lt;List&lt;AyUser&gt;&gt; ayUserList2 = ayUserService.findAsynAll();</span><br><span class="line">    logger.info(<span class="string">"第三次查询所有用户！"</span>);</span><br><span class="line">    Future&lt;List&lt;AyUser&gt;&gt; ayUserList3 = ayUserService.findAsynAll();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ayUserList1.isDone() &amp;&amp; ayUserList2.isDone()&amp;&amp; ayUserList3.isDone()) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">"总共消耗:"</span>+(endTime-startTime)+<span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/01/21/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%92%8C%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/image-20220121114303677.png" style="zoom:50%;"></p><p>从上面结果可知，异步调用的速度比同步调用快。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异步消息和异步调用&quot;&gt;&lt;a href=&quot;#异步消息和异步调用&quot; class=&quot;headerlink&quot; title=&quot;异步消息和异步调用&quot;&gt;&lt;/a&gt;异步消息和异步调用&lt;/h1&gt;&lt;h2 id=&quot;JMS消息介绍&quot;&gt;&lt;a href=&quot;#JMS消息介绍&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="异步消息" scheme="https://tropical-forest.github.io/tags/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF/"/>
    
      <category term="异步调用" scheme="https://tropical-forest.github.io/tags/%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8/"/>
    
      <category term="ActiveMQ" scheme="https://tropical-forest.github.io/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>集成MyBatis</title>
    <link href="https://tropical-forest.github.io/2022/01/19/%E9%9B%86%E6%88%90MyBatis/"/>
    <id>https://tropical-forest.github.io/2022/01/19/%E9%9B%86%E6%88%90MyBatis/</id>
    <published>2022-01-19T12:53:02.000Z</published>
    <updated>2022-07-07T04:43:29.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集成MyBatis"><a href="#集成MyBatis" class="headerlink" title="集成MyBatis"></a>集成MyBatis</h1><h2 id="MyBatis简介"><a href="#MyBatis简介" class="headerlink" title="MyBatis简介"></a>MyBatis简介</h2><p>​    MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><h2 id="集成MyBatis-1"><a href="#集成MyBatis-1" class="headerlink" title="集成MyBatis"></a>集成MyBatis</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加MyBatis配置"><a href="#添加MyBatis配置" class="headerlink" title="添加MyBatis配置"></a>添加MyBatis配置</h3><p>我们需要在application.yaml文件中添加如下配置信息:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mappers/*Mapper.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.lpy.dao</span></span><br></pre></td></tr></table></figure><ul><li>mybatis.mapper-locations: Mapper资源文件存放的路径</li><li>mybatis.type-aliases-package: Dao接口文件存放的目录</li></ul><h3 id="Dao层和Mapper文件开发"><a href="#Dao层和Mapper文件开发" class="headerlink" title="Dao层和Mapper文件开发"></a>Dao层和Mapper文件开发</h3><p>application.yaml配置完成之后，我们需要根据MyBatis配置添加对应的文件夹。首先在/src/main/java/com.lpy.dao目录下新建AyUserDao接口，这样SpringBoot启动时，就可以根据applciaton.yaml配置mybatis.type-aliases-package,找到AyUserDao接口。AyUserDao具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述：通过用户名和密码查询用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">AyUser <span class="title">findByNamePassword</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"password"</span>)</span> String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Mapper: 重要注解，MyBatis根据接口定义与Mapper文件中的SQL语句动态创建接口实现</li><li>@Param:注解参数，在Mapper.xml配置文件中，可以采用#{}的方式对@Param注解括号内的参数进行引用。</li><li>findByNameAndPassword： 该方法可以通过用户名和密码查询用户</li></ul><p>​    然后在/src/main/resources目录下新建AyUserMapper.xml文件，Spring Boot在项目启动时，会根据application.yaml配置mybatis.mapper-locations找到该文件。AyUserMapper具体代码如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.lpy.dao.AyUserDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserResultMap"</span> <span class="attr">type</span>=<span class="string">"com.lpy.model.AyUser"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByNamePassword"</span> <span class="attr">resultMap</span>=<span class="string">"UserResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">        select * from ay_user u</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            u.name = #&#123;name&#125;</span><br><span class="line">            and u.password = #&#123;password&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><mapper>标签: 该标签的namespace属性用于绑定Dao接口</mapper></li><li>select 标签: 用来编写select语句，映射查询语句.select标签有几个重要的属性，比如resultMap。</li><li><resultMap>： 映射管理器resultMap,是Mybatis中最强大的工具，描述了如何将数据库查询的结果集映射到java对象，并管理结果和实体类之间的映射关系。</resultMap></li></ul><p>AyUserDao代码开发完成后，在之前开发好的AyUserService接口类添加接口接口findByNameAndPassword，具体代码下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyUser <span class="title">findByNameAndPassword</span><span class="params">(String name, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AyUserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//省略上面代码</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span>  AyUserDao ayUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">findByNameAndPassword</span><span class="params">(String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserDao.findByNamePassword(name,password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略下面代码</span></span><br><span class="line"> |</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在测试类中添加测试方法，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AyUser ayUser = ayUserService.findByNameAndPassword(<span class="string">"阿毅"</span>,<span class="string">"123456"</span>);</span><br><span class="line">    logger.info(ayUser.getId() + ayUser.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试用例，在IDEA控制台可以看到相应的打印信息。</p><p>需要注意：在数据库有很多表的时候，一定不要手写mapp.xml代码，要用mybatis逆向工程自动生成mapper文件，具体做法自己百度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集成MyBatis&quot;&gt;&lt;a href=&quot;#集成MyBatis&quot; class=&quot;headerlink&quot; title=&quot;集成MyBatis&quot;&gt;&lt;/a&gt;集成MyBatis&lt;/h1&gt;&lt;h2 id=&quot;MyBatis简介&quot;&gt;&lt;a href=&quot;#MyBatis简介&quot; class
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="MyBatis" scheme="https://tropical-forest.github.io/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Quartz定时器和发送Email</title>
    <link href="https://tropical-forest.github.io/2022/01/19/Quartz%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81Email/"/>
    <id>https://tropical-forest.github.io/2022/01/19/Quartz%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81Email/</id>
    <published>2022-01-19T11:26:51.000Z</published>
    <updated>2022-07-07T04:43:29.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Quartz定时器和发送Email"><a href="#Quartz定时器和发送Email" class="headerlink" title="Quartz定时器和发送Email"></a>Quartz定时器和发送Email</h1><h2 id="使用Quartz-定时器"><a href="#使用Quartz-定时器" class="headerlink" title="使用Quartz 定时器"></a>使用Quartz 定时器</h2><h3 id="Quartz概述"><a href="#Quartz概述" class="headerlink" title="Quartz概述"></a>Quartz概述</h3><ul><li><p>Quartz 是一个完全由 Java 编写的开源作业调度框架，为在 Java 应用程序中进行作业调度提供了简单却强大的机制。</p></li><li><p>Quartz 可以与J2EE 与 J2SE 应用程序相结合也可以单独使用。</p></li><li><p>Quartz 允许程序开发人员根据时间的间隔来调度作业。</p></li><li><p>Quartz 实现了作业和触发器的多对多的关系，还能把多个作业与不同的触发器关联。</p></li><li>Quartz 定时器的作用很多，比如定式发送信息、定时生成报表、定时取消订单等</li></ul><p>​    Quartz框架主要核心组件包括调度器、触发器、作业。调度器作为作业的总指挥，触发器作为作业的操作者，作业为应用的功能模块。</p><p>其关系如下图所示:</p><p><img src="/2022/01/19/Quartz%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81Email/image-20220119162829667.png" alt="image-20220119162829667"></p><p>(1) Job </p><p>表示一个工作，要执行的具体内容。此接口中只有一个方法，如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">void</span> <span class="function"><span class="title"><span class="built_in">execute</span></span>(<span class="variable">JobExecutionContext</span> <span class="variable">context</span>)</span></span><br></pre></td></tr></table></figure><p>(2) <strong>JobDetail</strong> 表示一个具体的可执行的调度程序，Job 是这个可执行程调度程序所要执行的内容，另外 JobDetail 还包含了这个任务调度的方案和策略。</p><p>(3) <strong>Trigger</strong> 代表一个调度参数的配置，什么时候去调。</p><p>(4) <strong>Scheduler</strong> 代表一个调度容器，一个调度容器中可以注册多个 JobDetail 和 Trigger。当 Trigger 与 JobDetail 组合，就可以被 Scheduler 容器调度了。</p><p>CronTrigger配置格式:</p><p>格式: [秒] [分] [小时] [日] [月] [周] [年]</p><div class="table-container"><table><thead><tr><th>序号</th><th>说明</th><th>是否必填</th><th>允许填写的值</th><th style="text-align:center">允许的通配符</th></tr></thead><tbody><tr><td>1</td><td>秒</td><td>是</td><td>0-59</td><td style="text-align:center">, - * /</td></tr><tr><td>2</td><td>分</td><td>是</td><td>0-59</td><td style="text-align:center">, - * /</td></tr><tr><td>3</td><td>小时</td><td>是</td><td>0-23</td><td style="text-align:center">, - * /</td></tr><tr><td>4</td><td>日</td><td>是</td><td>1-31</td><td style="text-align:center">, - * ? / L W</td></tr><tr><td>5</td><td>月</td><td>是</td><td>1-12 or JAN-DEC</td><td style="text-align:center">, - * /</td></tr><tr><td>6</td><td>周</td><td>是</td><td>1-7 or SUN-SAT</td><td style="text-align:center">, - * ? / L #</td></tr><tr><td>7</td><td>年</td><td>否</td><td>empty 或 1970-2099</td><td style="text-align:center">, - * /</td></tr></tbody></table></div><p>常用示例:</p><div class="table-container"><table><thead><tr><th><code>0 0 12 * * ?</code></th><th style="text-align:left">每天12点触发</th></tr></thead><tbody><tr><td><code>0 15 10 ? * *</code></td><td style="text-align:left">每天10点15分触发</td></tr><tr><td><code>0 15 10 * * ?</code></td><td style="text-align:left">每天10点15分触发</td></tr><tr><td><code>0 15 10 * * ? *</code></td><td style="text-align:left">每天10点15分触发</td></tr><tr><td><code>0 15 10 * * ? 2005</code></td><td style="text-align:left">2005年每天10点15分触发</td></tr><tr><td><code>0 * 14 * * ?</code></td><td style="text-align:left">每天下午的 2点到2点59分每分触发</td></tr><tr><td><code>0 0/5 14 * * ?</code></td><td style="text-align:left">每天下午的 2点到2点59分(整点开始，每隔5分触发)</td></tr><tr><td><code>0 0/5 14,18 * * ?</code></td><td style="text-align:left">每天下午的 2点到2点59分(整点开始，每隔5分触发) 每天下午的 18点到18点59分(整点开始，每隔5分触发)</td></tr><tr><td><code>0 0-5 14 * * ?</code></td><td style="text-align:left">每天下午的 2点到2点05分每分触发</td></tr><tr><td><code>0 10,44 14 ? 3 WED</code></td><td style="text-align:left">3月分每周三下午的 2点10分和2点44分触发</td></tr><tr><td><code>0 15 10 ? * MON-FRI</code></td><td style="text-align:left">从周一到周五每天上午的10点15分触发</td></tr><tr><td><code>0 15 10 15 * ?</code></td><td style="text-align:left">每月15号上午10点15分触发</td></tr><tr><td><code>0 15 10 L * ?</code></td><td style="text-align:left">每月最后一天的10点15分触发</td></tr><tr><td><code>0 15 10 ? * 6L</code></td><td style="text-align:left">每月最后一周的星期五的10点15分触发</td></tr><tr><td><code>0 15 10 ? * 6L 2002-2005</code></td><td style="text-align:left">从2002年到2005年每月最后一周的星期五的10点15分触发</td></tr><tr><td><code>0 15 10 ? * 6#3</code></td><td style="text-align:left">每月的第三周的星期五开始触发</td></tr><tr><td><code>0 0 12 1/5 * ?</code></td><td style="text-align:left">每月的第一个中午开始每隔5天触发一次</td></tr><tr><td><code>0 11 11 11 11 ?</code></td><td style="text-align:left">每年的11月11号 11点11分触发(光棍节)</td></tr></tbody></table></div><p>​    Scheduler 负责管理Quartz的运行环境，Quartz 是基于多线程架构的，启动的时候会初始化一套线程，这套线程用来执行一些预置的作业。 Trigger和JobDetail可以注册到Scheduler中。Scheduler可以将Trigger绑定到某一JobDetail中，这样当Trigger触发时，对应的Job就会被执行。Scheduler拥有一个SchedulerContext，类似于ServletContext，保存着Scheduler上下文信息，Job 和 Trigger都可以访问SchedulerContext内的信息。Scheduler使用一个线程池作为任务的基础设施，任务通过共享线程池中的线程提高运行效率。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.quartz-scheduler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定时器配置文件"><a href="#定时器配置文件" class="headerlink" title="定时器配置文件"></a>定时器配置文件</h3><p>​    创建定时器的方法有两种：1、使用XML配置文件的方式；2、使用注解的方式。</p><p>这里使用注解的方式使用定时器配置。</p><p>我们在/src/main/java/com.lpy.quartz目录下创建SendMailQuartz定时器类，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailQuartz</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志对象</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(SendMailQuartz<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每5秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"*/5 * *  * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentByCron</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"定时器运行了！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Configurable: 加上此注解的类相当于XML配置文件，可以被Spring Boot扫描初始化。</li><li>@EnableScheduling：通过在配置类注解@EnableScheduling 来开启对计划任务的支持，然后在要执行计划任务的方法上注解@Scheduled，声明这是一个计划任务。</li><li>@Scheduled： 注解为定时任务，在cron表达式里写执行的时机。</li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动项目，查看控制台输出信息，发现每个5秒就打印指定的信息。则表示Quartz定时器设置成功。</p><p><img src="/2022/01/19/Quartz%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81Email/image-20220119173655292.png" alt="image-20220119173655292"></p><h2 id="Spring-Boot发送Email"><a href="#Spring-Boot发送Email" class="headerlink" title="Spring Boot发送Email"></a>Spring Boot发送Email</h2><h3 id="Email介绍"><a href="#Email介绍" class="headerlink" title="Email介绍"></a>Email介绍</h3><p>邮件发送与接收的过程如下:</p><p>(1) 发件人使用SMTP协议传输邮件到邮件服务器A</p><p>(2) 邮件服务器A根据邮件中指定的接收者投送邮件至相应的邮件服务器B</p><p>(3) 收件人使用POP3协议从邮件服务器B接收邮件</p><p>SMTP 协议全称为 Simple Mail Transfer Protocol，译作简单邮件传输协议，它定义了邮件客户端软件与 SMTP 服务器之间，以及 SMTP 服务器与 SMTP 服务器之间的通信规则。</p><p>也就是说 aaa@qq.com 用户先将邮件投递到腾讯的 SMTP 服务器这个过程就使用了 SMTP 协议，然后腾讯的 SMTP 服务器将邮件投递到网易的 SMTP 服务器这个过程也依然使用了 SMTP 协议，SMTP 服务器就是用来收邮件。</p><p>而 POP3 协议全称为 Post Office Protocol ，译作邮局协议，它定义了邮件客户端与 POP3 服务器之间的通信规则，那么该协议在什么场景下会用到呢？当邮件到达网易的 SMTP 服务器之后， 111@163.com 用户需要登录服务器查看邮件，这个时候就该协议就用上了：邮件服务商都会为每一个用户提供专门的邮件存储空间，SMTP 服务器收到邮件之后，就将邮件保存到相应用户的邮件存储空间中，如果用户要读取邮件，就需要通过邮件服务商的 POP3 邮件服务器来完成。</p><h3 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加Email配置"><a href="#添加Email配置" class="headerlink" title="添加Email配置"></a>添加Email配置</h3><p>我们需要在application.yaml文件中添加如下配置信息:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Mail邮件配置</span></span><br><span class="line">  <span class="comment">### 邮箱主机</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment">### 发送者邮箱</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">1234</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="comment">### 设置的授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234555</span></span><br><span class="line">    <span class="comment">### 默认编码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># 配置SSL 加密工厂</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">socketFactoryClass:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">        <span class="comment">#表示开启 DEBUG 模式，这样，邮件发送过程的日志会在控制台打印出来，方便排查错误</span></span><br><span class="line">        <span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">### 端口号465或587</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">587</span></span><br></pre></td></tr></table></figure><p><strong>126邮箱SMTP服务器地址:smtp.126.com,端口号:465或者994</strong><br><strong>2163邮箱SMTP服务器地址:smtp.163.com,端口号:465或者994</strong><br><strong>yeah邮箱SMTP服务器地址:smtp.yeah.net,端口号:465或者994</strong><br><strong>qq邮箱SMTP服务器地址：smtp.qq.com,端口号465或587*</strong></p><h3 id="在定时器中发送邮件"><a href="#在定时器中发送邮件" class="headerlink" title="在定时器中发送邮件"></a>在定时器中发送邮件</h3><p>​    在Spring Boot中添加完依赖和配置之后，我们在项目的目录/src/main/java/com.lpy.mail下新建邮件服务接口类SendJunkMailService，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SendJunkMailService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sendJunkMail</span><span class="params">(List&lt;AyUser&gt; ayUserList)</span> <span class="keyword">throws</span> MessagingException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后继续在项目的目录/src/main/java/com.lpy.mail下新建接口类的的实现类SendJunkMailServiceImpl.java，具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendJunkMailServiceImpl</span> <span class="keyword">implements</span> <span class="title">SendJunkMailService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JavaMailSender mailSender;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyUserService ayUserService;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.mail.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(SendJunkMailServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendJunkMail</span><span class="params">(List&lt;AyUser&gt; ayUserList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(ayUserList == <span class="keyword">null</span> || ayUserList.size()&lt;=<span class="number">0</span>) <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">        <span class="keyword">for</span> (AyUser ayUser:ayUserList) &#123;</span><br><span class="line">            MimeMessage mimeMessage = <span class="keyword">this</span>.mailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper message = <span class="keyword">new</span> MimeMessageHelper(mimeMessage);</span><br><span class="line">            <span class="comment">//邮件发送方</span></span><br><span class="line">            message.setFrom(from);</span><br><span class="line">            message.setSubject(<span class="string">"哈哈，这是一个测试"</span>);</span><br><span class="line">            <span class="comment">//邮件接收方</span></span><br><span class="line">            message.setTo(<span class="string">"test@163.com"</span>);</span><br><span class="line">            message.setText(ayUser.getName()+<span class="string">",这是Mail测试"</span>);</span><br><span class="line">            <span class="keyword">this</span>.mailSender.send(mimeMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            logger.error(<span class="string">"sendJunkMail error and ayUser=%s"</span>,ayUserList,ex);</span><br><span class="line">            <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Value：可以将application.yaml配置文件中的配置设置到属性中。</li><li>JavaMailSender： 邮件发送接口。在Spring Boot 的Starter模块已为此提供了自动化配置，我们只需要通过注解@Autowired注入进来即可使用。</li></ul><p>现在我们重新修改SendMailQuartz定时器类，让定时器类能够每隔一段时间给数据库的用户发送广告邮件，SendMailQuartz类具体的修改如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailQuartz</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志对象</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger(SendMailQuartz<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SendJunkMailService sendJunkMailService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyUserService ayUserService;</span><br><span class="line">    <span class="comment">//每5秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"*/5 * *  * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentByCron</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        List&lt;AyUser&gt; userList = ayUserService.findAll();</span><br><span class="line">        <span class="keyword">if</span>(userList == <span class="keyword">null</span> || userList.size() &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//发送邮件</span></span><br><span class="line">        sendJunkMailService.sendJunkMail(userList);</span><br><span class="line">        logger.info(<span class="string">"定时器运行了！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>代码全部开发完成之后，重新启动项目，发送邮件定时器类SendMailQuartz，每隔5秒会查询数据库表ay_test中的所有用户，并发送广告邮件给对应的用户。我们登录对应接收用户邮箱发现如下信息:</p><p><img src="/2022/01/19/Quartz%E5%AE%9A%E6%97%B6%E5%99%A8%E5%92%8C%E5%8F%91%E9%80%81Email/image-20220119192604464.png" alt="image-20220119192604464"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Quartz定时器和发送Email&quot;&gt;&lt;a href=&quot;#Quartz定时器和发送Email&quot; class=&quot;headerlink&quot; title=&quot;Quartz定时器和发送Email&quot;&gt;&lt;/a&gt;Quartz定时器和发送Email&lt;/h1&gt;&lt;h2 id=&quot;使用Qua
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://tropical-forest.github.io/categories/SpringBoot/"/>
    
    
      <category term="Quartz定时器" scheme="https://tropical-forest.github.io/tags/Quartz%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
      <category term="定时发送邮件" scheme="https://tropical-forest.github.io/tags/%E5%AE%9A%E6%97%B6%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
</feed>
