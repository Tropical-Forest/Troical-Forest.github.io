<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS样式属性</title>
    <url>/2020/06/05/CSS%E6%A0%B7%E5%BC%8F%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h4 id="字体样式font-style属性"><a href="#字体样式font-style属性" class="headerlink" title="字体样式font-style属性"></a>字体样式font-style属性</h4><p>1.基本语法<br><code>font-style: normal | italic | oblique</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>表示不使用斜体，是font-style属性的默认值</td>
</tr>
<tr>
<td>italic</td>
<td>表示使用斜体显示文字</td>
</tr>
<tr>
<td>oblique</td>
<td>表示使用倾斜字体显示</td>
</tr>
</tbody>
</table>
</div>
<h4 id="字体粗细font-weight属性"><a href="#字体粗细font-weight属性" class="headerlink" title="字体粗细font-weight属性"></a>字体粗细font-weight属性</h4><p>1.基本语法<br><code>font-weight：normal | bold | lighter</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>normal</td>
<td>表示正常的字体,是font-weight属性的默认值</td>
</tr>
<tr>
<td>bold</td>
<td>表示标准的粗体</td>
</tr>
<tr>
<td>bolder</td>
<td>表示特粗体</td>
</tr>
<tr>
<td>lighter</td>
<td>表示细体</td>
</tr>
</tbody>
</table>
</div>
<h4 id="字符装饰text-decoration属性"><a href="#字符装饰text-decoration属性" class="headerlink" title="字符装饰text-decoration属性"></a>字符装饰text-decoration属性</h4><p>1.基本语法<br><code>text-decoration : none | underline | overline | line-through</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>表示文字无修饰</td>
</tr>
<tr>
<td>underline</td>
<td>表示文字加下划线</td>
</tr>
<tr>
<td>line-through</td>
<td>表示文字加删除线</td>
</tr>
<tr>
<td>overline</td>
<td>表示文字加上画线</td>
</tr>
</tbody>
</table>
</div>
<h4 id="水平对齐text-align属性"><a href="#水平对齐text-align属性" class="headerlink" title="水平对齐text-align属性"></a>水平对齐text-align属性</h4><p>1.基本语法<br><code>text-align: left | right | center | justify</code></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>表示左对齐</td>
</tr>
<tr>
<td>right</td>
<td>表示右对齐</td>
</tr>
<tr>
<td>center</td>
<td>表示居中</td>
</tr>
<tr>
<td>justify</td>
<td>表示两端对齐</td>
</tr>
</tbody>
</table>
</div>
<h4 id="CSS盒模型"><a href="#CSS盒模型" class="headerlink" title="CSS盒模型"></a>CSS盒模型</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在网页设计中，每个元素都是长方形的盒子，便产生了特定的盒子模型。在盒子模型中，重要的概念有边界(Margin)、边框(Border)、填充(Padding)、内容(Content)，简称为MBPC模型。边界又称为外边界，是盒子边框与页面边界或其他盒子之间的距离。填充又称为内边界，即内容与边框之间的距离。</p>
<h5 id="边界属性设置"><a href="#边界属性设置" class="headerlink" title="边界属性设置"></a>边界属性设置</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;边界属性是margin,也称为外边距,表示盒子边框与页面边界或其他盒子之间的距离，属性值为长度值、百分数或auto,属性设置的效果是围绕元素边框的“ 空白 ”。<br>1.基本语法<br><code>margin-(top|right|bottom|left):长度单位|百分比单位|auto</code><br>auto: 表示采用默认值,浏览器计算边距。</p>
<h5 id="边框属性设置"><a href="#边框属性设置" class="headerlink" title="边框属性设置"></a>边框属性设置</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;常见的border-style有dashed(定义虚线)、solid(定义实线);边框border复合属性可以一次设置边框的粗细、样式和颜色，其语法为:<code>border: border-width border-style border-color</code>,例如<code>border: 2px solid red</code>。</p>
<h5 id="填充属性设置"><a href="#填充属性设置" class="headerlink" title="填充属性设置"></a>填充属性设置</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;填充属性是padding，也称为内边界，表示元素内容与边框之间的距离，属性值为长度值、百分数，属性设置的效果是包含在元素边框里面并围绕着元素内容的“元素背景”，也称为内空白，其基本语法为<code>padding:长度|百分比</code></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>CSS盒子模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack的安装</title>
    <url>/2020/09/05/Webpack%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Webpack介绍"><a href="#Webpack介绍" class="headerlink" title="Webpack介绍"></a>Webpack介绍</h2><p>Webpack是一个开源的前端开发工具。当Webpack处理应用程序时，它会构建一个依赖关系图，其中包含应用程序所需要的各个模块，然后将所有这些模块打包成一个或多个模组。Webpack可以通过终端或更改Webpack.config.js文件来设定各项功能</p>
<h2 id="Webpack安装"><a href="#Webpack安装" class="headerlink" title="Webpack安装"></a>Webpack安装</h2><p>前提： 已经装好了node.js、npm可以使用<br>在本地安装:<br><code>npm install --save-dev webpack</code> 安装最新版本Webpack<br><code>npm install --save-dev webpack@&lt;version&gt;</code> 安装指定版本Webpack<br>最后把<code>node_modules\.bin</code>路径加到path路径下<br>在cmd上输入<code>webpack -v</code>若有显示版本号则安装成功</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7有关防火墙和端口的常用命令</title>
    <url>/2020/05/23/CentOS%E6%9C%89%E5%85%B3%E9%98%B2%E7%81%AB%E5%A2%99%E5%92%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="关于CentOS系统"><a href="#关于CentOS系统" class="headerlink" title="关于CentOS系统"></a>关于CentOS系统</h2><p>&nbsp;&nbsp;CentOS（Community Enterprise Operating System，中文意思是社区企业操作系统）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS完全开源。(来自百度百科)</p>
<hr>
<h2 id="关于防火墙"><a href="#关于防火墙" class="headerlink" title="关于防火墙"></a>关于防火墙</h2><p>&nbsp;&nbsp;防火墙技术是通过有机结合各类用于安全管理与筛选的软件和硬件设备，帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障，以保护用户资料与信息安全性的一种技术。防火墙技术的功能主要在于及时发现并处理计算机网络运行时可能存在的安全风险、数据传输等问题，其中处理措施包括隔离与保护，同时可对计算机网络安全当中的各项操作实施记录与检测，以确保计算机网络运行的安全性，保障用户资料与信息的完整性，为用户提供更好、更安全的计算机网络使用体验。(来自百度百科)</p>
<hr>
<h2 id="关于端口"><a href="#关于端口" class="headerlink" title="关于端口"></a>关于端口</h2><p>&nbsp;&nbsp;”端口”是英文port的意译，可以认为是设备与外界通讯交流的出口。端口可分为虚拟端口和物理端口，其中虚拟端口指计算机内部或交换机路由器内的端口，不可见。例如计算机中的80端口、21端口、23端口等。物理端口又称为接口，是可见端口，计算机背板的RJ45网口，交换机路由器集线器等RJ45端口。电话使用RJ11插口也属于物理端口的范畴。(来自百度百科)</p>
<hr>
<h2 id="CentOS7有关防火墙和端口的常用命令"><a href="#CentOS7有关防火墙和端口的常用命令" class="headerlink" title="CentOS7有关防火墙和端口的常用命令"></a>CentOS7有关防火墙和端口的常用命令</h2><p>&nbsp;&nbsp;我们一般都会在服务器上搭建服务，搭建服务需要开放端口，没有端口是无法与外网联系的，也就是搭建的服务无法成功。如果搭建服务时用到端口的话，我们应该要检查端口是否开放，没有开放的话则需要去开放的端口。这是你就会用到下面的命令。下面的命令是适用于CentOS7，其他版本不知是否适用。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>systemctl start firewalld.service</code></td>
<td>启动防火墙</td>
</tr>
<tr>
<td><code>systemctl stop firewalld.service</code></td>
<td>停止/关闭防火墙</td>
</tr>
<tr>
<td><code>systemctl restart firewalld.service</code></td>
<td>重启防火墙</td>
</tr>
<tr>
<td><code>firewalld-cmd --zone=public --add-port=[端口]/tcp --permanent</code></td>
<td>新增开放一个端口</td>
</tr>
<tr>
<td><code>firewall-cmd --zone=public --add-port=[端口]-[端口]/tcp --permanent</code></td>
<td>新增开放多个端口</td>
</tr>
<tr>
<td><code>firewall-cmd --list-all</code></td>
<td>查看防火墙信息</td>
</tr>
<tr>
<td><code>firewall-cmd --list-ports</code></td>
<td>查看防火墙开放端口信息</td>
</tr>
<tr>
<td><code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code></td>
<td>删除一个开放的端口</td>
</tr>
<tr>
<td><code>systemctl enable firewalld.service</code></td>
<td>开机启用防火墙</td>
</tr>
<tr>
<td><code>systemctl disable firewalld.service</code></td>
<td>开机不启用防火墙</td>
</tr>
<tr>
<td><code>systemctl unmask firewalld</code></td>
<td>执行命令，即可实现取消服务的锁定</td>
</tr>
<tr>
<td><code>systemctl mask firewalld</code></td>
<td>下次需要锁定该服务时执行</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>防火墙和端口</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode中的c/c++调试问题</title>
    <url>/2020/06/22/vscode%E8%B0%83%E8%AF%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>环境搭建过程，可以参考微软提供的教程：</p>
<h2 id="https-code-visualstudio-com-docs-languages-cpp"><a href="#https-code-visualstudio-com-docs-languages-cpp" class="headerlink" title="https://code.visualstudio.com/docs/languages/cpp"></a><a href="https://code.visualstudio.com/docs/languages/cpp" target="_blank" rel="noopener">https://code.visualstudio.com/docs/languages/cpp</a></h2><p>我们把所有环境搭建好，c/c++文件也能运行，但就是调试时在断点处无法停下来，这时候可能是window安全问题，可能是安全软件如360把mangw安装包下的gdb.exe拦截以至于无法调试，这时候就需要去把它添加到信任区，再次调试可能就会成功了。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>git的简单使用</title>
    <url>/2020/05/21/git%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p> &nbsp;&nbsp;&nbsp;&nbsp;在这里，主要写有关用git去上传项目到GitHub或者克隆GitHub文件到本地等简单操作命令。我们要打开cmd(或者 git bash here)，进入项目路径。然后再执行下面操作。 </p>
<hr>
<ol>
<li><code>git config --global  user.name &#39;你的GitHub账号&#39;</code>&nbsp;&nbsp;<em>设置你的账号名</em> </li>
<li><code>git config --global user.email &#39;你的GitHub绑定的邮箱&#39;</code>&nbsp;&nbsp;<em>设置你的邮箱</em></li>
<li><code>git config --global user.password &#39;你的GitHub账号密码&#39;</code>&nbsp;&nbsp;<em>设置你的密码</em></li>
<li><code>git config -l</code> &nbsp;&nbsp; <em>查看git配置信息，看看账号名和密码、邮箱是否正确。</em></li>
<li><code>git init</code>&nbsp;&nbsp; <em>项目初始化</em></li>
<li><code>git remote add origin  [关联项目仓库连接地址]</code> &nbsp;&nbsp; <em>本地项目与要上传到GitHub仓库进行关联。</em></li>
<li><code>git status</code>&nbsp;&nbsp;<em>查看本地发生了哪些变化</em></li>
<li><code>git add *</code>  </li>
<li><code>git commit  -m &#39;提交的注释&#39;</code>&nbsp;&nbsp;<em>上面两条命令是本地文件修改生效</em></li>
<li><code>git push -u origin master</code>&nbsp;&nbsp;<em>推送项目到GitHub主支上</em></li>
<li><code>git clone [url]</code>&nbsp;&nbsp;<em>url为克隆地址，克隆GitHub上的项目到本地上</em></li>
<li><code>git branch -d [分支名]</code>&nbsp;&nbsp;<em>删除分支</em></li>
<li><code>git branch [分支名]</code>&nbsp;&nbsp;<em>新建分支</em></li>
<li><code>git branch</code>&nbsp;&nbsp;<em>查看所有分支</em></li>
<li><code>git branch -a</code>&nbsp;&nbsp;<em>查看当前所在分支</em></li>
<li><code>git checkout [分支名]</code>&nbsp;&nbsp;<em>切换分支</em></li>
</ol>
<hr>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>git上传本地文件</tag>
        <tag>branch的查看、创建、删除</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的中序遍历</title>
    <url>/2020/09/14/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>题目描述:<br><img src="/2020/09/14/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/二叉树的中序遍历.JPG" alt="题目描述"></p>
<h3 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h3><p> 常见的二叉树的遍历方法是先序遍历、中序遍历和后序遍历。</p>
<p> 先序：考察到一个节点后，即刻输出该节点的值，并继续遍历其左右子树。(根左右)</p>
<p>中序：考察到一个节点后，将其暂存，遍历完左子树后，再输出该节点的值，然后遍历右子树。(左根右)</p>
<p>后序：考察到一个节点后，将其暂存，遍历完左右子树后，再输出该节点的值。(左右根)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        inorder(root, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode root, List&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inorder(root.left, res);</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        inorder(root.right, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度:O(n),因为二叉树的结点时n个，且每一个结点会被访问一次仅只有一次。<br>空间复杂度:O(n),空间复杂度取决于递归的栈深度，而栈深度在二叉树为一条链的情况下会达到 O(n)O(n) 的级别。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>中序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>一次很愉快的跑步</title>
    <url>/2020/10/10/%E4%B8%80%E6%AC%A1%E5%BE%88%E6%84%89%E5%BF%AB%E7%9A%84%E8%B7%91%E6%AD%A5/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;今天晚上跑步很愉快、很顺利、很幸运。今天给自己的目标是15km.原以为会跟这周三一样跑5公里就会放弃。刚跑3公里左右右脚确实有点痛，但坚持跑了几圈后脚就不痛了。这是在北区跑，佩戴新买的肩包，我跑起来感觉不累，感觉很轻松。不知道是为什么今天跑步感觉很轻松。分析一下原因:</p>
<ul>
<li><p>1.现在是秋季，温度不热不冷，很适合跑步</p>
</li>
<li><p>2.跑步时间是在晚上，晚上跑步较为轻松一些，不想黄昏是那么炎热，黄昏是跑步比晚上跑步容易流汗容易累</p>
</li>
<li><p>3.上次跑步只跑5公里，对体力没有大的消耗，体力保存较多，这是跑步可以说是占了上次的便宜</p>
</li>
<li><p>4.跑步地点。这次在北区跑，北区跑步的人较多，比南区有较为浓厚的氛围。而且女生多，跑步起来当然要认真跑啊，跑慢对形象多不好啊，认真跑起来万一能脱单呢。</p>
</li>
<li><p>5.感觉北区的跑道比南区的跑道弹性更好，当然这是个人感觉啦</p>
</li>
</ul>
<p>以上是跑步轻松的原因。除了轻松以外。这是跑步也遇到几个同班同学，这对我以前跑步从来没遇到而今天突然遇到感到莫名的惊喜。虽然跑步向来是孤独者的运动，但能在跑步路上遇到熟人，当然也是一件很惊喜的事情。最后我跑完后在跑道漫步两圈时，在最后要回去的时候，突然响起李宗盛的沧桑的嗓音，这对于我来说实在是一件很惊喜的事。</p>
<p>还有这是跑步我突然想到了爱，我想到爱不是自私的爱，而是一种博爱，爱世上的一些，爱并不应该是自私的，爱是博大的，爱是无处不在，我爱花草、我爱聪慧的她、我爱天上的星星、我也爱我的对手、我爱我所看到一些、也爱我未曾看到的一些。</p>
<p>最后，对于这次跑步我是很满足、很高兴的，希望下次能继续保持愉快的跑步。</p>
]]></content>
      <categories>
        <category>生活日志</category>
      </categories>
  </entry>
  <entry>
    <title>合并排序</title>
    <url>/2020/10/04/%E5%90%88%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>合并排序算法是用分治策略实现对n个元素进行排序的算法。其基本思想是:将待排序元素分成大小大致相同的2个字集合，分别对2个子集合进行排序，最终将排好序的子集合合并成为所要求的排好序的集合。<br>算法描述代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> high) &#123;</span><br><span class="line">		<span class="keyword">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(low&lt;high) &#123;</span><br><span class="line">			sort(a,low,mid);</span><br><span class="line">			sort(a,mid+<span class="number">1</span>,high);</span><br><span class="line">			merge(a,low,mid,high);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> low,<span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high-low+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> i = low;</span><br><span class="line">		<span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">// 把较小的数先移到新数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&lt;a[j])&#123;</span><br><span class="line">                temp[k++] = a[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[k++] = a[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把左边剩余的数移入数组 </span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;=mid)&#123;</span><br><span class="line">            temp[k++] = a[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></span><br><span class="line">        <span class="keyword">while</span>(j&lt;=high)&#123;</span><br><span class="line">            temp[k++] = a[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;temp.length;x++)&#123;</span><br><span class="line">            a[x+low] = temp[x];</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度分析:<br>T(n)={O(1) n&lt;=1 ;2T(n/2)+O(n)  n&gt;1}<br>解此递归方程可以T(n)=O(nlogn).由于排序问题的计算时间下界为Ω(nlogn)，故合并排序算法是渐近最优算法。</p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>弃用鼠标，高效工作</title>
    <url>/2020/10/17/%E5%BC%83%E7%94%A8%E9%BC%A0%E6%A0%87%EF%BC%8C%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C/</url>
    <content><![CDATA[<p>作为一名程序员，尽量使用键盘和少用鼠标是提高工作效率的一种有用的方式，因为程序员使用电脑很多都是敲代码，双手始终放在键盘上，可以提高代码编写的速度，如果常用鼠标，就会有了鼠标和键盘来回切换的时间，这样子会降低工作效率，为了高效工作，尽量不用鼠标和多用键盘。</p>
<p>为了少用鼠标的话，就需要掌握一些常用的快捷键，掌握常用的快捷键就可以放弃鼠标了<br>以下快捷键适用于win10,其他系统可能不适用。<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">(一)Win键</span><br><span class="line">win + e；打开资源管理器</span><br><span class="line">win + d；显示桌面，再按一次恢复窗口</span><br><span class="line">win + r<span class="comment">; 运行对话框，这个运行如果用的话，基本上就可以告别鼠标:</span></span><br><span class="line"><span class="number">1</span>. 在运行对话框内输入cmd,进入命令行模式</span><br><span class="line"><span class="number">2</span>. 在运行对话框中输入control,进入控制面板</span><br><span class="line"><span class="number">3</span>. 在运行对话框中输入appwiz.cpl，进入程序与功能</span><br><span class="line"><span class="number">4</span>. 在运行对话框中输入msconfig，进入系统配置</span><br><span class="line"><span class="number">5</span>. 在运行对话框中输入Chrome，打开谷歌浏览器，前提是你安装了chrome.同理这个可以用来快捷的打开一些应用程序。如果是经常使用的应用程序可以将它固定到任务栏或者开始屏幕。或者设置快捷键来访问</span><br><span class="line"><span class="number">6</span>. 在对话框内输入<span class="keyword">shutdown </span>-s -t <span class="number">0</span><span class="comment">;立刻关机，后面的0代表0秒后关机。可以修改为600，就是十分钟后关机</span></span><br><span class="line">win + x<span class="comment">;这个可以打开很多相关设置</span></span><br><span class="line"><span class="number">7</span>.在运行对话框中输入<span class="keyword">shutdown </span>-a 取消定时关机</span><br><span class="line">win + space；切换输入法；<span class="keyword">shift可以快速切换中英文</span></span><br><span class="line"><span class="keyword">win </span>+ l<span class="comment">; 锁定屏幕</span></span><br><span class="line">win + s<span class="comment">;搜索（推荐使用，这个可以完成很多软件的打开)</span></span><br><span class="line">win + tab<span class="comment">; 切换桌面</span></span><br><span class="line">alt + tab<span class="comment">; 切换同桌面的不同程序</span></span><br><span class="line">win + ctrl + d<span class="comment">;创建新桌面</span></span><br><span class="line">win + 向上方向键；窗口最大化</span><br><span class="line">win + 向左 + 向右<span class="comment">;左上角四份之一窗口</span></span><br><span class="line">（二）ctrl键和Alt键，Ctrl和Alt键大多数会配合应用程序使用</span><br><span class="line">ctrl + <span class="keyword">shift </span>+ esc<span class="comment">; 呼出任务管理器</span></span><br><span class="line">chrome适用的快捷键</span><br><span class="line">ctrl + w<span class="comment">; 关闭标签</span></span><br><span class="line">ctrl + t<span class="comment">;新建标签</span></span><br><span class="line">ctrl + <span class="keyword">shift </span>+ t<span class="comment">;恢复刚关闭的标签</span></span><br><span class="line">ctrl + h<span class="comment">;历史记录</span></span><br><span class="line">ctrl + <span class="keyword">j;下载列表</span></span><br><span class="line"><span class="keyword">ctrl </span>+ f<span class="comment">;在页面内查找</span></span><br><span class="line">ctrl + n<span class="comment">;新窗口</span></span><br><span class="line">ctrl + tab<span class="comment">;切换到下一个标签</span></span><br><span class="line">ctrl + <span class="keyword">shift </span>+ tab<span class="comment">;切换到上一个标签</span></span><br><span class="line">ctrl + r<span class="comment">;重新加载当前页</span></span><br><span class="line">ctrl + d<span class="comment">;加入书签</span></span><br><span class="line">alt + d<span class="comment">;输入定位到地址栏</span></span><br><span class="line">alt + spance<span class="comment">;呼出窗口控制的菜单</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>数字三角形问题</title>
    <url>/2020/11/19/%E6%95%B0%E5%AD%97%E4%B8%89%E8%A7%92%E5%BD%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题描述：</span><br><span class="line">给定一个由n行数字组成的数字三角形如下图所示。试设计一个算法，计算出从三角形</span><br><span class="line">的顶至底的一条路径，使该路径经过的数字总和最大。</span><br><span class="line">    7</span><br><span class="line">   3 8</span><br><span class="line">  8 1 0</span><br><span class="line"> 2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line">编程任务：</span><br><span class="line">对于给定的由n行数字组成的数字三角形，编程计算从三角形的顶至底的路径经过的数字和的最大值。</span><br><span class="line">数据输入：</span><br><span class="line">由文件input.txt 提供输入数据。文件的第1 行是数字三角形的行数n，1£n£100。接下来n行是数字三角形各行中的数字。所有数字在0..99之间。输入数据由文件名为 input.txt 的文本文件提供。</span><br><span class="line">结果输出:</span><br><span class="line">程序运行结束时，将计算结果输出到文件output.txt 中。文件的第1 行中的数是计算</span><br><span class="line">出的最大值。</span><br><span class="line">输入文件示例   输出文件示例</span><br><span class="line">7               30</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure>
<h2 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h2><p>数字三角形中每个数字我们可以用一个二维坐标来表示，例如第1行第1列表示为triangle(1,1)。分析题目可知，经过某个坐标的最大数字和跟该坐标的上面的数字最大数字和有关，所以关于这个问题我们可以用动态规划来解决。先把一个复杂的问题化为n个有关联的子问题。在这里，我们从顶点到底部，依次就算每个坐标的最大数字和。因为后面的坐标会用到前面的坐标数字和，所以我们每计算一个坐标数字和时，都需要把该数字和保存的一个表上，都时候需要用到前面的坐标数字和时，就不需要再计算，直接引用即可，算法效率就会大大提高。设a(i,j)表示坐标triangle(i,j)的数字，d(triangle(i,j))表示经过坐标triangle(i,j)的最大数字和，在这个问题中，我们可以分析一个坐标triangle(i,j) 的位置置换方程为d(triangle(i,j))= max{d(triangle(i-1,j-1),d(triangle(i-1,j))}+a(i,j);</p>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求从顶点到底层的最长路径，也即是数字和最大</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLongestPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; triangle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">line</span> = triangle.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> longestPath=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; table;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">line</span>&lt;<span class="number">1</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="built_in">line</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>) &#123; temp = triangle[i<span class="number">-1</span>][j<span class="number">-1</span>]; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">1</span>) &#123; temp = table[i<span class="number">-1</span><span class="number">-1</span>][j<span class="number">-1</span>] + triangle[i<span class="number">-1</span>][j<span class="number">-1</span>]; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==i) &#123; temp = table[i<span class="number">-1</span><span class="number">-1</span>][j<span class="number">-1</span><span class="number">-1</span>] + triangle[i<span class="number">-1</span>][j<span class="number">-1</span>];&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; temp = <span class="built_in">max</span>(table[i<span class="number">-1</span><span class="number">-1</span>][j<span class="number">-1</span><span class="number">-1</span>],table[i<span class="number">-1</span><span class="number">-1</span>][j<span class="number">-1</span>]) + triangle[i<span class="number">-1</span>][j<span class="number">-1</span>]; &#125;</span><br><span class="line">            data.push_back(temp);</span><br><span class="line">            <span class="keyword">if</span>(temp &gt;longestPath) &#123; longestPath = temp; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        table.push_back(data);</span><br><span class="line">        data.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> longestPath;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//标准输入输出重定向到文件中</span></span><br><span class="line">    freopen(<span class="string">"data.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"data.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; triangle;  <span class="comment">//用来保存数字三角形数据的二维数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; data;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">line</span>;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; <span class="built_in">line</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">line</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            data.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        triangle.push_back(data);</span><br><span class="line">        data.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; getLongestPath(triangle);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>由算法很容易知道时间复杂度为n^2</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>动态规划就是把一个较为复杂的问题分为多个子问题，而且这些子问题是有关联的，一个子问题的计算结果可能会用到其他子问题的计算结果。所以为避免多次运算，我们可以把已经计算过的子问题的结果保存到一个表中，当要用到已经计算的子问题的结果时，直接引用表中的数据即可，这样子效率就得到大大的提高。</p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>排列问题</title>
    <url>/2020/10/03/%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>问题描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题描述：对n个元素进行全排列，列出所有情况，例如1，2，3三个数字会得到1 2 3，1 3 2，2 1 3，2 3 1，3 1 2，3 2 1这6中情况</span><br><span class="line"></span><br><span class="line">思路：设n为元素个数，元素集合为R(r1,r2,r3....rn)，计算方法为Perm(n)</span><br><span class="line"></span><br><span class="line">当n &#x3D; 1时，则只有一种情况  r；</span><br><span class="line"></span><br><span class="line">当n &gt; 1时，则有(r1)Perm(R1),(r2)Perm(R2),(r3)Perm(R3) ... ... (rn)Perm(Rn)</span><br><span class="line"></span><br><span class="line">                  以1，2，3为例全排列，共有以下排列：</span><br><span class="line"></span><br><span class="line">                 1 Perm(2,3)  即：以1为前缀的所有组合</span><br><span class="line"></span><br><span class="line">                 2 Perm(1,3)  即：以2为前缀的所有组合</span><br><span class="line"></span><br><span class="line">                 3 Perm(2,3)  即：以3为前缀的所有组合</span><br><span class="line"></span><br><span class="line">注：Perm(k,m)利用递归的思想即可不断划分前缀，直到只剩下1个元素，则只有一种情况，即为找到了一种排列。</span><br></pre></td></tr></table></figure>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Perm</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object []list,<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		Object temp;</span><br><span class="line">		temp = list[a];</span><br><span class="line">		list[a] = list[b];</span><br><span class="line">		list[b] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">perm</span><span class="params">(Object []list, <span class="keyword">int</span> k, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(k==m) &#123;	</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++) &#123;</span><br><span class="line">				System.out.print(list[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println();</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=m;i++) &#123;	</span><br><span class="line">				swap(list,k,i);</span><br><span class="line">				perm(list,k+<span class="number">1</span>,m);</span><br><span class="line">				swap(list,k,i);</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Object[] list = <span class="keyword">new</span> Object[<span class="number">6</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++) &#123;</span><br><span class="line">			list[i] = i+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		perm(list,<span class="number">0</span>,list.length-<span class="number">1</span>);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>算法解析</strong><br>算法perm(list,k,m)递归地产生所以前缀list[0:k-1],且后缀时list[k:m]的全排列的所有排列。swap算法用于交换两个表元素的值。因为每次递归都会使用一个辅助空间，所以空间复杂性为O(n)。因为递归了n次，所以时间复杂性为O(n)。</p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>棋牌覆盖</title>
    <url>/2020/10/04/%E6%A3%8B%E7%89%8C%E8%A6%86%E7%9B%96/</url>
    <content><![CDATA[<p>转载<a href="https://www.xiaowuyike.com/archives/383.html" target="_blank" rel="noopener">棋牌覆盖问题（java实现)</a></p>
<p>棋牌覆盖问题（java实现）</p>
<p>一、问题描述与分析</p>
<p>问题：在一个<br>2<sup>k</sup> * 2<sup>k</sup><br>方格组成的棋盘中，有一个方格与其它的不同，用如下图的4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。<br><img src="/2020/10/04/%E6%A3%8B%E7%89%8C%E8%A6%86%E7%9B%96/gupd.md.png" alt="骨牌"></p>
<p>分析：用分治法划分棋盘，使划分后的子棋盘的大小相同，并且每个子棋盘均包含一个特殊方格，从而将原问题分解为规模较小的棋盘覆盖问题。k&gt;0时，可将</p>
<p>2<sup>k</sup> * 2<sup>k</sup><br>的棋盘划分为4个</p>
<p>2<sup>k</sup>-1 * 2<sup>k</sup>-1<br>的子棋盘。<br><img src="/2020/10/04/%E6%A3%8B%E7%89%8C%E8%A6%86%E7%9B%96/qipj.md.png" alt="骨牌"></p>
<p>这样划分后，由于原棋盘只有一个特殊方格，所以，这4个子棋盘中只有一个子棋盘包含该特殊方格，其余3个子棋盘中没有特殊方格。为了将这3个没有特殊方格的子棋盘转化为特殊棋盘，以便采用递归方法求解，可以用一个L型骨牌覆盖这3个较小棋盘的会合处（如图2），从而将原问题转化为4个较小规模的棋盘覆盖问题。<br><img src="/2020/10/04/%E6%A3%8B%E7%89%8C%E8%A6%86%E7%9B%96/erqipj.md.png" alt="子骨牌"><br>递归地使用这种划分策略，直至将棋盘分割为1×1的子棋盘。<br>二、程序实现<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessBord</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] matrix;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"棋盘大小："</span>);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()) &#123;</span><br><span class="line">            <span class="keyword">int</span> n = in.nextInt();<span class="comment">//棋盘大小</span></span><br><span class="line">            System.out.println(<span class="string">"特殊方格位置："</span>);</span><br><span class="line">            <span class="keyword">int</span> dr = in.nextInt();<span class="comment">//特殊方格的行号</span></span><br><span class="line">            <span class="keyword">int</span> dc = in.nextInt();<span class="comment">//特殊方格的列号</span></span><br><span class="line">            matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];<span class="comment">//n*n的棋盘大小</span></span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            chessBoard(<span class="number">0</span>, <span class="number">0</span>, dr, dc, n);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>[] ii : matrix) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> jj : ii) &#123;</span><br><span class="line">                    System.out.printf(<span class="string">"%8d"</span>, jj);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * n：表示输入矩阵是n*n的方阵</span></span><br><span class="line"><span class="comment">     * tr：棋盘左上角方格的行号；tc：棋盘左上角方格的列号</span></span><br><span class="line"><span class="comment">     * dr：特殊方格的行号；dc：特殊方格的列号</span></span><br><span class="line"><span class="comment">     * size：棋盘的大小是size×size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">chessBoard</span><span class="params">(<span class="keyword">int</span> tr, <span class="keyword">int</span> tc, <span class="keyword">int</span> dr, <span class="keyword">int</span> dc, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果当前棋盘的尺寸是1,也就是说只有一个方格的时候,返回函数</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> curPattern = ++count;</span><br><span class="line">        <span class="comment">//把棋盘从中间平均分为4个部分,</span></span><br><span class="line">        size = size / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//下面方法分别检索分隔出来的4个部分</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//左上部分</span></span><br><span class="line">        <span class="keyword">if</span> (dr &lt; tr + size &amp;&amp; dc &lt; tc + size) &#123;</span><br><span class="line">            <span class="comment">//如果左上部分包含特殊棋盘，那么就直接递归找左上部分,继续把左上部分分隔</span></span><br><span class="line">            chessBoard(tr, tc, dr, dr, size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果左上部分不包含特殊棋盘，那么先把左上部分的右下角自定义一个特殊棋盘，然后在递归</span></span><br><span class="line">            matrix[tr + size - <span class="number">1</span>][tc + size - <span class="number">1</span>] = curPattern;</span><br><span class="line">            chessBoard(tr, tc, tr + size - <span class="number">1</span>, tc + size - <span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右上部分</span></span><br><span class="line">        <span class="keyword">if</span> (dr &lt; tr + size &amp;&amp; dc &gt;= tc + size) &#123;</span><br><span class="line">            chessBoard(tr, tc + size, dr, dc, size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matrix[tr + size - <span class="number">1</span>][tc + size] = curPattern;</span><br><span class="line">            chessBoard(tr, tc + size, tr + size - <span class="number">1</span>, tc + size, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左下部分</span></span><br><span class="line">        <span class="keyword">if</span> (dr &gt;= tr + size &amp;&amp; dc &lt; tc + size) &#123;</span><br><span class="line">            chessBoard(tr + size, tc, dr, dc, size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matrix[tr + size][tc + size - <span class="number">1</span>] = curPattern;</span><br><span class="line">            chessBoard(tr + size, tc, tr + size, tc + size - <span class="number">1</span>, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//右下部分</span></span><br><span class="line">        <span class="keyword">if</span> (dr &gt;= tr + size &amp;&amp; dc &gt;= tc + size) &#123;</span><br><span class="line">            chessBoard(tr + size, tc + size, dr, dc, size);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            matrix[tr + size][tc + size] = curPattern;</span><br><span class="line">            chessBoard(tr + size, tc + size, tr + size, tc + size, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>三、实验结果与分析</p>
<p>实验结果：<br><img src="/2020/10/04/%E6%A3%8B%E7%89%8C%E8%A6%86%E7%9B%96/jpgo.md.png" alt="实验结果"></p>
<p>实验分析：</p>
<p>用递归与分治的思想来解决，也就是把一个大的棋盘分成4个小棋盘，检索填充，然后在把小棋盘继续细分，直到棋盘中只包含一个格子为止。</p>
<p>主干是四个if else循环，也就是说只会执行一个if中的语句，但是会执行3个else中的语句，这3个else中的语句就是构造不可覆盖格子，然后对含有新构造的不可覆盖点的子棋盘来重写进行棋盘覆盖，也就是递归调用棋盘覆盖函数，递归的结束条件就是子棋盘只有一个格子，也就是size = 1，每次调用棋盘覆盖函数，都要进行size = size/2，目的就是把一个大棋盘划分为四个相同大小的子棋盘。</p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>Visual-Studio-Code更新提示路径找不到问题</title>
    <url>/2020/06/23/%E6%9B%B4%E6%96%B0%E6%8F%90%E7%A4%BA%E8%B7%AF%E5%BE%84%E6%89%BE%E4%B8%8D%E5%88%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述:"></a>问题描述:</h4><p>我们在更新VSCode时，机器提示路径不存在，它提示你看更新日志路径。如果你现在使用的VSCode路径不是你第一次下载安装时VSCode路径且第一次安装VSCode路径下的VSCode已删掉的话，那么出现错误提示的原因是因为注册表中还留有VSCode原来的路径，恰恰原来的路径下已经没有VSCode安装内容了，所有机器就会提示路径错误。</p>
<h4 id="解决办法有两种"><a href="#解决办法有两种" class="headerlink" title="解决办法有两种:"></a>解决办法有两种:</h4><ol>
<li>直接在它错误提示位置安装VSCode，可以直接把目前所使用VSCode的安装包内容复制过去就可解决更新失败问题</li>
<li>修改VSCode在注册表中的位置，win+r后输入regedit打开注册表，然后搜索Visual Studio Code ,然后不断查找下一个，找到错误提示位置信息，然后把里面的地址相应的改成当前VSCode位置。</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>用XShell设置代理SSH</title>
    <url>/2020/05/23/%E7%94%A8XShell%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86SSH/</url>
    <content><![CDATA[<p><meta name="referrer" content="no-referrer"></p>
<h2 id="所需条件"><a href="#所需条件" class="headerlink" title="所需条件"></a>所需条件</h2><ol>
<li>安装XShell软件</li>
<li>两个vps</li>
</ol>
<hr>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>鼠标点击该服务器—》右键—-》属性—-》隧道—》添加，添加窗口相关数据如下图所填：<br><img src="/2020/05/23/%E7%94%A8XShell%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86SSH/tianjia.jpg" alt="添加窗口"><br><strong>注意：类型要选(SOCKS4/5),侦听端口要填一个未被占用的端口，关于如何查看未被占用的端口请访问<a href="https://tropical-forest.github.io/2020/05/23/CentOS%E6%9C%89%E5%85%B3%E9%98%B2%E7%81%AB%E5%A2%99%E5%92%8C%E7%AB%AF%E5%8F%A3%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">CentOS7有关防火墙和端口的常用命令</a></strong></li>
<li>确定—》连接，如图<br><img src="/2020/05/23/%E7%94%A8XShell%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86SSH/xiaoguo.JPG" alt="代理vps连接后的效果图"><br>&nbsp;&nbsp;图片中的警告可以忽视，那是CentOS8 可以用web服务管理服务器的提示。注意到下面的local:9090灯亮了表示成功了</li>
<li>右键—》属性—》代理—》浏览—》添加，添加相关数据如图所填：<br><img src="/2020/05/23/%E7%94%A8XShell%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86SSH/4.JPG" alt="添加代理器的相关数据图"><br>类型选SOCK5，主机填localhost，端口要与刚才填隧道的端口一致。用户名和密码不要填。然后确定</li>
<li>选择刚才添加的代理器—-》连接，效果如图<br><img src="/2020/05/23/%E7%94%A8XShell%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86SSH/3.JPG" alt="被代理的服务器连接后的效果图"><br>出现这样的画面表示通过代理服务器连接另一台服务器已经成功了。</li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>如果在被代理的服务器出现非正常关闭时，一定记得重启服务器，不然再次连接时会失败。</li>
<li>我发现在被代理服务器开启防火墙服务时，该服务器就会死机，我也不明白什么原因。</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>代理SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>算法复杂性分析</title>
    <url>/2020/10/03/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E6%80%A7%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>算法复杂性的高低体现在运行该算法所需要的计算机资源的多少上，所需要的资源多，算法复杂性就越高；反之越少，算法复杂性就越低。算法复杂性主要分为时间复杂性和空间复杂性，顾名思义就是运行该算法所花费的时间和空间资源。算法复杂性分析对指导算法设计与分析具有重要意义。</p>
<h2 id="时间复杂性"><a href="#时间复杂性" class="headerlink" title="时间复杂性"></a>时间复杂性</h2><p>时间复杂性分析主要通过渐近上界、渐近下界、同阶方法进行分析</p>
<h3 id="渐近上界"><a href="#渐近上界" class="headerlink" title="渐近上界"></a>渐近上界</h3><p><strong>记号:</strong> O<br><strong>定义</strong><br>对所有 n，f(n)&gt;=0，g(n)&gt;=0,O(g(n))= { f(n) | 存在正常数 存在正常数 c和n0使得对所有 n&gt;=n0有： 0&lt;=f(n)&lt;=cg(n)}</p>
<h3 id="渐近下界"><a href="#渐近下界" class="headerlink" title="渐近下界"></a>渐近下界</h3><p><strong>记号:</strong> Ω<br><strong>定义</strong><br>对所有 n，f(n)&gt;=0，g(n)&gt;=0,Ω(g(n))= { f(n) | 存在正常数 存在正常数 c和n0使得对所有 n&gt;=n0有： 0&lt;=cg(n)&lt;=f(n)}</p>
<h3 id="同阶"><a href="#同阶" class="headerlink" title="同阶"></a>同阶</h3><p><strong>记号:</strong> Θ<br>O(f(n)) = Ω(f(n))</p>
<h2 id="空间复杂性"><a href="#空间复杂性" class="headerlink" title="空间复杂性"></a>空间复杂性</h2><p>空间复杂性分析较为简单，方法与时间复杂性分析相似</p>
]]></content>
      <categories>
        <category>算法设计与分析</category>
      </categories>
  </entry>
  <entry>
    <title>设置git代理</title>
    <url>/2020/07/05/%E8%AE%BE%E7%BD%AEgit%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>设置git代理方式:<br><code>git config --global http.proxy &#39;socks5://127.0.0.1:7070&#39;</code><br><code>git config --global https.proxy &#39;socks5://127.0.0.1:7070&#39;</code><br>删除git代理:<br><code>git config --global --unset http.proxy</code><br><code>git config --global --unset https.proxy</code></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>git代理</tag>
      </tags>
  </entry>
  <entry>
    <title>老毛子固件搞定锐捷认证</title>
    <url>/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>前言：<br>    如果你有一个校园网账号，想要实现全宿舍上网却因为锐捷认证问题所烦恼的话，那么这篇博客很适合你阅读。这篇博客是写通过一个刷有老毛子固件的路由器实现锐捷认证，实现全宿舍上网的方法。</p>
<h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/show.JPG" alt="锐捷认证成功后的效果图">这是刷有老毛子固件的路由器后台，经过锐捷认证成功后你就会发现地球图标上会出现绿色的√，若没有成功，则是红色的x。</p>
<h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>在操作开始之前，先准备好下面条件。不会刷路由器的朋友可以上某宝或某多等平台去淘装好固件的路由器，估计四十或五十就有了。WinSCP直接百度安装，抓包工具需要从下面网盘链接中下载下来，下面操作步骤中将会用到。</p>
<ul>
<li>带有老毛子固件的路由器</li>
<li>装好WinSCP软件</li>
<li><a href="https://pan.baidu.com/s/1dsBXKgT2cQ0FYQDk9OxGfA" target="_blank" rel="noopener">抓包工具</a>(提取码：sedx )</li>
</ul>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="获取正常认证成功后的mac地址"><a href="#获取正常认证成功后的mac地址" class="headerlink" title="获取正常认证成功后的mac地址"></a>获取正常认证成功后的mac地址</h3><p>首先用你的电脑网线连接, 然后正常启动官方的认证程序, 然后连接之后查看自己的网卡mac地址,然后把它记下来，后面会用到这个max地址。因为接下来的dhcp服务器进行ip分配的时候, 是通过你后台注册的mac地址进行分配的.这个步骤很重要!!!<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/max.JPG" alt="max地址"><br>这里需要除了记住mac地址外，还有把锐捷认证成功后的ip地址、网关地址、DNS地址，建议把截图，因为后面路由器锐捷认证填写信息会用到它。如下所示<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/information.JPG" alt="锐捷认证信息"></p>
<h3 id="抓取数据包"><a href="#抓取数据包" class="headerlink" title="抓取数据包"></a>抓取数据包</h3><p>经过前面条件那里，你应该安装好了抓包工具，抓包工具解压后的效果图如下所示。<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/bao.JPG" alt="抓包工具"><br>再把里面“锐捷测试软件和教程”压缩包解压，其效果图如下。<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/bao2.JPG" alt="抓包工具"><br>抓包工具里面有关于抓包的教程，请自行抓包。抓包成功后保存文件名随便取，这里方便测试，就取11.mdf为文件名。</p>
<h3 id="进入后台将SSH选项设置打开"><a href="#进入后台将SSH选项设置打开" class="headerlink" title="进入后台将SSH选项设置打开"></a>进入后台将SSH选项设置打开</h3><p>打开你的浏览器，输入网址192.168.123.1<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/后台.JPG" alt="后台"><br>建议先把路由器恢复出厂设置，避免受到其他设置的影响，从而提高成功率。然后再接着下面操作<br>1.再进入左侧的系统管理→2右侧服务→3.然后启动SSH服务<br>这样就可以进行下一步，使用WINSCP导入数据包<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/ssh.JPG" alt="ssh"></p>
<h3 id="用winscp连接上路由器-把11-mdf传到老毛子的-etc-storage文件夹下-必须是这个文件夹，因为老毛子其他文件夹重启后就会丢失"><a href="#用winscp连接上路由器-把11-mdf传到老毛子的-etc-storage文件夹下-必须是这个文件夹，因为老毛子其他文件夹重启后就会丢失" class="headerlink" title="用winscp连接上路由器, 把11.mdf传到老毛子的/etc/storage文件夹下(必须是这个文件夹，因为老毛子其他文件夹重启后就会丢失)"></a>用winscp连接上路由器, 把11.mdf传到老毛子的/etc/storage文件夹下(必须是这个文件夹，因为老毛子其他文件夹重启后就会丢失)</h3><p><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/winscp.JPG" alt="11.mpf在winscp里面的位置"></p>
<h3 id="在后台输入你的账号信息"><a href="#在后台输入你的账号信息" class="headerlink" title="在后台输入你的账号信息"></a>在后台输入你的账号信息</h3><p>1.打开后台—-》2.打开配置拓展环境—-》3.打开锐捷认证功能—》4.添加基本信息<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/information1.JPG" alt="填写锐捷认证信息1"><br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/information2.JPG" alt="填写锐捷认证信息2"><br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/information3.JPG" alt="填写锐捷认证信息3"><br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/information4.JPG" alt="填写锐捷认证信息4"><br>最后按“应该本页面设置”按钮，使设置信息生效。<br>接下来填写mac地址、宽度账号和密码，和设置为动态获得的方式来上网。如下图所示<br><img src="/2021/05/02/%E7%94%A8%E8%B7%AF%E7%94%B1%E5%99%A8%E7%BB%8F%E8%BF%87%E6%A0%A1%E5%9B%AD%E7%BD%91%E7%9A%84%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8F%B7%E5%85%A8%E5%AE%BF%E8%88%8D%E4%B8%8A%E7%BD%91/information5.JPG" alt="填写锐捷认证信息5"><br>最后按“应该本页面设置”按钮，使设置信息生效。到这里，整个操作都做完了，这时候你就会发现地球图标上会出现绿色的√，可以自由冲浪了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>终于坚持写完了，与锐捷认证的斗争终于告一段落。虽然是可以搞定锐捷认证，但都是借用别人的工具来使用，还是不太懂里面的原理，看来《计算机网络》的知识还不过关，还需要继续学习计算机网络知识。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>+<a href="https://blog.csdn.net/weixin_40500627/article/details/108395293" target="_blank" rel="noopener">老毛子固件搞定锐捷认证</a><br>+<a href="https://blog.csdn.net/Hj127666/article/details/114670652" target="_blank" rel="noopener">锐捷6.41，静态ip，学生破解过程分享</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果大家有什么指教的话，可以在下面留言。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>锐捷认证</tag>
        <tag>老毛子固件</tag>
      </tags>
  </entry>
  <entry>
    <title>集成 Spring Data JPA</title>
    <url>/2022/01/17/%E9%9B%86%E6%88%90-Spring-Data-JPA/</url>
    <content><![CDATA[<h1 id="集成-Spring-Data-JPA"><a href="#集成-Spring-Data-JPA" class="headerlink" title="集成 Spring Data JPA"></a>集成 Spring Data JPA</h1><h2 id="Spring-Data-JPA介绍"><a href="#Spring-Data-JPA介绍" class="headerlink" title="Spring Data JPA介绍"></a>Spring Data JPA介绍</h2><p>本节主要介绍Spring Data JPA是什么、Spring Data JPA 核心接口Repository、核心接口间的继承关系图</p>
<h3 id="Spring-Data-JPA介绍-1"><a href="#Spring-Data-JPA介绍-1" class="headerlink" title="Spring Data JPA介绍"></a>Spring Data JPA介绍</h3><ul>
<li>JPA是Sun官方提出的Java持久化规范</li>
<li>JPA的主要实现有Hibernate、EclipseLink、OpenJPA等</li>
<li>Spring Data JPA是Spring Data的一个子项目，通过提供基于JPA的Repository极大地减少了JPA作为数据访问方案的代码量。</li>
<li>通过Spring Data JPA框架，开发者可以省略持久层业务逻辑的工作，唯一要做的就是声明持久层的接口，其他都交给Spring Data JPA来完成。</li>
</ul>
<h3 id="核心接口-Repository"><a href="#核心接口-Repository" class="headerlink" title="核心接口 Repository"></a>核心接口 Repository</h3><p>​    Spring Data JPA是最顶层的接口是Repository，该接口是所有Repository类的父类。</p>
<p>​    Repository接口的子类有CrudRepository、PagingAndSortingRepository、JpaRepository等。其中，CrudRepository类提供了基本的增删改查等接口，PagingAndSortingRepository类提供了基本的分页和排序接口，而JpaRepository是CurdRepository和PagingAndSortingRepository的子类，继承了它们的所有接口。在实际的项目开发中，我们都是通过实现JpaRepository或者其子类进行基本的数据库操作。</p>
<h3 id="接口继承关系图"><a href="#接口继承关系图" class="headerlink" title="接口继承关系图"></a>接口继承关系图</h3><p><img src="/2022/01/17/%E9%9B%86%E6%88%90-Spring-Data-JPA/image-20190117111412608.png" alt="image-20190117111412608"></p>
<h2 id="集成-Spring-Data-JPA-1"><a href="#集成-Spring-Data-JPA-1" class="headerlink" title="集成 Spring Data JPA"></a>集成 Spring Data JPA</h2><p>本节通过Spring Data JPA 实现基本的增删改查功能</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>mysql-connector-java: MySQL连接Java的驱动程序。</li>
<li>spring-boot-starter-jdbc：支持通过JDBC连接数据库</li>
</ul>
<h3 id="添加数据库配置"><a href="#添加数据库配置" class="headerlink" title="添加数据库配置"></a>添加数据库配置</h3><p>在application.yaml添加如下的配置信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### mysql连接信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<h3 id="设计表和实体"><a href="#设计表和实体" class="headerlink" title="设计表和实体"></a>设计表和实体</h3><p>在test数据库里面添加ay_user表，表结构如下图所示:</p>
<p><img src="/2022/01/17/%E9%9B%86%E6%88%90-Spring-Data-JPA/image-20220117174721585.png" alt="image-20220117174721585"></p>
<p>整个项目结构如下图所示:</p>
<p><img src="/2022/01/17/%E9%9B%86%E6%88%90-Spring-Data-JPA/image-20220117174946310.png" alt="image-20220117174721585"></p>
<p>实体类AyUser的代码如下图所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Data是使用来自于lombok插件的方法，如果没有则需要安装</p>
<h3 id="继承-JpaRepository"><a href="#继承-JpaRepository" class="headerlink" title="继承 JpaRepository"></a>继承 JpaRepository</h3><p>AyUserRepositor接口的代码如下图所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">AyUser</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="服务层类实现"><a href="#服务层类实现" class="headerlink" title="服务层类实现"></a>服务层类实现</h3><p>AyUserService接口类代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">AyUser <span class="title">findById</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function">List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">AyUser <span class="title">save</span><span class="params">(AyUser ayUser)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">   <span class="function">Page&lt;AyUser&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line">   <span class="function">List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">   <span class="function">List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span></span>;</span><br><span class="line">   <span class="function">List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AyUserServiceImpl类的代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">AyUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AyUserRepository ayUserRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">findById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AyUser <span class="title">save</span><span class="params">(AyUser ayUser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.save(ayUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        ayUserRepository.deleteById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Page&lt;AyUser&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findAll(pageable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByName(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByNameLike</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByNameLike(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AyUser&gt; <span class="title">findByIdIn</span><span class="params">(Collection&lt;String&gt; ids)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserRepository.findByIdIn(ids);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><h3 id="测试用例开发"><a href="#测试用例开发" class="headerlink" title="测试用例开发"></a>测试用例开发</h3><p>在测试类中添加如下代码，如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查询所有数据</span></span><br><span class="line">        List&lt;AyUser&gt; userList1 = ayUserService.findAll();</span><br><span class="line">        System.out.println(<span class="string">"findAll() :"</span> + userList1.size());</span><br><span class="line">        <span class="comment">//通过name查询数据</span></span><br><span class="line">        List&lt;AyUser&gt; userList2 = ayUserService.findByName(<span class="string">"阿毅"</span>);</span><br><span class="line">        System.out.println(<span class="string">"findByName() :"</span>+userList2.size());</span><br><span class="line">        Assert.isTrue(userList2.get(<span class="number">0</span>).getName().equals(<span class="string">"阿毅"</span>),<span class="string">"data error!"</span>);</span><br><span class="line">        <span class="comment">//通过name模糊查询数据</span></span><br><span class="line">        List&lt;AyUser&gt; userList3 = ayUserService.findByNameLike(<span class="string">"%毅%"</span>);</span><br><span class="line">        System.out.println(<span class="string">"findByNameLike() :"</span> + userList3.size());</span><br><span class="line">        Assert.isTrue(userList3.get(<span class="number">0</span>).getName().equals(<span class="string">"阿毅"</span>),<span class="string">"data error!"</span>);</span><br><span class="line">        <span class="comment">//通过id列表查询数据</span></span><br><span class="line">        List&lt;String&gt; ids = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ids.add(<span class="string">"1"</span>);</span><br><span class="line">        ids.add(<span class="string">"2"</span>);</span><br><span class="line">        List&lt;AyUser&gt; userList4 = ayUserService.findByIdIn(ids);</span><br><span class="line">        System.out.println(<span class="string">"findByIdIn() :"</span> + userList4.size());</span><br><span class="line">        <span class="comment">//分页查询数据</span></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(<span class="number">0</span>,<span class="number">10</span>);</span><br><span class="line">        Page&lt;AyUser&gt; userList5  = ayUserService.findAll(pageRequest);</span><br><span class="line">        System.out.println(<span class="string">"page findAll():"</span>+userList5.getTotalPages()+<span class="string">"/"</span>+userList5.getSize());</span><br><span class="line">        <span class="comment">//新增数据</span></span><br><span class="line">        AyUser ayUser = <span class="keyword">new</span> AyUser();</span><br><span class="line">        ayUser.setId(<span class="string">"3"</span>);</span><br><span class="line">        ayUser.setName(<span class="string">"test"</span>);</span><br><span class="line">        ayUser.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        ayUserService.save(ayUser);</span><br><span class="line">        <span class="comment">//删除数据</span></span><br><span class="line">        ayUserService.delete(<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>运行上面的测试用例的效果图如下所示:</p>
<p><img src="/2022/01/17/%E9%9B%86%E6%88%90-Spring-Data-JPA/image-20220117180816936.png" alt="image-20220117180816936"></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Spring Data JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Thymeleaf模板引擎</title>
    <url>/2022/01/17/%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="使用Thymeleaf模板引擎"><a href="#使用Thymeleaf模板引擎" class="headerlink" title="使用Thymeleaf模板引擎"></a>使用Thymeleaf模板引擎</h1><p>​    本篇博客主要介绍Thymeleaf模板引擎、Spring Boot中如何使用Thymeleaf、集成测试</p>
<h2 id="Thymeleaf"><a href="#Thymeleaf" class="headerlink" title="Thymeleaf"></a>Thymeleaf</h2><p>Thymeleaf是一个流行的模板引擎，该模板引擎采用Java语言开发，模板引擎是一个技术名词，是跨领域跨平台的概念，在Java语言体系下有模板引擎，在C#、PHP语言体系下也有模板引擎。除了thymeleaf之外还有Velocity、FreeMarker等模板引擎，功能类似。</p>
<p>Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。你可以使用它创建经过验证的XML与HTML模板。使用thymeleaf创建的html模板可以在浏览器里面直接打开（展示静态数据），这有利于前后端分离。需要注意的是thymeleaf不是spring旗下的。</p>
<p>下面简单列举一下Thymeleaf常用的表达式、标签和函数</p>
<p>常用表达式：</p>
<ul>
<li>${…} 变量表达式</li>
<li>*{…} 选择表达式</li>
<li><h1 id="…-消息文字表达式"><a href="#…-消息文字表达式" class="headerlink" title="{…} 消息文字表达式"></a>{…} 消息文字表达式</h1></li>
<li>@{…} 链接url表达式</li>
<li><h1 id="maps-工具对象表达式"><a href="#maps-工具对象表达式" class="headerlink" title="maps 工具对象表达式"></a>maps 工具对象表达式</h1></li>
</ul>
<p>常用标签:</p>
<ul>
<li>th:action 定义后台控制器路径</li>
<li>th:each 循环语句</li>
<li>th:field 表单字段绑定</li>
<li>th:href 定义超链接</li>
<li>th:id div标签中的ID声明，类似HTML标签中的ID属性</li>
<li>th:if 条件判断语句</li>
<li>th:include 布局标签，替换内容到引入文件</li>
<li>th:fragment 布局标签，定义一个代码片段，方便其他地方引用</li>
<li>th:object 替换对象</li>
<li>th:src 图片类地址引入</li>
<li>th:text 显示文本</li>
<li>th:value 属性赋值</li>
</ul>
<p>常用函数：</p>
<ul>
<li><h1 id="dates-日期函数"><a href="#dates-日期函数" class="headerlink" title="dates 日期函数"></a>dates 日期函数</h1></li>
<li><h1 id="lists-列表函数"><a href="#lists-列表函数" class="headerlink" title="lists 列表函数"></a>lists 列表函数</h1></li>
<li><h1 id="arrays-数组函数"><a href="#arrays-数组函数" class="headerlink" title="arrays 数组函数"></a>arrays 数组函数</h1></li>
<li><h1 id="strings-字符串函数"><a href="#strings-字符串函数" class="headerlink" title="strings 字符串函数"></a>strings 字符串函数</h1></li>
<li><h1 id="numbers-数字函数"><a href="#numbers-数字函数" class="headerlink" title="numbers 数字函数"></a>numbers 数字函数</h1></li>
<li><h1 id="calendars-日历函数"><a href="#calendars-日历函数" class="headerlink" title="calendars 日历函数"></a>calendars 日历函数</h1></li>
<li><h1 id="objects-对象函数"><a href="#objects-对象函数" class="headerlink" title="objects 对象函数"></a>objects 对象函数</h1></li>
<li><h1 id="bools-逻辑函数"><a href="#bools-逻辑函数" class="headerlink" title="bools 逻辑函数"></a>bools 逻辑函数</h1></li>
</ul>
<h2 id="使用-Thymeleaf模板引擎"><a href="#使用-Thymeleaf模板引擎" class="headerlink" title="使用 Thymeleaf模板引擎"></a>使用 Thymeleaf模板引擎</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在application.yaml进行配置，配置代码如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">### thymeleaf配置</span></span><br><span class="line"><span class="attr">thymeleaf:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">HTML5</span></span><br><span class="line">  <span class="attr">encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="comment">### 内容类别，可不用配置</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">  <span class="comment">### 开发配置false,避免修改模板还要重启服务器</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">### 配置模板路径，默认是templates，可以不用配置</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br></pre></td></tr></table></figure>
<h3 id="控制层开发"><a href="#控制层开发" class="headerlink" title="控制层开发"></a>控制层开发</h3><p>​    在项目目录/src/main/java/com.lpy.controller下开发控制层AyUserController.java，同时把AyUserService服务注入控制层类中。具体代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ayUser"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AyUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AyUserService ayUserService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//查询数据库所有用户</span></span><br><span class="line">       List&lt;AyUser&gt; ayUserList = ayUserService.findAll();</span><br><span class="line">       model.addAttribute(<span class="string">"users"</span>,ayUserList);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"ayUser"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Thymeleaf模板页面开发"><a href="#Thymeleaf模板页面开发" class="headerlink" title="Thymeleaf模板页面开发"></a>Thymeleaf模板页面开发</h3><p>​    控制层类AyUserController.java开发完成之后，我们继续在/src/main/resources/templates目录下开发ayUser.html，具体代码如下:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"user:$&#123;users&#125;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h2><p>​    现在运行项目，然后在浏览器中访问<a href="http://localhost:8080/ayUser/test" target="_blank" rel="noopener">http://localhost:8080/ayUser/test</a></p>
<p><img src="/2022/01/17/%E4%BD%BF%E7%94%A8Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/image-20220117230846238.png" alt="image-20220117230846238"></p>
<p>出现类似上图结果，则表示thymeleaf使用成功。</p>
]]></content>
  </entry>
</search>
